{"version":3,"file":"heatmapPanel.eab8a633805570276785.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/ColorScale/ColorScale.tsx","webpack://grafana/./public/app/features/transformers/calculateHeatmap/editor/AxisEditor.tsx","webpack://grafana/./public/app/features/transformers/calculateHeatmap/editor/helper.ts","webpack://grafana/./public/app/features/transformers/calculateHeatmap/heatmap.ts","webpack://grafana/./public/app/features/transformers/calculateHeatmap/utils.ts","webpack://grafana/./public/app/features/transformers/suggestionsInput/SuggestionsInput.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapPanel.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapTooltip.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/fields.ts","webpack://grafana/./public/app/plugins/panel/heatmap/migrations.ts","webpack://grafana/./public/app/plugins/panel/heatmap/module.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/palettes.ts","webpack://grafana/./public/app/plugins/panel/heatmap/renderHistogram.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/suggestions.ts","webpack://grafana/./public/app/plugins/panel/heatmap/tooltip/utils.ts","webpack://grafana/./public/app/plugins/panel/heatmap/utils.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\ntype Props = {\n  colorPalette: string[];\n  min: number;\n  max: number;\n\n  // Show a value as string -- when not defined, the raw values will not be shown\n  display?: (v: number) => string;\n  hoverValue?: number;\n  useStopsPercentage?: boolean;\n};\n\ntype HoverState = {\n  isShown: boolean;\n  value: number;\n};\n\nconst GRADIENT_STOPS = 10;\n\nexport const ColorScale = ({ colorPalette, min, max, display, hoverValue, useStopsPercentage }: Props) => {\n  const [colors, setColors] = useState<string[]>([]);\n  const [scaleHover, setScaleHover] = useState<HoverState>({ isShown: false, value: 0 });\n  const [percent, setPercent] = useState<number | null>(null); // 0-100 for CSS percentage\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, colors);\n\n  useEffect(() => {\n    setColors(getGradientStops({ colorArray: colorPalette, stops: GRADIENT_STOPS, useStopsPercentage }));\n  }, [colorPalette, useStopsPercentage]);\n\n  const onScaleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    const divOffset = event.nativeEvent.offsetX;\n    const offsetWidth = event.currentTarget.offsetWidth;\n    const normPercentage = Math.floor((divOffset * 100) / offsetWidth + 1);\n    const scaleValue = Math.floor(((max - min) * normPercentage) / 100 + min);\n\n    setScaleHover({ isShown: true, value: scaleValue });\n    setPercent(normPercentage);\n  };\n\n  const onScaleMouseLeave = () => {\n    setScaleHover({ isShown: false, value: 0 });\n  };\n\n  useEffect(() => {\n    setPercent(hoverValue == null ? null : clampPercent100((hoverValue - min) / (max - min)));\n  }, [hoverValue, min, max]);\n\n  return (\n    <div className={styles.scaleWrapper} onMouseMove={onScaleMouseMove} onMouseLeave={onScaleMouseLeave}>\n      <div className={styles.scaleGradient}>\n        {display && (scaleHover.isShown || hoverValue !== undefined) && (\n          <div className={styles.followerContainer}>\n            <div className={styles.follower} style={{ left: `${percent}%` }} />\n          </div>\n        )}\n      </div>\n      {display && (\n        <div className={styles.followerContainer}>\n          <div className={styles.legendValues}>\n            <span className={styles.disabled}>{display(min)}</span>\n            <span className={styles.disabled}>{display(max)}</span>\n          </div>\n          {percent != null && (scaleHover.isShown || hoverValue !== undefined) && (\n            <span className={styles.hoverValue} style={{ left: `${percent}%` }}>\n              {display(hoverValue ?? scaleHover.value)}\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getGradientStops = ({\n  colorArray,\n  stops,\n  useStopsPercentage = true,\n}: {\n  colorArray: string[];\n  stops: number;\n  useStopsPercentage?: boolean;\n}): string[] => {\n  const colorCount = colorArray.length;\n  if (useStopsPercentage && colorCount <= 20) {\n    const incr = (1 / colorCount) * 100;\n    let per = 0;\n    const stops: string[] = [];\n    for (const color of colorArray) {\n      if (per > 0) {\n        stops.push(`${color} ${per}%`);\n      } else {\n        stops.push(color);\n      }\n      per += incr;\n      stops.push(`${color} ${per}%`);\n    }\n    return stops;\n  }\n\n  const gradientEnd = colorArray[colorCount - 1];\n  const skip = Math.ceil(colorCount / stops);\n  const gradientStops = new Set<string>();\n\n  for (let i = 0; i < colorCount; i += skip) {\n    gradientStops.add(colorArray[i]);\n  }\n\n  gradientStops.add(gradientEnd);\n\n  return [...gradientStops];\n};\n\nfunction clampPercent100(v: number) {\n  if (v > 1) {\n    return 100;\n  }\n  if (v < 0) {\n    return 0;\n  }\n  return v * 100;\n}\n\nconst getStyles = (theme: GrafanaTheme2, colors: string[]) => ({\n  scaleWrapper: css({\n    width: '100%',\n    fontSize: '11px',\n    opacity: 1,\n  }),\n  scaleGradient: css({\n    background: `linear-gradient(90deg, ${colors.join()})`,\n    height: '9px',\n    pointerEvents: 'none',\n    borderRadius: theme.shape.radius.default,\n  }),\n  legendValues: css({\n    display: 'flex',\n    justifyContent: 'space-between',\n    pointerEvents: 'none',\n  }),\n  hoverValue: css({\n    position: 'absolute',\n    marginTop: '-14px',\n    padding: '3px 15px',\n    transform: 'translateX(-50%)',\n  }),\n  followerContainer: css({\n    position: 'relative',\n    pointerEvents: 'none',\n    whiteSpace: 'nowrap',\n  }),\n  follower: css({\n    position: 'absolute',\n    height: '13px',\n    width: '13px',\n    borderRadius: theme.shape.radius.default,\n    transform: 'translateX(-50%) translateY(-50%)',\n    border: `2px solid ${theme.colors.text.primary}`,\n    top: '5px',\n  }),\n  disabled: css({\n    color: theme.colors.text.disabled,\n  }),\n});\n","import React, { useState } from 'react';\n\nimport { SelectableValue, StandardEditorProps, VariableOrigin } from '@grafana/data';\nimport { getTemplateSrv, config as cfg } from '@grafana/runtime';\nimport { HeatmapCalculationBucketConfig, HeatmapCalculationMode } from '@grafana/schema';\nimport { HorizontalGroup, Input, RadioButtonGroup, ScaleDistribution } from '@grafana/ui';\n\nimport { SuggestionsInput } from '../../suggestionsInput/SuggestionsInput';\nimport { numberOrVariableValidator } from '../../utils';\n\nconst modeOptions: Array<SelectableValue<HeatmapCalculationMode>> = [\n  {\n    label: 'Size',\n    value: HeatmapCalculationMode.Size,\n    description: 'Split the buckets based on size',\n  },\n  {\n    label: 'Count',\n    value: HeatmapCalculationMode.Count,\n    description: 'Split the buckets based on count',\n  },\n];\n\nconst logModeOptions: Array<SelectableValue<HeatmapCalculationMode>> = [\n  {\n    label: 'Split',\n    value: HeatmapCalculationMode.Size,\n    description: 'Split the buckets based on size',\n  },\n];\n\nexport const AxisEditor = ({ value, onChange, item }: StandardEditorProps<HeatmapCalculationBucketConfig>) => {\n  const [isInvalid, setInvalid] = useState<boolean>(false);\n\n  const onValueChange = (bucketValue: string) => {\n    setInvalid(!numberOrVariableValidator(bucketValue));\n    onChange({\n      ...value,\n      value: bucketValue,\n    });\n  };\n\n  const templateSrv = getTemplateSrv();\n  const variables = templateSrv.getVariables().map((v) => {\n    return { value: v.name, label: v.label || v.name, origin: VariableOrigin.Template };\n  });\n\n  return (\n    <HorizontalGroup>\n      <RadioButtonGroup\n        value={value?.mode || HeatmapCalculationMode.Size}\n        options={value?.scale?.type === ScaleDistribution.Log ? logModeOptions : modeOptions}\n        onChange={(mode) => {\n          onChange({\n            ...value,\n            mode,\n          });\n        }}\n      />\n      {cfg.featureToggles.transformationsVariableSupport ? (\n        <SuggestionsInput\n          invalid={isInvalid}\n          error={'Value needs to be an integer or a variable'}\n          value={value?.value ?? ''}\n          placeholder=\"Auto\"\n          onChange={onValueChange}\n          suggestions={variables}\n        />\n      ) : (\n        <Input\n          value={value?.value ?? ''}\n          placeholder=\"Auto\"\n          onChange={(v) => {\n            onChange({\n              ...value,\n              value: v.currentTarget.value,\n            });\n          }}\n        />\n      )}\n    </HorizontalGroup>\n  );\n};\n","import { PanelOptionsEditorBuilder } from '@grafana/data';\nimport { ScaleDistribution, HeatmapCalculationMode, HeatmapCalculationOptions } from '@grafana/schema';\nimport { ScaleDistributionEditor } from '@grafana/ui/src/options/builder';\n\nimport { AxisEditor } from './AxisEditor';\n\nexport function addHeatmapCalculationOptions(\n  prefix: string,\n  builder: PanelOptionsEditorBuilder<any>,\n  source?: HeatmapCalculationOptions,\n  category?: string[]\n) {\n  builder.addCustomEditor({\n    id: 'xBuckets',\n    path: `${prefix}xBuckets`,\n    name: 'X Bucket',\n    editor: AxisEditor,\n    category,\n    defaultValue: {\n      mode: HeatmapCalculationMode.Size,\n    },\n  });\n\n  builder.addCustomEditor({\n    id: 'yBuckets',\n    path: `${prefix}yBuckets`,\n    name: 'Y Bucket',\n    editor: AxisEditor,\n    category,\n    defaultValue: {\n      mode: HeatmapCalculationMode.Size,\n    },\n  });\n\n  builder.addCustomEditor({\n    id: 'yBuckets-scale',\n    path: `${prefix}yBuckets.scale`,\n    name: 'Y Bucket scale',\n    category,\n    editor: ScaleDistributionEditor,\n    defaultValue: { type: ScaleDistribution.Linear },\n  });\n}\n","import { map } from 'rxjs';\n\nimport {\n  DataFrame,\n  DataTransformerID,\n  FieldType,\n  incrRoundUp,\n  incrRoundDn,\n  SynchronousDataTransformerInfo,\n  DataFrameType,\n  getFieldDisplayName,\n  Field,\n  getValueFormat,\n  formattedValueToString,\n  durationToMilliseconds,\n  parseDuration,\n  TransformationApplicabilityLevels,\n  TimeRange,\n} from '@grafana/data';\nimport { isLikelyAscendingVector } from '@grafana/data/src/transformations/transformers/joinDataFrames';\nimport { config } from '@grafana/runtime';\nimport {\n  ScaleDistribution,\n  HeatmapCellLayout,\n  HeatmapCalculationMode,\n  HeatmapCalculationOptions,\n} from '@grafana/schema';\n\nimport { niceLinearIncrs, niceTimeIncrs } from './utils';\n\nexport interface HeatmapTransformerOptions extends HeatmapCalculationOptions {\n  /** the raw values will still exist in results after transformation */\n  keepOriginalData?: boolean;\n}\n\nexport const heatmapTransformer: SynchronousDataTransformerInfo<HeatmapTransformerOptions> = {\n  id: DataTransformerID.heatmap,\n  name: 'Create heatmap',\n  description: 'Generate heatmap data from source data.',\n  defaultOptions: {},\n  isApplicable: (data) => {\n    const { xField, yField, xs, ys } = findHeatmapFields(data);\n\n    if (xField || yField) {\n      return TransformationApplicabilityLevels.NotPossible;\n    }\n\n    if (!xs.length || !ys.length) {\n      return TransformationApplicabilityLevels.NotPossible;\n    }\n\n    return TransformationApplicabilityLevels.Applicable;\n  },\n  isApplicableDescription:\n    'The Heatmap transformation requires fields with Heatmap compatible data. No fields with Heatmap data could be found.',\n  operator: (options, ctx) => (source) =>\n    source.pipe(\n      map((data) => {\n        if (config.featureToggles.transformationsVariableSupport) {\n          const optionsCopy = {\n            ...options,\n            xBuckets: { ...options.xBuckets } ?? undefined,\n            yBuckets: { ...options.yBuckets } ?? undefined,\n          };\n\n          if (optionsCopy.xBuckets?.value) {\n            optionsCopy.xBuckets.value = ctx.interpolate(optionsCopy.xBuckets.value);\n          }\n\n          if (optionsCopy.yBuckets?.value) {\n            optionsCopy.yBuckets.value = ctx.interpolate(optionsCopy.yBuckets.value);\n          }\n\n          return heatmapTransformer.transformer(optionsCopy, ctx)(data);\n        } else {\n          return heatmapTransformer.transformer(options, ctx)(data);\n        }\n      })\n    ),\n\n  transformer: (options: HeatmapTransformerOptions) => {\n    return (data: DataFrame[]) => {\n      const v = calculateHeatmapFromData(data, options);\n      if (options.keepOriginalData) {\n        return [v, ...data];\n      }\n      return [v];\n    };\n  },\n};\n\nfunction parseNumeric(v?: string | null) {\n  return v === '+Inf' ? Infinity : v === '-Inf' ? -Infinity : +(v ?? 0);\n}\n\nexport function sortAscStrInf(aName?: string | null, bName?: string | null) {\n  return parseNumeric(aName) - parseNumeric(bName);\n}\n\nexport interface HeatmapRowsCustomMeta {\n  /** This provides the lookup values */\n  yOrdinalDisplay: string[];\n  yOrdinalLabel?: string[];\n  yMatchWithLabel?: string;\n  yMinDisplay?: string;\n}\n\n/** simple utility to get heatmap metadata from a frame */\nexport function readHeatmapRowsCustomMeta(frame?: DataFrame): HeatmapRowsCustomMeta {\n  return (frame?.meta?.custom ?? {}) as HeatmapRowsCustomMeta;\n}\n\nexport function isHeatmapCellsDense(frame: DataFrame) {\n  let foundY = false;\n\n  for (let field of frame.fields) {\n    // dense heatmap frames can only have one of these fields\n    switch (field.name) {\n      case 'y':\n      case 'yMin':\n      case 'yMax':\n        if (foundY) {\n          return false;\n        }\n\n        foundY = true;\n    }\n  }\n\n  return foundY;\n}\n\nexport interface RowsHeatmapOptions {\n  frame: DataFrame;\n  value?: string; // the field value name\n  unit?: string;\n  decimals?: number;\n  layout?: HeatmapCellLayout;\n}\n\n/** Given existing buckets, create a values style frame */\n// Assumes frames have already been sorted ASC and de-accumulated.\nexport function rowsToCellsHeatmap(opts: RowsHeatmapOptions): DataFrame {\n  // TODO: handle null-filling w/ fields[0].config.interval?\n  const xField = opts.frame.fields[0];\n  const xValues = xField.values;\n  const yFields = opts.frame.fields.filter((f, idx) => f.type === FieldType.number && idx > 0);\n\n  // similar to initBins() below\n  const len = xValues.length * yFields.length;\n  const xs = new Array(len);\n  const ys = new Array(len);\n  const counts2 = new Array(len);\n\n  const counts = yFields.map((field) => field.values.slice());\n\n  // transpose\n  counts.forEach((bucketCounts, bi) => {\n    for (let i = 0; i < bucketCounts.length; i++) {\n      counts2[counts.length * i + bi] = bucketCounts[i];\n    }\n  });\n\n  const bucketBounds = Array.from({ length: yFields.length }, (v, i) => i);\n\n  // fill flat/repeating array\n  for (let i = 0, yi = 0, xi = 0; i < len; yi = ++i % bucketBounds.length) {\n    ys[i] = bucketBounds[yi];\n\n    if (yi === 0 && i >= bucketBounds.length) {\n      xi++;\n    }\n\n    xs[i] = xValues[xi];\n  }\n\n  // this name determines whether cells are drawn above, below, or centered on the values\n  let ordinalFieldName = yFields[0].labels?.le != null ? 'yMax' : 'y';\n  switch (opts.layout) {\n    case HeatmapCellLayout.le:\n      ordinalFieldName = 'yMax';\n      break;\n    case HeatmapCellLayout.ge:\n      ordinalFieldName = 'yMin';\n      break;\n    case HeatmapCellLayout.unknown:\n      ordinalFieldName = 'y';\n      break;\n  }\n\n  const custom: HeatmapRowsCustomMeta = {\n    yOrdinalDisplay: yFields.map((f) => getFieldDisplayName(f, opts.frame)),\n    yMatchWithLabel: Object.keys(yFields[0].labels ?? {})[0],\n  };\n  if (custom.yMatchWithLabel) {\n    custom.yOrdinalLabel = yFields.map((f) => f.labels?.[custom.yMatchWithLabel!] ?? '');\n    if (custom.yMatchWithLabel === 'le') {\n      custom.yMinDisplay = '0.0';\n    }\n  }\n\n  // Format the labels as a value\n  // TODO: this leaves the internally prepended '0.0' without this formatting treatment\n  if (opts.unit?.length || opts.decimals != null) {\n    const fmt = getValueFormat(opts.unit ?? 'short');\n    if (custom.yMinDisplay) {\n      custom.yMinDisplay = formattedValueToString(fmt(0, opts.decimals));\n    }\n    custom.yOrdinalDisplay = custom.yOrdinalDisplay.map((name) => {\n      let num = +name;\n\n      if (!Number.isNaN(num)) {\n        return formattedValueToString(fmt(num, opts.decimals));\n      }\n\n      return name;\n    });\n  }\n\n  const valueCfg = {\n    ...yFields[0].config,\n  };\n\n  if (valueCfg.displayNameFromDS) {\n    delete valueCfg.displayNameFromDS;\n  }\n\n  return {\n    length: xs.length,\n    refId: opts.frame.refId,\n    meta: {\n      type: DataFrameType.HeatmapCells,\n      custom,\n    },\n    fields: [\n      {\n        name: xField.type === FieldType.time ? 'xMax' : 'x',\n        type: xField.type,\n        values: xs,\n        config: xField.config,\n      },\n      {\n        name: ordinalFieldName,\n        type: FieldType.number,\n        values: ys,\n        config: {\n          unit: 'short', // ordinal lookup\n        },\n      },\n      {\n        name: opts.value?.length ? opts.value : 'Value',\n        type: FieldType.number,\n        values: counts2,\n        config: valueCfg,\n        display: yFields[0].display,\n      },\n    ],\n  };\n}\n\n// Sorts frames ASC by numeric bucket name and de-accumulates values in each frame's Value field [1]\n// similar to Prometheus result_transformer.ts -> transformToHistogramOverTime()\nexport function prepBucketFrames(frames: DataFrame[]): DataFrame[] {\n  frames = frames.slice();\n\n  // sort ASC by frame.name (Prometheus bucket bound)\n  // or use frame.fields[1].config.displayNameFromDS ?\n  frames.sort((a, b) => sortAscStrInf(a.name, b.name));\n\n  // cumulative counts\n  const counts = frames.map((frame) => frame.fields[1].values.slice());\n\n  // de-accumulate\n  counts.reverse();\n  counts.forEach((bucketCounts, bi) => {\n    if (bi < counts.length - 1) {\n      for (let i = 0; i < bucketCounts.length; i++) {\n        bucketCounts[i] -= counts[bi + 1][i];\n      }\n    }\n  });\n  counts.reverse();\n\n  return frames.map((frame, i) => ({\n    ...frame,\n    fields: [\n      frame.fields[0],\n      {\n        ...frame.fields[1],\n        values: counts[i],\n      },\n    ],\n  }));\n}\n\ninterface HeatmapCalculationOptionsWithTimeRange extends HeatmapCalculationOptions {\n  timeRange?: TimeRange;\n}\n\nexport function calculateHeatmapFromData(\n  frames: DataFrame[],\n  options: HeatmapCalculationOptionsWithTimeRange\n): DataFrame {\n  // Find fields in the heatmap\n  const { xField, yField, xs, ys } = findHeatmapFields(frames);\n\n  if (!xField || !yField) {\n    throw 'no heatmap fields found';\n  }\n\n  if (!xs.length || !ys.length) {\n    throw 'no values found';\n  }\n\n  const xBucketsCfg = options.xBuckets ?? {};\n  const yBucketsCfg = options.yBuckets ?? {};\n\n  if (xBucketsCfg.scale?.type === ScaleDistribution.Log) {\n    throw 'X axis only supports linear buckets';\n  }\n\n  const scaleDistribution = options.yBuckets?.scale ?? {\n    type: ScaleDistribution.Linear,\n  };\n\n  const heat2d = heatmap(xs, ys, {\n    xSorted: isLikelyAscendingVector(xs),\n    xTime: xField.type === FieldType.time,\n    xMode: xBucketsCfg.mode,\n    xSize:\n      xBucketsCfg.mode === HeatmapCalculationMode.Size\n        ? durationToMilliseconds(parseDuration(xBucketsCfg.value ?? ''))\n        : xBucketsCfg.value\n          ? +xBucketsCfg.value\n          : undefined,\n    yMode: yBucketsCfg.mode,\n    ySize: yBucketsCfg.value ? +yBucketsCfg.value : undefined,\n    yLog:\n      scaleDistribution?.type === ScaleDistribution.Log ? (scaleDistribution?.log as 2 | 10 | undefined) : undefined,\n\n    xMin: options.timeRange?.from.valueOf(),\n    xMax: options.timeRange?.to.valueOf(),\n  });\n\n  const frame = {\n    length: heat2d.x.length,\n    name: getFieldDisplayName(yField),\n    meta: {\n      type: DataFrameType.HeatmapCells,\n    },\n    fields: [\n      {\n        name: 'xMin',\n        type: xField.type,\n        values: heat2d.x,\n        config: xField.config,\n      },\n      {\n        name: 'yMin',\n        type: FieldType.number,\n        values: heat2d.y,\n        config: {\n          ...yField.config, // keep units from the original source\n          custom: {\n            scaleDistribution,\n          },\n        },\n      },\n      {\n        name: 'Count',\n        type: FieldType.number,\n        values: heat2d.count,\n        config: {\n          unit: 'short', // always integer\n        },\n      },\n    ],\n  };\n\n  return frame;\n}\n\n/**\n * Find fields that can be used within a heatmap\n *\n * @param frames\n *  An array of DataFrames\n */\nfunction findHeatmapFields(frames: DataFrame[]) {\n  let xField: Field | undefined = undefined;\n  let yField: Field | undefined = undefined;\n  let dataLen = 0;\n\n  // pre-allocate arrays\n  for (let frame of frames) {\n    // TODO: assumes numeric timestamps, ordered asc, without nulls\n    const x = frame.fields.find((f) => f.type === FieldType.time);\n    if (x) {\n      dataLen += frame.length;\n    }\n  }\n\n  let xs: number[] = Array(dataLen);\n  let ys: number[] = Array(dataLen);\n  let j = 0;\n\n  for (let frame of frames) {\n    // TODO: assumes numeric timestamps, ordered asc, without nulls\n    const x = frame.fields.find((f) => f.type === FieldType.time);\n    if (!x) {\n      continue;\n    }\n\n    if (!xField) {\n      xField = x; // the first X\n    }\n\n    const xValues = x.values;\n    for (let field of frame.fields) {\n      if (field !== x && field.type === FieldType.number) {\n        const yValues = field.values;\n\n        for (let i = 0; i < xValues.length; i++, j++) {\n          xs[j] = xValues[i];\n          ys[j] = yValues[i];\n        }\n\n        if (!yField) {\n          yField = field;\n        }\n      }\n    }\n  }\n\n  return { xField, yField, xs, ys };\n}\n\ninterface HeatmapOpts {\n  // default is 10% of data range, snapped to a \"nice\" increment\n  xMode?: HeatmapCalculationMode;\n  yMode?: HeatmapCalculationMode;\n  xSize?: number;\n  ySize?: number;\n\n  // use Math.ceil instead of Math.floor for bucketing\n  xCeil?: boolean;\n  yCeil?: boolean;\n\n  // log2 or log10 buckets\n  xLog?: 2 | 10;\n  yLog?: 2 | 10;\n\n  xTime?: boolean;\n  yTime?: boolean;\n\n  // optimization hints for known data ranges (sorted, pre-scanned, etc)\n  xMin?: number;\n  xMax?: number;\n  yMin?: number;\n  yMax?: number;\n\n  xSorted?: boolean;\n  ySorted?: boolean;\n}\n\n// TODO: handle NaN, Inf, -Inf, null, undefined values in xs & ys\nfunction heatmap(xs: number[], ys: number[], opts?: HeatmapOpts) {\n  let len = xs.length;\n\n  let xSorted = opts?.xSorted ?? false;\n  let ySorted = opts?.ySorted ?? false;\n\n  // find x and y limits to pre-compute buckets struct\n  let minX = opts?.xMin ?? (xSorted ? xs[0] : Infinity);\n  let minY = ySorted ? ys[0] : Infinity;\n  let maxX = opts?.xMax ?? (xSorted ? xs[len - 1] : -Infinity);\n  let maxY = ySorted ? ys[len - 1] : -Infinity;\n\n  let yExp = opts?.yLog;\n\n  let withPredefX = opts?.xMin != null && opts?.xMax != null;\n  let withPredefY = opts?.yMin != null && opts?.yMax != null;\n\n  for (let i = 0; i < len; i++) {\n    if (!xSorted && !withPredefX) {\n      minX = Math.min(minX, xs[i]);\n      maxX = Math.max(maxX, xs[i]);\n    }\n\n    if (!ySorted && !withPredefY) {\n      if (!yExp || ys[i] > 0) {\n        minY = Math.min(minY, ys[i]);\n        maxY = Math.max(maxY, ys[i]);\n      }\n    }\n  }\n\n  //let scaleX = opts?.xLog === 10 ? Math.log10 : opts?.xLog === 2 ? Math.log2 : (v: number) => v;\n  //let scaleY = opts?.yLog === 10 ? Math.log10 : opts?.yLog === 2 ? Math.log2 : (v: number) => v;\n\n  let xBinIncr = opts?.xSize ?? 0;\n  let yBinIncr = opts?.ySize ?? 0;\n  let xMode = opts?.xMode;\n  let yMode = opts?.yMode;\n\n  // fall back to 10 buckets if invalid settings\n  if (!Number.isFinite(xBinIncr) || xBinIncr <= 0) {\n    xMode = HeatmapCalculationMode.Count;\n    xBinIncr = 20;\n  }\n  if (!Number.isFinite(yBinIncr) || yBinIncr <= 0) {\n    yMode = HeatmapCalculationMode.Count;\n    yBinIncr = 10;\n  }\n\n  if (xMode === HeatmapCalculationMode.Count) {\n    let approx = (maxX - minX) / Math.max(xBinIncr - 1, 1);\n    // nice-ify\n    let xIncrs = opts?.xTime ? niceTimeIncrs : niceLinearIncrs;\n    let xIncrIdx = xIncrs.findIndex((bucketSize) => bucketSize > approx) - 1;\n    xBinIncr = xIncrs[Math.max(xIncrIdx, 0)];\n  }\n\n  if (yMode === HeatmapCalculationMode.Count) {\n    let approx = (maxY - minY) / Math.max(yBinIncr - 1, 1);\n    // nice-ify\n    let yIncrs = opts?.yTime ? niceTimeIncrs : niceLinearIncrs;\n    let yIncrIdx = yIncrs.findIndex((bucketSize) => bucketSize > approx) - 1;\n    yBinIncr = yIncrs[Math.max(yIncrIdx, 0)];\n  }\n\n  // console.log({\n  //   yBinIncr,\n  //   xBinIncr,\n  // });\n\n  let binX = opts?.xCeil ? (v: number) => incrRoundUp(v, xBinIncr) : (v: number) => incrRoundDn(v, xBinIncr);\n  let binY = opts?.yCeil ? (v: number) => incrRoundUp(v, yBinIncr) : (v: number) => incrRoundDn(v, yBinIncr);\n\n  if (yExp) {\n    yBinIncr = 1 / (opts?.ySize ?? 1); // sub-divides log exponents\n    let yLog = yExp === 2 ? Math.log2 : Math.log10;\n    binY = opts?.yCeil ? (v: number) => incrRoundUp(yLog(v), yBinIncr) : (v: number) => incrRoundDn(yLog(v), yBinIncr);\n  }\n\n  let minXBin = binX(minX);\n  let maxXBin = binX(maxX);\n  let minYBin = binY(minY);\n  let maxYBin = binY(maxY);\n\n  let xBinQty = Math.round((maxXBin - minXBin) / xBinIncr) + 1;\n  let yBinQty = Math.round((maxYBin - minYBin) / yBinIncr) + 1;\n\n  let [xs2, ys2, counts] = initBins(xBinQty, yBinQty, minXBin, xBinIncr, minYBin, yBinIncr, yExp);\n\n  for (let i = 0; i < len; i++) {\n    if (yExp && ys[i] <= 0) {\n      continue;\n    }\n\n    const xi = (binX(xs[i]) - minXBin) / xBinIncr;\n    const yi = (binY(ys[i]) - minYBin) / yBinIncr;\n    const ci = xi * yBinQty + yi;\n\n    counts[ci]++;\n  }\n\n  return {\n    x: xs2,\n    y: ys2,\n    count: counts,\n  };\n}\n\nfunction initBins(xQty: number, yQty: number, xMin: number, xIncr: number, yMin: number, yIncr: number, yExp?: number) {\n  const len = xQty * yQty;\n  const xs = new Array<number>(len);\n  const ys = new Array<number>(len);\n  const counts = new Array<number>(len);\n\n  for (let i = 0, yi = 0, x = xMin; i < len; yi = ++i % yQty) {\n    counts[i] = 0;\n\n    if (yExp) {\n      ys[i] = yExp ** (yMin + yi * yIncr);\n    } else {\n      ys[i] = yMin + yi * yIncr;\n    }\n\n    if (yi === 0 && i >= yQty) {\n      x += xIncr;\n    }\n\n    xs[i] = x;\n  }\n\n  return [xs, ys, counts];\n}\n","import { guessDecimals, roundDecimals } from '@grafana/data';\n\nconst { abs, pow } = Math;\n\nexport const fixedDec = new Map();\n\nexport function genIncrs(base: number, minExp: number, maxExp: number, mults: number[]) {\n  let incrs = [];\n\n  let multDec = mults.map(guessDecimals);\n\n  for (let exp = minExp; exp < maxExp; exp++) {\n    let expa = abs(exp);\n    let mag = roundDecimals(pow(base, exp), expa);\n\n    for (let i = 0; i < mults.length; i++) {\n      let _incr = mults[i] * mag;\n      let dec = (_incr >= 0 && exp >= 0 ? 0 : expa) + (exp >= multDec[i] ? 0 : multDec[i]);\n      let incr = roundDecimals(_incr, dec);\n      incrs.push(incr);\n      fixedDec.set(incr, dec);\n    }\n  }\n\n  return incrs;\n}\n\nconst onlyWhole = (v: number) => v % 1 === 0;\n\nconst allMults = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5];\n\n// ...0.01, 0.02, 0.025, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5...\nexport const decIncrs = genIncrs(10, -16, 0, allMults);\n\n// 1, 2, 2.5, 3, 4, 5, 6, 7, 8, 9, 10, 20, 25, 30, 40, 50...\nexport const oneIncrs = genIncrs(10, 0, 16, allMults);\n\n// 1, 2,      3, 4, 5, 10, 20, 25, 50...\nexport const wholeIncrs = oneIncrs.filter(onlyWhole);\n\nexport const numIncrs = decIncrs.concat(oneIncrs);\n\nexport const niceLinearIncrs = decIncrs.concat(wholeIncrs);\n\nconst sec = 1 * 1e3;\nconst min = 60 * sec;\nconst hour = 60 * min;\nconst day = 24 * hour;\nconst year = 365 * day;\n\n// in milliseconds\nexport const niceTimeIncrs = [\n  1,\n  2,\n  4,\n  5,\n  10,\n  20,\n  25,\n  40,\n  50,\n  100,\n  200,\n  250,\n  400,\n  500,\n\n  sec,\n  2 * sec,\n  4 * sec,\n  5 * sec,\n  10 * sec,\n  15 * sec,\n  20 * sec,\n  30 * sec,\n\n  min,\n  2 * min,\n  4 * min,\n  5 * min,\n  10 * min,\n  15 * min,\n  20 * min,\n  30 * min,\n\n  hour,\n  2 * hour,\n  4 * hour,\n  6 * hour,\n  8 * hour,\n  12 * hour,\n  18 * hour,\n\n  day,\n  2 * day,\n  3 * day,\n  4 * day,\n  5 * day,\n  6 * day,\n  7 * day,\n  10 * day,\n  15 * day,\n  30 * day,\n  45 * day,\n  60 * day,\n  90 * day,\n  180 * day,\n\n  year,\n  2 * year,\n  3 * year,\n  4 * year,\n  5 * year,\n  6 * year,\n  7 * year,\n  8 * year,\n  9 * year,\n  10 * year,\n];\n","import { css } from '@emotion/css';\nimport { autoUpdate, flip, shift, useFloating } from '@floating-ui/react';\nimport React, { FormEvent, useCallback, useEffect, useRef, useState } from 'react';\n\nimport { GrafanaTheme2, VariableSuggestion } from '@grafana/data';\nimport { CustomScrollbar, FieldValidationMessage, Input, Portal, useTheme2 } from '@grafana/ui';\nimport { DataLinkSuggestions } from '@grafana/ui/src/components/DataLinks/DataLinkSuggestions';\n\nconst modulo = (a: number, n: number) => a - n * Math.floor(a / n);\nconst ERROR_TOOLTIP_OFFSET = 8;\n\ninterface SuggestionsInputProps {\n  value?: string | number;\n  onChange: (url: string, callback?: () => void) => void;\n  suggestions: VariableSuggestion[];\n  placeholder?: string;\n  invalid?: boolean;\n  error?: string;\n  width?: number;\n}\n\nconst getStyles = (theme: GrafanaTheme2, inputHeight: number) => {\n  return {\n    suggestionsWrapper: css({\n      boxShadow: theme.shadows.z2,\n    }),\n    errorTooltip: css({\n      position: 'absolute',\n      top: inputHeight + ERROR_TOOLTIP_OFFSET + 'px',\n      zIndex: theme.zIndex.tooltip,\n    }),\n    inputWrapper: css({\n      position: 'relative',\n    }),\n    // Wrapper with child selector needed.\n    // When classnames are applied to the same element as the wrapper, it causes the suggestions to stop working\n  };\n};\n\nexport const SuggestionsInput = ({\n  value = '',\n  onChange,\n  suggestions,\n  placeholder,\n  error,\n  invalid,\n}: SuggestionsInputProps) => {\n  const [showingSuggestions, setShowingSuggestions] = useState(false);\n  const [suggestionsIndex, setSuggestionsIndex] = useState(0);\n  const [variableValue, setVariableValue] = useState<string>(value.toString());\n  const [scrollTop, setScrollTop] = useState(0);\n  const [inputHeight, setInputHeight] = useState<number>(0);\n  const [startPos, setStartPos] = useState<number>(0);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, inputHeight);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  // the order of middleware is important!\n  const middleware = [\n    flip({\n      fallbackAxisSideDirection: 'start',\n      // see https://floating-ui.com/docs/flip#combining-with-shift\n      crossAxis: false,\n      boundary: document.body,\n    }),\n    shift(),\n  ];\n\n  const { refs, floatingStyles } = useFloating({\n    open: showingSuggestions,\n    placement: 'bottom-start',\n    onOpenChange: setShowingSuggestions,\n    middleware,\n    whileElementsMounted: autoUpdate,\n    strategy: 'fixed',\n  });\n\n  const handleRef = useCallback(\n    (ref: HTMLInputElement) => {\n      refs.setReference(ref);\n\n      inputRef.current = ref;\n    },\n    [refs]\n  );\n\n  // Used to get the height of the suggestion elements in order to scroll to them.\n  const activeRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    setScrollTop(getElementPosition(activeRef.current, suggestionsIndex));\n  }, [suggestionsIndex]);\n\n  const onVariableSelect = React.useCallback(\n    (item: VariableSuggestion, input = inputRef.current!) => {\n      const curPos = input.selectionStart!;\n      const x = input.value;\n\n      if (x[startPos - 1] === '$') {\n        input.value = x.slice(0, startPos) + item.value + x.slice(curPos);\n      } else {\n        input.value = x.slice(0, startPos) + '$' + item.value + x.slice(curPos);\n      }\n\n      setVariableValue(input.value);\n      setShowingSuggestions(false);\n\n      setSuggestionsIndex(0);\n      onChange(input.value);\n    },\n    [onChange, startPos]\n  );\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      if (!showingSuggestions) {\n        if (event.key === '$' || (event.key === ' ' && event.ctrlKey)) {\n          setStartPos(inputRef.current!.selectionStart || 0);\n          setShowingSuggestions(true);\n          return;\n        }\n        return;\n      }\n\n      switch (event.key) {\n        case 'Backspace':\n        case 'Escape':\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          setShowingSuggestions(false);\n          return setSuggestionsIndex(0);\n\n        case 'Enter':\n          event.preventDefault();\n          return onVariableSelect(suggestions[suggestionsIndex]);\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault();\n          const direction = event.key === 'ArrowDown' ? 1 : -1;\n          return setSuggestionsIndex((index) => modulo(index + direction, suggestions.length));\n        default:\n          return;\n      }\n    },\n    [showingSuggestions, suggestions, suggestionsIndex, onVariableSelect]\n  );\n\n  const onValueChanged = React.useCallback((event: FormEvent<HTMLInputElement>) => {\n    setVariableValue(event.currentTarget.value);\n  }, []);\n\n  const onBlur = React.useCallback(\n    (event: FormEvent<HTMLInputElement>) => {\n      onChange(event.currentTarget.value);\n    },\n    [onChange]\n  );\n\n  useEffect(() => {\n    setInputHeight(inputRef.current!.clientHeight);\n  }, []);\n\n  return (\n    <div className={styles.inputWrapper}>\n      {showingSuggestions && (\n        <Portal>\n          <div ref={refs.setFloating} style={floatingStyles} className={styles.suggestionsWrapper}>\n            <CustomScrollbar\n              scrollTop={scrollTop}\n              autoHeightMax=\"300px\"\n              setScrollTop={({ scrollTop }) => setScrollTop(scrollTop)}\n            >\n              {/* This suggestion component has a specialized name,\n                    but is rather generalistic in implementation,\n                    so we're using it in transformations also.\n                    We should probably rename this to something more general. */}\n              <DataLinkSuggestions\n                activeRef={activeRef}\n                suggestions={suggestions}\n                onSuggestionSelect={onVariableSelect}\n                onClose={() => setShowingSuggestions(false)}\n                activeIndex={suggestionsIndex}\n              />\n            </CustomScrollbar>\n          </div>\n        </Portal>\n      )}\n      {invalid && error && (\n        <div className={styles.errorTooltip}>\n          <FieldValidationMessage>{error}</FieldValidationMessage>\n        </div>\n      )}\n      <Input\n        placeholder={placeholder}\n        invalid={invalid}\n        ref={handleRef}\n        value={variableValue}\n        onChange={onValueChanged}\n        onBlur={onBlur}\n        onKeyDown={onKeyDown}\n      />\n    </div>\n  );\n};\n\nSuggestionsInput.displayName = 'SuggestionsInput';\n\nfunction getElementPosition(suggestionElement: HTMLElement | null, activeIndex: number) {\n  return (suggestionElement?.clientHeight ?? 0) * activeIndex;\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo, useRef, useState } from 'react';\n\nimport { DashboardCursorSync, PanelProps, TimeRange } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { ScaleDistributionConfig } from '@grafana/schema';\nimport {\n  ScaleDistribution,\n  TooltipPlugin2,\n  TooltipDisplayMode,\n  UPlotChart,\n  usePanelContext,\n  useStyles2,\n  useTheme2,\n  VizLayout,\n  EventBusPlugin,\n} from '@grafana/ui';\nimport { TimeRange2, TooltipHoverMode } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin2';\nimport { ColorScale } from '../../../core/components/ColorScale/ColorScale';\nimport { readHeatmapRowsCustomMeta } from '../../../features/transformers/calculateHeatmap/heatmap';\n\nimport { AnnotationsPlugin2 } from '../timeseries/plugins/AnnotationsPlugin2';\nimport { OutsideRangePlugin } from '../timeseries/plugins/OutsideRangePlugin';\n\nimport { HeatmapTooltip } from './HeatmapTooltip';\nimport { prepareHeatmapData } from './fields';\nimport { quantizeScheme } from './palettes';\nimport { Options } from './types';\nimport { prepConfig } from './utils';\n\ninterface HeatmapPanelProps extends PanelProps<Options> {}\n\nexport const HeatmapPanel = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  eventBus,\n  onChangeTimeRange,\n  replaceVariables,\n}: HeatmapPanelProps) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { sync, eventsScope, canAddAnnotations, onSelectRange } = usePanelContext();\n  const cursorSync = sync?.() ?? DashboardCursorSync.Off;\n\n  // temp range set for adding new annotation set by TooltipPlugin2, consumed by AnnotationPlugin2\n  const [newAnnotationRange, setNewAnnotationRange] = useState<TimeRange2 | null>(null);\n\n  // ugh\n  let timeRangeRef = useRef<TimeRange>(timeRange);\n  timeRangeRef.current = timeRange;\n\n  const palette = useMemo(() => quantizeScheme(options.color, theme), [options.color, theme]);\n\n  const info = useMemo(() => {\n    try {\n      return prepareHeatmapData(data.series, data.annotations, options, palette, theme, replaceVariables);\n    } catch (ex) {\n      return { warning: `${ex}` };\n    }\n  }, [data.series, data.annotations, options, palette, theme, replaceVariables]);\n\n  const facets = useMemo(() => {\n    let exemplarsXFacet: number[] | undefined = []; // \"Time\" field\n    let exemplarsYFacet: Array<number | undefined> = [];\n\n    const meta = readHeatmapRowsCustomMeta(info.heatmap);\n\n    if (info.exemplars?.length) {\n      exemplarsXFacet = info.exemplars?.fields[0].values;\n\n      // render by match on ordinal y label\n      if (meta.yMatchWithLabel) {\n        // ordinal/labeled heatmap-buckets?\n        const hasLabeledY = meta.yOrdinalDisplay != null;\n\n        if (hasLabeledY) {\n          let matchExemplarsBy = info.exemplars?.fields.find((field) => field.name === meta.yMatchWithLabel)!.values;\n          exemplarsYFacet = matchExemplarsBy.map((label) => meta.yOrdinalLabel?.indexOf(label));\n        } else {\n          exemplarsYFacet = info.exemplars?.fields[1].values; // \"Value\" field\n        }\n      }\n      // render by raw value\n      else {\n        exemplarsYFacet = info.exemplars?.fields[1].values; // \"Value\" field\n      }\n    }\n\n    return [null, info.heatmap?.fields.map((f) => f.values), [exemplarsXFacet, exemplarsYFacet]];\n  }, [info.heatmap, info.exemplars]);\n\n  // ugh\n  const dataRef = useRef(info);\n  dataRef.current = info;\n\n  const builder = useMemo(() => {\n    const scaleConfig: ScaleDistributionConfig = dataRef.current?.heatmap?.fields[1].config?.custom?.scaleDistribution;\n\n    return prepConfig({\n      dataRef,\n      theme,\n      timeZone,\n      getTimeRange: () => timeRangeRef.current,\n      cellGap: options.cellGap,\n      hideLE: options.filterValues?.le,\n      hideGE: options.filterValues?.ge,\n      exemplarColor: options.exemplars?.color ?? 'rgba(255,0,255,0.7)',\n      yAxisConfig: options.yAxis,\n      ySizeDivisor: scaleConfig?.type === ScaleDistribution.Log ? +(options.calculation?.yBuckets?.value || 1) : 1,\n      selectionMode: options.selectionMode,\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, timeZone, data.structureRev, cursorSync]);\n\n  const renderLegend = () => {\n    if (!info.heatmap || !options.legend.show) {\n      return null;\n    }\n\n    let hoverValue: number | undefined = undefined;\n\n    // let heatmapType = dataRef.current?.heatmap?.meta?.type;\n    // let isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n    // let countFieldIdx = !isSparseHeatmap ? 2 : 3;\n    // const countField = info.heatmap.fields[countFieldIdx];\n\n    // seriesIdx: 1 is heatmap layer; 2 is exemplar layer\n    // if (hover && info.heatmap.fields && hover.seriesIdx === 1) {\n    //   hoverValue = countField.values[hover.dataIdx];\n    // }\n\n    return (\n      <VizLayout.Legend placement=\"bottom\" maxHeight=\"20%\">\n        <div className={styles.colorScaleWrapper}>\n          <ColorScale\n            hoverValue={hoverValue}\n            colorPalette={palette}\n            min={dataRef.current.heatmapColors?.minValue!}\n            max={dataRef.current.heatmapColors?.maxValue!}\n            display={info.display}\n          />\n        </div>\n      </VizLayout.Legend>\n    );\n  };\n\n  if (info.warning || !info.heatmap) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        needsNumberField={true}\n        message={info.warning}\n      />\n    );\n  }\n\n  const enableAnnotationCreation = Boolean(canAddAnnotations && canAddAnnotations());\n\n  return (\n    <>\n      <VizLayout width={width} height={height} legend={renderLegend()}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart key={builder.uid} config={builder} data={facets as any} width={vizWidth} height={vizHeight}>\n            {cursorSync !== DashboardCursorSync.Off && (\n              <EventBusPlugin config={builder} eventBus={eventBus} frame={info.series ?? info.heatmap} />\n            )}\n            {options.tooltip.mode !== TooltipDisplayMode.None && (\n              <TooltipPlugin2\n                config={builder}\n                hoverMode={\n                  options.tooltip.mode === TooltipDisplayMode.Single ? TooltipHoverMode.xOne : TooltipHoverMode.xAll\n                }\n                queryZoom={onChangeTimeRange}\n                onSelectRange={onSelectRange}\n                syncMode={cursorSync}\n                syncScope={eventsScope}\n                render={(u, dataIdxs, seriesIdx, isPinned, dismiss, timeRange2, viaSync) => {\n                  if (enableAnnotationCreation && timeRange2 != null) {\n                    setNewAnnotationRange(timeRange2);\n                    dismiss();\n                    return;\n                  }\n\n                  const annotate = () => {\n                    let xVal = u.posToVal(u.cursor.left!, 'x');\n\n                    setNewAnnotationRange({ from: xVal, to: xVal });\n                    dismiss();\n                  };\n\n                  return (\n                    <HeatmapTooltip\n                      mode={viaSync ? TooltipDisplayMode.Multi : options.tooltip.mode}\n                      dataIdxs={dataIdxs}\n                      seriesIdx={seriesIdx}\n                      dataRef={dataRef}\n                      isPinned={isPinned}\n                      dismiss={dismiss}\n                      showHistogram={options.tooltip.yHistogram}\n                      showColorScale={options.tooltip.showColorScale}\n                      panelData={data}\n                      annotate={enableAnnotationCreation ? annotate : undefined}\n                      maxHeight={options.tooltip.maxHeight}\n                      maxWidth={options.tooltip.maxWidth}\n                    />\n                  );\n                }}\n                maxWidth={options.tooltip.maxWidth}\n              />\n            )}\n            <AnnotationsPlugin2\n              annotations={data.annotations ?? []}\n              config={builder}\n              timeZone={timeZone}\n              newRange={newAnnotationRange}\n              setNewRange={setNewAnnotationRange}\n              canvasRegionRendering={false}\n            />\n            <OutsideRangePlugin config={builder} onChangeTimeRange={onChangeTimeRange} />\n          </UPlotChart>\n        )}\n      </VizLayout>\n    </>\n  );\n};\n\nconst getStyles = () => ({\n  colorScaleWrapper: css({\n    marginLeft: '25px',\n    padding: '10px 0',\n    maxWidth: '300px',\n  }),\n});\n","import React, { ReactElement, useEffect, useRef, useState, ReactNode } from 'react';\nimport uPlot from 'uplot';\n\nimport {\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getFieldDisplayName,\n  LinkModel,\n  PanelData,\n} from '@grafana/data';\nimport { HeatmapCellLayout } from '@grafana/schema';\nimport { TooltipDisplayMode, useStyles2, useTheme2 } from '@grafana/ui';\nimport { VizTooltipContent } from '@grafana/ui/src/components/VizTooltip/VizTooltipContent';\nimport { VizTooltipFooter } from '@grafana/ui/src/components/VizTooltip/VizTooltipFooter';\nimport { VizTooltipHeader } from '@grafana/ui/src/components/VizTooltip/VizTooltipHeader';\nimport { ColorIndicator, ColorPlacement, VizTooltipItem } from '@grafana/ui/src/components/VizTooltip/types';\nimport { ColorScale } from '../../../core/components/ColorScale/ColorScale';\nimport { getDashboardSrv } from '../../../features/dashboard/services/DashboardSrv';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from '../../../features/transformers/calculateHeatmap/heatmap';\nimport { DataHoverView } from '../../../features/visualization/data-hover/DataHoverView';\n\nimport { getDataLinks } from '../status-history/utils';\nimport { getStyles } from '../timeseries/TimeSeriesTooltip';\nimport { isTooltipScrollable } from '../timeseries/utils';\n\nimport { HeatmapData } from './fields';\nimport { renderHistogram } from './renderHistogram';\nimport { formatMilliseconds, getFieldFromData, getHoverCellColor, getSparseCellMinMax } from './tooltip/utils';\n\ninterface HeatmapTooltipProps {\n  mode: TooltipDisplayMode;\n  dataIdxs: Array<number | null>;\n  seriesIdx: number | null | undefined;\n  dataRef: React.MutableRefObject<HeatmapData>;\n  showHistogram?: boolean;\n  showColorScale?: boolean;\n  isPinned: boolean;\n  dismiss: () => void;\n  panelData: PanelData;\n  annotate?: () => void;\n  maxHeight?: number;\n  maxWidth?: number;\n}\n\nexport const HeatmapTooltip = (props: HeatmapTooltipProps) => {\n  if (props.seriesIdx === 2) {\n    return (\n      <DataHoverView\n        data={props.dataRef.current!.exemplars}\n        rowIndex={props.dataIdxs[2]}\n        header={'Exemplar'}\n        padding={8}\n      />\n    );\n  }\n\n  return <HeatmapHoverCell {...props} />;\n};\n\nconst defaultHistogramWidth = 264;\nconst defaultHistogramHeight = 64;\n\nconst HeatmapHoverCell = ({\n  dataIdxs,\n  dataRef,\n  showHistogram,\n  isPinned,\n  showColorScale = false,\n  mode,\n  annotate,\n  maxHeight,\n  maxWidth,\n}: HeatmapTooltipProps) => {\n  const index = dataIdxs[1]!;\n  const data = dataRef.current;\n\n  const [isSparse] = useState(\n    () => data.heatmap?.meta?.type === DataFrameType.HeatmapCells && !isHeatmapCellsDense(data.heatmap)\n  );\n\n  const xField = getFieldFromData(data.heatmap!, 'x', isSparse)!;\n  const yField = getFieldFromData(data.heatmap!, 'y', isSparse)!;\n  const countField = getFieldFromData(data.heatmap!, 'count', isSparse)!;\n\n  const xDisp = (v: number) => {\n    if (xField?.display) {\n      return formattedValueToString(xField.display(v));\n    }\n    if (xField?.type === FieldType.time) {\n      const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n      const dashboard = getDashboardSrv().getCurrent();\n      return dashboard?.formatDate(v, tooltipTimeFormat);\n    }\n    return `${v}`;\n  };\n\n  const xVals = xField.values;\n  const yVals = yField.values;\n  const countVals = countField.values;\n\n  // labeled buckets\n  const meta = readHeatmapRowsCustomMeta(data.heatmap);\n  const yDisp = yField?.display ? (v: string) => formattedValueToString(yField.display!(v)) : (v: string) => `${v}`;\n\n  let interval = xField?.config.interval;\n\n  let yBucketMin: string;\n  let yBucketMax: string;\n\n  let xBucketMin: number;\n  let xBucketMax: number;\n\n  let nonNumericOrdinalDisplay: string | undefined = undefined;\n\n  let contentItems: VizTooltipItem[] = [];\n\n  const getYValueIndex = (idx: number) => {\n    return idx % (data.yBucketCount ?? 1);\n  };\n\n  let yValueIdx = getYValueIndex(index);\n  const xValueIdx = Math.floor(index / (data.yBucketCount ?? 1));\n\n  const getData = (idx: number = index) => {\n    if (meta.yOrdinalDisplay) {\n      const yMinIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx - 1 : yValueIdx;\n      const yMaxIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx : yValueIdx + 1;\n      yBucketMin = yMinIdx < 0 ? meta.yMinDisplay! : `${meta.yOrdinalDisplay[yMinIdx]}`;\n      yBucketMax = `${meta.yOrdinalDisplay[yMaxIdx]}`;\n\n      // e.g. \"pod-xyz123\"\n      if (!meta.yOrdinalLabel || Number.isNaN(+meta.yOrdinalLabel[0])) {\n        nonNumericOrdinalDisplay = data.yLayout === HeatmapCellLayout.le ? yBucketMax : yBucketMin;\n      }\n    } else {\n      const value = yVals?.[yValueIdx];\n\n      if (data.yLayout === HeatmapCellLayout.le) {\n        yBucketMax = `${value}`;\n\n        if (data.yLog) {\n          let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n          let exp = logFn(value) - 1 / data.yLogSplit!;\n          yBucketMin = `${data.yLog ** exp}`;\n        } else {\n          yBucketMin = `${value - data.yBucketSize!}`;\n        }\n      } else {\n        yBucketMin = `${value}`;\n\n        if (data.yLog) {\n          let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n          let exp = logFn(value) + 1 / data.yLogSplit!;\n          yBucketMax = `${data.yLog ** exp}`;\n        } else {\n          yBucketMax = `${value + data.yBucketSize!}`;\n        }\n      }\n    }\n\n    if (data.xLayout === HeatmapCellLayout.le) {\n      xBucketMax = xVals[idx];\n      xBucketMin = xBucketMax - data.xBucketSize!;\n    } else {\n      xBucketMin = xVals[idx];\n      xBucketMax = xBucketMin + data.xBucketSize!;\n    }\n  };\n\n  if (isSparse) {\n    ({ xBucketMin, xBucketMax, yBucketMin, yBucketMax } = getSparseCellMinMax(data!, index));\n  } else {\n    getData();\n  }\n\n  const { cellColor, colorPalette } = getHoverCellColor(data, index);\n\n  const getDisplayData = (fromIdx: number, toIdx: number) => {\n    let vals = [];\n    for (let idx = fromIdx; idx <= toIdx; idx++) {\n      if (!countVals?.[idx]) {\n        continue;\n      }\n\n      const color = getHoverCellColor(data, idx).cellColor;\n      count = getCountValue(idx);\n\n      if (isSparse) {\n        ({ xBucketMin, xBucketMax, yBucketMin, yBucketMax } = getSparseCellMinMax(data!, idx));\n      } else {\n        yValueIdx = getYValueIndex(idx);\n        getData(idx);\n      }\n\n      const { label, value } = getContentLabels()[0];\n\n      vals.push({\n        label,\n        value,\n        color: color ?? '#FFF',\n        isActive: index === idx,\n      });\n    }\n\n    return vals;\n  };\n\n  const getContentLabels = (): VizTooltipItem[] => {\n    const isMulti = mode === TooltipDisplayMode.Multi && !isPinned;\n\n    if (nonNumericOrdinalDisplay) {\n      return isMulti\n        ? [{ label: `Name ${nonNumericOrdinalDisplay}`, value: data.display!(count) }]\n        : [{ label: 'Name', value: nonNumericOrdinalDisplay }];\n    }\n\n    switch (data.yLayout) {\n      case HeatmapCellLayout.unknown:\n        return isMulti\n          ? [{ label: yDisp(yBucketMin), value: data.display!(count) }]\n          : [{ label: '', value: yDisp(yBucketMin) }];\n    }\n\n    return isMulti\n      ? [\n          {\n            label: `Bucket ${yDisp(yBucketMin)}` + '-' + `${yDisp(yBucketMax)}`,\n            value: data.display!(count),\n          },\n        ]\n      : [\n          {\n            label: 'Bucket',\n            value: `${yDisp(yBucketMin)}` + '-' + `${yDisp(yBucketMax)}`,\n          },\n        ];\n  };\n\n  const getCountValue = (idx: number) => {\n    return countVals?.[idx];\n  };\n\n  let count = getCountValue(index);\n\n  if (mode === TooltipDisplayMode.Single || isPinned) {\n    const fromToInt: VizTooltipItem[] = interval ? [{ label: 'Duration', value: formatMilliseconds(interval) }] : [];\n\n    contentItems = [\n      {\n        label: getFieldDisplayName(countField, data.heatmap),\n        value: data.display!(count),\n        color: cellColor ?? '#FFF',\n        colorPlacement: ColorPlacement.trailing,\n        colorIndicator: ColorIndicator.value,\n      },\n      ...getContentLabels(),\n      ...fromToInt,\n    ];\n  }\n\n  if (mode === TooltipDisplayMode.Multi && !isPinned) {\n    let xVal = xField.values[index];\n    let fromIdx = index;\n    let toIdx = index;\n\n    while (xField.values[fromIdx - 1] === xVal) {\n      fromIdx--;\n    }\n\n    while (xField.values[toIdx + 1] === xVal) {\n      toIdx++;\n    }\n\n    const vals: VizTooltipItem[] = getDisplayData(fromIdx, toIdx);\n    vals.forEach((val) => {\n      contentItems.push({\n        label: val.label,\n        value: val.value,\n        color: val.color ?? '#FFF',\n        colorIndicator: ColorIndicator.value,\n        colorPlacement: ColorPlacement.trailing,\n        isActive: val.isActive,\n      });\n    });\n  }\n\n  let footer: ReactNode;\n\n  if (isPinned) {\n    let links: Array<LinkModel<Field>> = [];\n\n    const linksField = data.series?.fields[yValueIdx + 1];\n\n    if (linksField != null) {\n      const visible = !Boolean(linksField.config.custom?.hideFrom?.tooltip);\n      const hasLinks = (linksField.config.links?.length ?? 0) > 0;\n\n      if (visible && hasLinks) {\n        links = getDataLinks(linksField, xValueIdx);\n      }\n    }\n\n    footer = <VizTooltipFooter dataLinks={links} annotate={annotate} />;\n  }\n\n  let can = useRef<HTMLCanvasElement>(null);\n\n  const theme = useTheme2();\n  const themeSpacing = parseInt(theme.spacing(1), 10);\n\n  let histCssWidth = Math.min(defaultHistogramWidth, maxWidth ? maxWidth - themeSpacing * 2 : defaultHistogramWidth);\n  let histCssHeight = defaultHistogramHeight;\n  let histCanWidth = Math.round(histCssWidth * uPlot.pxRatio);\n  let histCanHeight = Math.round(histCssHeight * uPlot.pxRatio);\n\n  useEffect(\n    () => {\n      if (showHistogram && xVals != null && countVals != null && mode === TooltipDisplayMode.Single) {\n        renderHistogram(can, histCanWidth, histCanHeight, xVals, countVals, index, data.yBucketCount!);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [index]\n  );\n\n  const headerItem: VizTooltipItem = {\n    label: '',\n    value: xDisp(xBucketMax!)!,\n  };\n\n  let customContent: ReactElement[] = [];\n\n  if (mode === TooltipDisplayMode.Single) {\n    // Histogram\n    if (showHistogram && !isSparse) {\n      customContent.push(\n        <canvas\n          width={histCanWidth}\n          height={histCanHeight}\n          ref={can}\n          style={{ width: histCssWidth + 'px', height: histCssHeight + 'px' }}\n        />\n      );\n    }\n\n    // Color scale\n    if (colorPalette && showColorScale) {\n      customContent.push(\n        <ColorScale\n          colorPalette={colorPalette}\n          min={data.heatmapColors?.minValue!}\n          max={data.heatmapColors?.maxValue!}\n          display={data.display}\n          hoverValue={count}\n        />\n      );\n    }\n  }\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <VizTooltipHeader item={headerItem} isPinned={isPinned} />\n      <VizTooltipContent\n        items={contentItems}\n        isPinned={isPinned}\n        scrollable={isTooltipScrollable({ mode, maxHeight })}\n        maxHeight={maxHeight}\n      >\n        {customContent?.map((content, i) => (\n          <div key={i} style={{ padding: `${theme.spacing(1)} 0` }}>\n            {content}\n          </div>\n        ))}\n      </VizTooltipContent>\n      {footer}\n    </div>\n  );\n};\n","import {\n  cacheFieldDisplayNames,\n  DataFrame,\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  getLinksSupplier,\n  GrafanaTheme2,\n  InterpolateFunction,\n  outerJoinDataFrames,\n  ValueFormatter,\n} from '@grafana/data';\nimport { parseSampleValue, sortSeriesByLabel } from '@grafana/prometheus';\nimport { config } from '@grafana/runtime';\nimport { HeatmapCellLayout } from '@grafana/schema';\nimport {\n  calculateHeatmapFromData,\n  isHeatmapCellsDense,\n  readHeatmapRowsCustomMeta,\n  rowsToCellsHeatmap,\n} from '../../../features/transformers/calculateHeatmap/heatmap';\n\nimport { CellValues, Options } from './types';\nimport { boundedMinMax, valuesToFills } from './utils';\n\nexport interface HeatmapData {\n  heatmap?: DataFrame; // data we will render\n  heatmapColors?: {\n    // quantized palette\n    palette: string[];\n    // indices into palette\n    values: number[];\n\n    // color scale range\n    minValue: number;\n    maxValue: number;\n  };\n\n  series?: DataFrame; // the joined single frame for nonNumericOrdinalY data links\n\n  exemplars?: DataFrame; // optionally linked exemplars\n  exemplarColor?: string;\n\n  xBucketSize?: number;\n  yBucketSize?: number;\n\n  xBucketCount?: number;\n  yBucketCount?: number;\n\n  xLayout?: HeatmapCellLayout;\n  yLayout?: HeatmapCellLayout;\n\n  xLog?: number;\n  yLog?: number;\n\n  xLogSplit?: number;\n  yLogSplit?: number;\n\n  // Print a heatmap cell value\n  display?: (v: number) => string;\n\n  // Errors\n  warning?: string;\n}\n\nexport function prepareHeatmapData(\n  frames: DataFrame[],\n  annotations: DataFrame[] | undefined,\n  options: Options,\n  palette: string[],\n  theme: GrafanaTheme2,\n  replaceVariables: InterpolateFunction = (v) => v\n): HeatmapData {\n  if (!frames?.length) {\n    return {};\n  }\n\n  cacheFieldDisplayNames(frames);\n\n  const exemplars = annotations?.find((f) => f.name === 'exemplar');\n\n  exemplars?.fields.forEach((field) => {\n    field.getLinks = getLinksSupplier(exemplars, field, field.state?.scopedVars ?? {}, replaceVariables);\n  });\n\n  if (options.calculate) {\n    if (config.featureToggles.transformationsVariableSupport) {\n      const optionsCopy = {\n        ...options,\n        calculation: {\n          xBuckets: { ...options.calculation?.xBuckets } ?? undefined,\n          yBuckets: { ...options.calculation?.yBuckets } ?? undefined,\n        },\n      };\n\n      if (optionsCopy.calculation?.xBuckets?.value && replaceVariables !== undefined) {\n        optionsCopy.calculation.xBuckets.value = replaceVariables(optionsCopy.calculation.xBuckets.value);\n      }\n\n      if (optionsCopy.calculation?.yBuckets?.value && replaceVariables !== undefined) {\n        optionsCopy.calculation.yBuckets.value = replaceVariables(optionsCopy.calculation.yBuckets.value);\n      }\n\n      return getDenseHeatmapData(\n        calculateHeatmapFromData(frames, optionsCopy.calculation ?? {}),\n        exemplars,\n        optionsCopy,\n        palette,\n        theme\n      );\n    }\n\n    return getDenseHeatmapData(\n      calculateHeatmapFromData(frames, options.calculation ?? {}),\n      exemplars,\n      options,\n      palette,\n      theme\n    );\n  }\n\n  // Check for known heatmap types\n  let rowsHeatmap: DataFrame | undefined = undefined;\n  for (const frame of frames) {\n    switch (frame.meta?.type) {\n      case DataFrameType.HeatmapCells:\n        return isHeatmapCellsDense(frame)\n          ? getDenseHeatmapData(frame, exemplars, options, palette, theme)\n          : getSparseHeatmapData(frame, exemplars, options, palette, theme);\n\n      case DataFrameType.HeatmapRows:\n        rowsHeatmap = frame; // the default format\n    }\n  }\n\n  // Everything past here assumes a field for each row in the heatmap (buckets)\n  if (rowsHeatmap == null) {\n    if (frames.length > 1) {\n      let allNamesNumeric = frames.every(\n        (frame) => !Number.isNaN(parseSampleValue(frame.fields[1].state?.displayName!))\n      );\n\n      if (allNamesNumeric) {\n        frames.sort(sortSeriesByLabel);\n      }\n\n      rowsHeatmap = outerJoinDataFrames({\n        frames,\n        keepDisplayNames: true,\n      })!;\n    } else {\n      let frame = frames[0];\n      let numberFields = frame.fields.filter((field) => field.type === FieldType.number);\n      let allNamesNumeric = numberFields.every((field) => !Number.isNaN(parseSampleValue(field.state?.displayName!)));\n\n      if (allNamesNumeric) {\n        numberFields.sort((a, b) => parseSampleValue(a.state?.displayName!) - parseSampleValue(b.state?.displayName!));\n\n        rowsHeatmap = {\n          ...frame,\n          fields: [frame.fields.find((f) => f.type === FieldType.time)!, ...numberFields],\n        };\n      } else {\n        rowsHeatmap = frame;\n      }\n    }\n  }\n\n  // config data links\n  rowsHeatmap.fields.forEach((field) => {\n    if ((field.config.links?.length ?? 0) === 0) {\n      return;\n    }\n\n    // this expects that the tooltip is able to identify the field and rowIndex from a dense hovered index\n    field.getLinks = getLinksSupplier(rowsHeatmap!, field, field.state?.scopedVars ?? {}, replaceVariables);\n  });\n\n  return {\n    ...getDenseHeatmapData(\n      rowsToCellsHeatmap({\n        unit: options.yAxis?.unit, // used to format the ordinal lookup values\n        decimals: options.yAxis?.decimals,\n        ...options.rowsFrame,\n        frame: rowsHeatmap,\n      }),\n      exemplars,\n      options,\n      palette,\n      theme\n    ),\n    series: rowsHeatmap,\n  };\n}\n\nconst getSparseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: Options,\n  palette: string[],\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells || isHeatmapCellsDense(frame)) {\n    return {\n      warning: 'Expected sparse heatmap format',\n      heatmap: frame,\n    };\n  }\n\n  // y axis tick label display\n  updateFieldDisplay(frame.fields[1], options.yAxis, theme);\n\n  const valueField = frame.fields[3];\n\n  // cell value display\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n\n  let [minValue, maxValue] = boundedMinMax(\n    valueField.values,\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  return {\n    heatmap: frame,\n    heatmapColors: {\n      palette,\n      values: valuesToFills(valueField.values, palette, minValue, maxValue),\n      minValue,\n      maxValue,\n    },\n    exemplars,\n    display: (v) => formattedValueToString(disp(v)),\n  };\n};\n\nconst getDenseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: Options,\n  palette: string[],\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells) {\n    return {\n      warning: 'Expected heatmap scanlines format',\n      heatmap: frame,\n    };\n  }\n\n  if (frame.fields.length < 2 || frame.length < 2) {\n    return { heatmap: frame };\n  }\n\n  const meta = readHeatmapRowsCustomMeta(frame);\n  let xName: string | undefined = undefined;\n  let yName: string | undefined = undefined;\n  let valueField: Field | undefined = undefined;\n\n  // validate field display properties\n  for (const field of frame.fields) {\n    switch (field.name) {\n      case 'y':\n        yName = field.name;\n\n      case 'yMin':\n      case 'yMax': {\n        if (!yName) {\n          yName = field.name;\n        }\n        if (meta.yOrdinalDisplay == null) {\n          updateFieldDisplay(field, options.yAxis, theme);\n        }\n        break;\n      }\n\n      case 'x':\n      case 'xMin':\n      case 'xMax':\n        xName = field.name;\n        break;\n\n      default: {\n        if (field.type === FieldType.number && !valueField) {\n          valueField = field;\n        }\n      }\n    }\n  }\n\n  if (!yName) {\n    return { warning: 'Missing Y field', heatmap: frame };\n  }\n  if (!yName) {\n    return { warning: 'Missing X field', heatmap: frame };\n  }\n  if (!valueField) {\n    return { warning: 'Missing value field', heatmap: frame };\n  }\n\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n\n  // infer bucket sizes from data (for now)\n  // the 'heatmap-scanlines' dense frame format looks like:\n  // x:      1,1,1,1,2,2,2,2\n  // y:      3,4,5,6,3,4,5,6\n  // count:  0,0,0,7,0,3,0,1\n\n  const xs = frame.fields[0].values;\n  const ys = frame.fields[1].values;\n  const dlen = xs.length;\n\n  // below is literally copy/paste from the pathBuilder code in utils.ts\n  // detect x and y bin qtys by detecting layout repetition in x & y data\n  let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n  let xBinQty = dlen / yBinQty;\n  let yBinIncr = ys[1] - ys[0];\n  let xBinIncr = xs[yBinQty] - xs[0];\n\n  let [minValue, maxValue] = boundedMinMax(\n    valueField.values,\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  let calcX = options.calculation?.xBuckets;\n  let calcY = options.calculation?.yBuckets;\n\n  const data: HeatmapData = {\n    heatmap: frame,\n    heatmapColors: {\n      palette,\n      values: valuesToFills(valueField.values, palette, minValue, maxValue),\n      minValue,\n      maxValue,\n    },\n\n    exemplars: exemplars?.length ? exemplars : undefined,\n    xBucketSize: xBinIncr,\n    yBucketSize: yBinIncr,\n    xBucketCount: xBinQty,\n    yBucketCount: yBinQty,\n\n    yLog: calcY?.scale?.log ?? 0,\n    xLog: calcX?.scale?.log ?? 0,\n\n    xLogSplit: calcX?.scale?.log ? +(calcX?.value ?? '1') : 1,\n    yLogSplit: calcY?.scale?.log ? +(calcY?.value ?? '1') : 1,\n\n    // TODO: improve heuristic\n    xLayout:\n      xName === 'xMax' ? HeatmapCellLayout.le : xName === 'xMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n    yLayout:\n      yName === 'yMax' ? HeatmapCellLayout.le : yName === 'yMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n\n    display: (v) => formattedValueToString(disp(v)),\n  };\n\n  return data;\n};\n\nfunction updateFieldDisplay(field: Field, opts: CellValues | undefined, theme: GrafanaTheme2): ValueFormatter {\n  if (opts?.unit?.length || opts?.decimals != null) {\n    const { unit, decimals } = opts;\n    field.display = undefined;\n    field.config = { ...field.config };\n    if (unit?.length) {\n      field.config.unit = unit;\n    }\n    if (decimals != null) {\n      field.config.decimals = decimals;\n    }\n  }\n  if (!field.display) {\n    field.display = getDisplayProcessor({ field, theme });\n  }\n  return field.display;\n}\n","import { FieldConfigSource, PanelModel, PanelTypeChangedHandler } from '@grafana/data';\nimport {\n  AxisPlacement,\n  ScaleDistribution,\n  VisibilityMode,\n  HeatmapCellLayout,\n  HeatmapCalculationMode,\n  HeatmapCalculationOptions,\n} from '@grafana/schema';\nimport { TooltipDisplayMode } from '@grafana/ui';\n\nimport { colorSchemes } from './palettes';\nimport { Options, defaultOptions, HeatmapColorMode } from './types';\n\n/** Called when the version number changes */\nexport const heatmapMigrationHandler = (panel: PanelModel): Partial<Options> => {\n  // Migrating from angular\n  if (Object.keys(panel.options ?? {}).length === 0) {\n    return heatmapChangedHandler(panel, 'heatmap', { angular: panel }, panel.fieldConfig);\n  }\n\n  // multi tooltip mode in 10.3+\n  let showTooltip = panel.options?.tooltip?.show;\n  if (showTooltip !== undefined) {\n    if (showTooltip === true) {\n      panel.options.tooltip.mode = TooltipDisplayMode.Single;\n    } else if (showTooltip === false) {\n      panel.options.tooltip.mode = TooltipDisplayMode.None;\n    }\n\n    // Remove old tooltip option\n    delete panel.options.tooltip?.show;\n  }\n\n  return panel.options;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const heatmapChangedHandler: PanelTypeChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  if (prevPluginId === 'heatmap' && prevOptions.angular) {\n    const { fieldConfig, options } = angularToReactHeatmap({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig,\n    });\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n    return options;\n  }\n  // alpha for 8.5+, then beta at 9.0.1\n  if (prevPluginId === 'heatmap-new') {\n    const { bucketFrame, ...options } = panel.options;\n    if (bucketFrame) {\n      return { ...options, rowsFrame: bucketFrame };\n    }\n    return panel.options;\n  }\n  return {};\n};\n\nexport function angularToReactHeatmap(angular: any): { fieldConfig: FieldConfigSource; options: Options } {\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [],\n  };\n\n  const calculate = angular.dataFormat === 'tsbuckets' ? false : true;\n  const calculation: HeatmapCalculationOptions = {\n    ...defaultOptions.calculation,\n  };\n\n  const oldYAxis = { logBase: 1, ...angular.yAxis };\n\n  if (calculate) {\n    if (angular.xBucketSize) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.xBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.xBucketNumber}` };\n    }\n\n    if (angular.yBucketSize) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.yBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.yBucketNumber}` };\n    }\n\n    if (oldYAxis.logBase > 1) {\n      calculation.yBuckets = {\n        mode: HeatmapCalculationMode.Count,\n        value: +oldYAxis.splitFactor > 0 ? `${oldYAxis.splitFactor}` : undefined,\n        scale: {\n          type: ScaleDistribution.Log,\n          log: oldYAxis.logBase,\n        },\n      };\n    }\n  }\n\n  const cellGap = asNumber(angular.cards?.cardPadding, 2);\n  const options: Options = {\n    calculate,\n    calculation,\n    color: {\n      ...defaultOptions.color,\n      steps: 128, // best match with existing colors\n    },\n    cellGap: cellGap ? cellGap : 1, // default to size 1\n    cellRadius: asNumber(angular.cards?.cardRound), // just to keep it\n    yAxis: {\n      axisPlacement: oldYAxis.show === false ? AxisPlacement.Hidden : AxisPlacement.Left,\n      reverse: Boolean(angular.reverseYBuckets),\n      axisWidth: asNumber(oldYAxis.width),\n      min: oldYAxis.min,\n      max: oldYAxis.max,\n      unit: oldYAxis.format,\n      decimals: oldYAxis.decimals,\n    },\n    cellValues: {\n      decimals: asNumber(angular.tooltipDecimals),\n    },\n    rowsFrame: {\n      layout: getHeatmapCellLayout(angular.yBucketBound),\n    },\n    legend: {\n      show: Boolean(angular.legend?.show),\n    },\n    showValue: VisibilityMode.Never,\n    tooltip: {\n      mode: Boolean(angular.tooltip?.show) ? TooltipDisplayMode.Single : TooltipDisplayMode.None,\n      yHistogram: Boolean(angular.tooltip?.showHistogram),\n    },\n    exemplars: {\n      ...defaultOptions.exemplars,\n    },\n  };\n\n  if (angular.hideZeroBuckets) {\n    options.filterValues = { ...defaultOptions.filterValues }; // min: 1e-9\n  }\n\n  // Migrate color options\n  const color = angular.color ?? {};\n  switch (color?.mode) {\n    case 'spectrum': {\n      options.color.mode = HeatmapColorMode.Scheme;\n\n      const current: string = color.colorScheme;\n      let scheme = colorSchemes.find((v) => v.name === current);\n      if (!scheme) {\n        scheme = colorSchemes.find((v) => current.indexOf(v.name) >= 0);\n      }\n      options.color.scheme = scheme ? scheme.name : defaultOptions.color.scheme;\n      break;\n    }\n    case 'opacity': {\n      options.color.mode = HeatmapColorMode.Opacity;\n      options.color.scale = color.scale;\n      break;\n    }\n  }\n  options.color.fill = color.cardColor;\n  options.color.min = color.min;\n  options.color.max = color.max;\n\n  if (typeof color.min === 'number' && typeof color.max === 'number' && color.min > color.max) {\n    options.color.min = color.max;\n    options.color.max = color.min;\n    options.color.reverse = true;\n  }\n\n  return { fieldConfig, options };\n}\n\nfunction getHeatmapCellLayout(v?: string): HeatmapCellLayout {\n  switch (v) {\n    case 'upper':\n      return HeatmapCellLayout.ge;\n    case 'lower':\n      return HeatmapCellLayout.le;\n    case 'middle':\n      return HeatmapCellLayout.unknown;\n  }\n  return HeatmapCellLayout.auto;\n}\n\nfunction asNumber(v: unknown, defaultValue?: number): number | undefined {\n  if (v == null || v === '') {\n    return defaultValue;\n  }\n  const num = +v;\n  return isNaN(num) ? defaultValue : num;\n}\n","import React from 'react';\n\nimport { FieldConfigProperty, FieldType, identityOverrideProcessor, PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  AxisPlacement,\n  GraphFieldConfig,\n  ScaleDistribution,\n  ScaleDistributionConfig,\n  HeatmapCellLayout,\n} from '@grafana/schema';\nimport { TooltipDisplayMode } from '@grafana/ui';\nimport { addHideFrom, ScaleDistributionEditor } from '@grafana/ui/src/options/builder';\nimport { ColorScale } from '../../../core/components/ColorScale/ColorScale';\nimport { addHeatmapCalculationOptions } from '../../../features/transformers/calculateHeatmap/editor/helper';\nimport { readHeatmapRowsCustomMeta } from '../../../features/transformers/calculateHeatmap/heatmap';\n\nimport { HeatmapPanel } from './HeatmapPanel';\nimport { prepareHeatmapData } from './fields';\nimport { heatmapChangedHandler, heatmapMigrationHandler } from './migrations';\nimport { colorSchemes, quantizeScheme } from './palettes';\nimport { HeatmapSuggestionsSupplier } from './suggestions';\nimport { Options, defaultOptions, HeatmapColorMode, HeatmapColorScale } from './types';\n\nexport const plugin = new PanelPlugin<Options, GraphFieldConfig>(HeatmapPanel)\n  .useFieldConfig({\n    disableStandardOptions: Object.values(FieldConfigProperty).filter((v) => v !== FieldConfigProperty.Links),\n    useCustomConfig: (builder) => {\n      builder.addCustomEditor<void, ScaleDistributionConfig>({\n        id: 'scaleDistribution',\n        path: 'scaleDistribution',\n        name: 'Y axis scale',\n        category: ['Heatmap'],\n        editor: ScaleDistributionEditor,\n        override: ScaleDistributionEditor,\n        defaultValue: { type: ScaleDistribution.Linear },\n        shouldApply: (f) => f.type === FieldType.number,\n        process: identityOverrideProcessor,\n        hideFromDefaults: true,\n      });\n      addHideFrom(builder); // for tooltip etc\n    },\n  })\n  .setPanelChangeHandler(heatmapChangedHandler)\n  .setMigrationHandler(heatmapMigrationHandler)\n  .setPanelOptions((builder, context) => {\n    const opts = context.options ?? defaultOptions;\n\n    let isOrdinalY = false;\n\n    if (context.data.length > 0) {\n      try {\n        // NOTE: this feels like overkill/expensive just to assert if we have an ordinal y\n        // can probably simplify without doing full dataprep\n        const palette = quantizeScheme(opts.color, config.theme2);\n        const v = prepareHeatmapData(context.data, undefined, opts, palette, config.theme2);\n        isOrdinalY = readHeatmapRowsCustomMeta(v.heatmap).yOrdinalDisplay != null;\n      } catch {}\n    }\n\n    let category = ['Heatmap'];\n\n    builder.addRadio({\n      path: 'calculate',\n      name: 'Calculate from data',\n      defaultValue: defaultOptions.calculate,\n      category,\n      settings: {\n        options: [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n      },\n    });\n\n    if (opts.calculate) {\n      addHeatmapCalculationOptions('calculation.', builder, opts.calculation, category);\n    }\n\n    category = ['Y Axis'];\n\n    builder\n      .addRadio({\n        path: 'yAxis.axisPlacement',\n        name: 'Placement',\n        defaultValue: defaultOptions.yAxis.axisPlacement ?? AxisPlacement.Left,\n        category,\n        settings: {\n          options: [\n            { label: 'Left', value: AxisPlacement.Left },\n            { label: 'Right', value: AxisPlacement.Right },\n            { label: 'Hidden', value: AxisPlacement.Hidden },\n          ],\n        },\n      })\n      .addUnitPicker({\n        category,\n        path: 'yAxis.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'yAxis.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    if (!isOrdinalY) {\n      // if undefined, then show the min+max\n      builder\n        .addNumberInput({\n          path: 'yAxis.min',\n          name: 'Min value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        })\n        .addTextInput({\n          path: 'yAxis.max',\n          name: 'Max value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        });\n    }\n\n    builder\n      .addNumberInput({\n        path: 'yAxis.axisWidth',\n        name: 'Axis width',\n        defaultValue: defaultOptions.yAxis.axisWidth,\n        settings: {\n          placeholder: 'Auto',\n          min: 5, // smaller should just be hidden\n        },\n        category,\n      })\n      .addTextInput({\n        path: 'yAxis.axisLabel',\n        name: 'Axis label',\n        defaultValue: defaultOptions.yAxis.axisLabel,\n        settings: {\n          placeholder: 'Auto',\n        },\n        category,\n      });\n\n    if (!opts.calculate) {\n      builder.addRadio({\n        path: 'rowsFrame.layout',\n        name: 'Tick alignment',\n        defaultValue: defaultOptions.rowsFrame?.layout ?? HeatmapCellLayout.auto,\n        category,\n        settings: {\n          options: [\n            { label: 'Auto', value: HeatmapCellLayout.auto },\n            { label: 'Top (LE)', value: HeatmapCellLayout.le },\n            { label: 'Middle', value: HeatmapCellLayout.unknown },\n            { label: 'Bottom (GE)', value: HeatmapCellLayout.ge },\n          ],\n        },\n      });\n    }\n    builder.addBooleanSwitch({\n      path: 'yAxis.reverse',\n      name: 'Reverse',\n      defaultValue: defaultOptions.yAxis.reverse === true,\n      category,\n    });\n\n    category = ['Colors'];\n\n    builder.addRadio({\n      path: `color.mode`,\n      name: 'Mode',\n      defaultValue: defaultOptions.color.mode,\n      category,\n      settings: {\n        options: [\n          { label: 'Scheme', value: HeatmapColorMode.Scheme },\n          { label: 'Opacity', value: HeatmapColorMode.Opacity },\n        ],\n      },\n    });\n\n    builder.addColorPicker({\n      path: `color.fill`,\n      name: 'Color',\n      defaultValue: defaultOptions.color.fill,\n      category,\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addRadio({\n      path: `color.scale`,\n      name: 'Scale',\n      defaultValue: defaultOptions.color.scale,\n      category,\n      settings: {\n        options: [\n          { label: 'Exponential', value: HeatmapColorScale.Exponential },\n          { label: 'Linear', value: HeatmapColorScale.Linear },\n        ],\n      },\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addSliderInput({\n      path: 'color.exponent',\n      name: 'Exponent',\n      defaultValue: defaultOptions.color.exponent,\n      category,\n      settings: {\n        min: 0.1, // 1 for on/off?\n        max: 2,\n        step: 0.1,\n      },\n      showIf: (opts) =>\n        opts.color.mode === HeatmapColorMode.Opacity && opts.color.scale === HeatmapColorScale.Exponential,\n    });\n\n    builder.addSelect({\n      path: `color.scheme`,\n      name: 'Scheme',\n      description: '',\n      defaultValue: defaultOptions.color.scheme,\n      category,\n      settings: {\n        options: colorSchemes.map((scheme) => ({\n          value: scheme.name,\n          label: scheme.name,\n          //description: 'Set a geometry field based on the results of other fields',\n        })),\n      },\n      showIf: (opts) => opts.color.mode !== HeatmapColorMode.Opacity,\n    });\n\n    builder\n      .addSliderInput({\n        path: 'color.steps',\n        name: 'Steps',\n        defaultValue: defaultOptions.color.steps,\n        category,\n        settings: {\n          min: 2,\n          max: 128,\n          step: 1,\n        },\n      })\n      .addBooleanSwitch({\n        path: 'color.reverse',\n        name: 'Reverse',\n        defaultValue: defaultOptions.color.reverse,\n        category,\n      })\n      .addCustomEditor({\n        id: '__scale__',\n        path: `__scale__`,\n        name: '',\n        category,\n        editor: () => {\n          const palette = quantizeScheme(opts.color, config.theme2);\n          return (\n            <div>\n              <ColorScale colorPalette={palette} min={1} max={100} />\n            </div>\n          );\n        },\n      });\n\n    builder\n      .addNumberInput({\n        path: 'color.min',\n        name: 'Start color scale from value',\n        defaultValue: defaultOptions.color.min,\n        settings: {\n          placeholder: 'Auto (min)',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'color.max',\n        name: 'End color scale at value',\n        defaultValue: defaultOptions.color.max,\n        settings: {\n          placeholder: 'Auto (max)',\n        },\n        category,\n      });\n\n    category = ['Cell display'];\n\n    if (!opts.calculate) {\n      builder.addTextInput({\n        path: 'rowsFrame.value',\n        name: 'Value name',\n        defaultValue: defaultOptions.rowsFrame?.value,\n        settings: {\n          placeholder: 'Value',\n        },\n        category,\n      });\n    }\n\n    builder\n      .addUnitPicker({\n        category,\n        path: 'cellValues.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'cellValues.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    builder\n      // .addRadio({\n      //   path: 'showValue',\n      //   name: 'Show values',\n      //   defaultValue: defaultOptions.showValue,\n      //   category,\n      //   settings: {\n      //     options: [\n      //       { value: VisibilityMode.Auto, label: 'Auto' },\n      //       { value: VisibilityMode.Always, label: 'Always' },\n      //       { value: VisibilityMode.Never, label: 'Never' },\n      //     ],\n      //   },\n      // })\n      .addSliderInput({\n        name: 'Cell gap',\n        path: 'cellGap',\n        defaultValue: defaultOptions.cellGap,\n        category,\n        settings: {\n          min: 0,\n          max: 25,\n        },\n      })\n      .addNumberInput({\n        path: 'filterValues.le',\n        name: 'Hide cells with values <=',\n        defaultValue: defaultOptions.filterValues?.le,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'filterValues.ge',\n        name: 'Hide cells with values >=',\n        defaultValue: defaultOptions.filterValues?.ge,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      });\n    // .addSliderInput({\n    //   name: 'Cell radius',\n    //   path: 'cellRadius',\n    //   defaultValue: defaultOptions.cellRadius,\n    //   category,\n    //   settings: {\n    //     min: 0,\n    //     max: 100,\n    //   },\n    // })\n\n    category = ['Tooltip'];\n\n    builder.addRadio({\n      path: 'tooltip.mode',\n      name: 'Tooltip mode',\n      category,\n      defaultValue: TooltipDisplayMode.Single,\n      settings: {\n        options: [\n          { value: TooltipDisplayMode.Single, label: 'Single' },\n          { value: TooltipDisplayMode.Multi, label: 'All' },\n          { value: TooltipDisplayMode.None, label: 'Hidden' },\n        ],\n      },\n    });\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.yHistogram',\n      name: 'Show histogram (Y axis)',\n      defaultValue: defaultOptions.tooltip.yHistogram,\n      category,\n      showIf: (opts) => opts.tooltip.mode === TooltipDisplayMode.Single,\n    });\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.showColorScale',\n      name: 'Show color scale',\n      defaultValue: defaultOptions.tooltip.showColorScale,\n      category,\n      showIf: (opts) => opts.tooltip.mode === TooltipDisplayMode.Single,\n    });\n\n    builder.addNumberInput({\n      path: 'tooltip.maxWidth',\n      name: 'Max width',\n      category,\n      settings: {\n        integer: true,\n      },\n    });\n\n    builder.addNumberInput({\n      path: 'tooltip.maxHeight',\n      name: 'Max height',\n      category,\n      defaultValue: undefined,\n      settings: {\n        integer: true,\n      },\n      showIf: (options) => options.tooltip?.mode === TooltipDisplayMode.Multi,\n    });\n\n    category = ['Legend'];\n    builder.addBooleanSwitch({\n      path: 'legend.show',\n      name: 'Show legend',\n      defaultValue: defaultOptions.legend.show,\n      category,\n    });\n\n    category = ['Exemplars'];\n    builder.addColorPicker({\n      path: 'exemplars.color',\n      name: 'Color',\n      defaultValue: defaultOptions.exemplars.color,\n      category,\n    });\n  })\n  .setSuggestionsSupplier(new HeatmapSuggestionsSupplier())\n  .setDataSupport({ annotations: true });\n","import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\nimport tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { HeatmapColorOptions, defaultOptions, HeatmapColorMode, HeatmapColorScale } from './types';\n\n// https://observablehq.com/@d3/color-schemes?collection=@d3/d3-scale-chromatic\n\n// the previous heatmap panel used d3 deps and some code to interpolate to static 9-color palettes. here we just hard-code them for clarity.\n// if the need arises for configurable-sized palettes, we can bring back the deps & variable interpolation (see simplified code at end)\n\n// Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\nexport const colorSchemes = [\n  // Diverging\n  { name: 'BrBG', invert: 'always' },\n  { name: 'PiYG', invert: 'always' },\n  { name: 'PRGn', invert: 'always' },\n  { name: 'PuOr', invert: 'always' },\n  { name: 'RdBu', invert: 'always' },\n  { name: 'RdGy', invert: 'always' },\n  { name: 'RdYlBu', invert: 'always' },\n  { name: 'RdYlGn', invert: 'always' },\n  { name: 'Spectral', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', invert: 'dark' },\n  { name: 'Greens', invert: 'dark' },\n  { name: 'Greys', invert: 'dark' },\n  { name: 'Oranges', invert: 'dark' },\n  { name: 'Purples', invert: 'dark' },\n  { name: 'Reds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'Turbo', invert: 'light' },\n  { name: 'Cividis', invert: 'light' },\n  { name: 'Viridis', invert: 'light' },\n  { name: 'Magma', invert: 'light' },\n  { name: 'Inferno', invert: 'light' },\n  { name: 'Plasma', invert: 'light' },\n  { name: 'Warm', invert: 'light' },\n  { name: 'Cool', invert: 'light' },\n  { name: 'Cubehelix', invert: 'light', name2: 'CubehelixDefault' },\n  { name: 'BuGn', invert: 'dark' },\n  { name: 'BuPu', invert: 'dark' },\n  { name: 'GnBu', invert: 'dark' },\n  { name: 'OrRd', invert: 'dark' },\n  { name: 'PuBuGn', invert: 'dark' },\n  { name: 'PuBu', invert: 'dark' },\n  { name: 'PuRd', invert: 'dark' },\n  { name: 'RdPu', invert: 'dark' },\n  { name: 'YlGnBu', invert: 'dark' },\n  { name: 'YlGn', invert: 'dark' },\n  { name: 'YlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', invert: 'dark' },\n\n  // Cyclical\n  { name: 'Rainbow', invert: 'always' },\n  { name: 'Sinebow', invert: 'always' },\n];\n\ntype Interpolator = (t: number) => string;\n\nconst DEFAULT_SCHEME = colorSchemes.find((scheme) => scheme.name === 'Spectral');\n\nexport function quantizeScheme(opts: HeatmapColorOptions, theme: GrafanaTheme2): string[] {\n  const options = { ...defaultOptions.color, ...opts };\n  const palette = [];\n  const steps = (options.steps ?? 128) - 1;\n\n  if (opts.mode === HeatmapColorMode.Opacity) {\n    const fill = tinycolor(theme.visualization.getColorByName(opts.fill)).toPercentageRgb();\n\n    const scale =\n      options.scale === HeatmapColorScale.Exponential\n        ? d3.scalePow().exponent(options.exponent).domain([0, 1]).range([0, 1])\n        : d3.scaleLinear().domain([0, 1]).range([0, 1]);\n\n    for (let i = 0; i <= steps; i++) {\n      fill.a = scale(i / steps);\n      palette.push(tinycolor(fill).toString('hex8'));\n    }\n  } else {\n    const scheme = colorSchemes.find((scheme) => scheme.name === options.scheme) ?? DEFAULT_SCHEME!;\n    let fnName = 'interpolate' + (scheme.name2 ?? scheme.name);\n    const interpolate: Interpolator = (d3ScaleChromatic as any)[fnName];\n\n    for (let i = 0; i <= steps; i++) {\n      let rgbStr = interpolate(i / steps);\n      let rgb =\n        rgbStr.indexOf('rgb') === 0\n          ? '#' + [...rgbStr.matchAll(/\\d+/g)].map((v) => (+v[0]).toString(16).padStart(2, '0')).join('')\n          : rgbStr;\n      palette.push(rgb);\n    }\n\n    if (\n      scheme.invert === 'always' ||\n      (scheme.invert === 'dark' && theme.isDark) ||\n      (scheme.invert === 'light' && theme.isLight)\n    ) {\n      palette.reverse();\n    }\n\n    if (opts.reverse) {\n      palette.reverse();\n    }\n  }\n\n  return palette;\n}\n","export function renderHistogram(\n  can: React.RefObject<HTMLCanvasElement>,\n  histCanWidth: number,\n  histCanHeight: number,\n  xVals: number[],\n  countVals: number[],\n  index: number,\n  yBucketCount: number\n) {\n  let histCtx = can.current?.getContext('2d');\n\n  if (histCtx != null) {\n    const barsGap = 1;\n    let fromIdx = index;\n\n    while (xVals[fromIdx - 1] === xVals[index]) {\n      fromIdx--;\n    }\n\n    let toIdx = fromIdx + yBucketCount;\n\n    let maxCount = 0;\n\n    let i = fromIdx;\n    while (i < toIdx) {\n      let c = countVals[i];\n      maxCount = Math.max(maxCount, c);\n      i++;\n    }\n\n    let pHov = new Path2D();\n    let pRest = new Path2D();\n\n    i = fromIdx;\n    let j = 0;\n    while (i < toIdx) {\n      let c = countVals[i];\n\n      if (c > 0) {\n        let pctY = c / maxCount;\n        let pctX = j / yBucketCount;\n\n        let p = i === index ? pHov : pRest;\n\n        const xCoord = histCanWidth * pctX + barsGap;\n        const width = histCanWidth / yBucketCount - barsGap;\n\n        p.rect(xCoord, Math.round(histCanHeight * (1 - pctY)), width, Math.round(histCanHeight * pctY));\n      }\n\n      i++;\n      j++;\n    }\n\n    histCtx.clearRect(0, 0, histCanWidth, histCanHeight);\n\n    histCtx.fillStyle = '#2E3036';\n    histCtx.fill(pRest);\n\n    histCtx.fillStyle = '#5794F2';\n    histCtx.fill(pHov);\n  }\n}\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { prepareHeatmapData } from './fields';\nimport { quantizeScheme } from './palettes';\nimport { Options, defaultOptions } from './types';\n\nexport class HeatmapSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (\n      !builder.data?.series ||\n      !dataSummary.hasData ||\n      dataSummary.timeFieldCount < 1 ||\n      dataSummary.numberFieldCount < 2 ||\n      dataSummary.numberFieldCount > 10\n    ) {\n      return;\n    }\n\n    const palette = quantizeScheme(defaultOptions.color, config.theme2);\n    const info = prepareHeatmapData(builder.data.series, undefined, defaultOptions, palette, config.theme2);\n    if (!info || info.warning) {\n      return;\n    }\n\n    builder.getListAppender<Options, {}>({\n      name: '',\n      pluginId: 'heatmap',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n  }\n}\n","import { DataFrame, Field } from '@grafana/data';\n\nimport { HeatmapData } from '../fields';\n\ntype BucketsMinMax = {\n  xBucketMin: number;\n  xBucketMax: number;\n  yBucketMin: string;\n  yBucketMax: string;\n};\n\nexport const getHoverCellColor = (data: HeatmapData, index: number) => {\n  const colorPalette = data.heatmapColors?.palette!;\n  const colorIndex = data.heatmapColors?.values[index];\n\n  let cellColor: string | undefined = undefined;\n\n  if (colorIndex != null) {\n    cellColor = colorPalette[colorIndex];\n  }\n\n  return { cellColor, colorPalette };\n};\n\nconst conversions: Record<string, number> = {\n  year: 1000 * 60 * 60 * 24 * 365,\n  month: 1000 * 60 * 60 * 24 * 30,\n  week: 1000 * 60 * 60 * 24 * 7,\n  day: 1000 * 60 * 60 * 24,\n  h: 1000 * 60 * 60,\n  m: 1000 * 60,\n  s: 1000,\n  ms: 1,\n};\n\nconst noPluralize = new Set(['ms', 's', 'm', 'h']);\n\n// @TODO: display \"~ 1 year/month\"?\nexport const formatMilliseconds = (milliseconds: number) => {\n  let value = 1;\n  let unit = 'ms';\n\n  for (unit in conversions) {\n    if (milliseconds >= conversions[unit]) {\n      value = Math.floor(milliseconds / conversions[unit]);\n      break;\n    }\n  }\n\n  const plural = value !== 1 && !noPluralize.has(unit);\n  const unitString = plural ? unit + 's' : unit;\n\n  return `${value} ${unitString}`;\n};\n\nexport const getFieldFromData = (data: DataFrame, fieldType: string, isSparse: boolean) => {\n  let field: Field | undefined;\n\n  switch (fieldType) {\n    case 'x':\n      field = isSparse\n        ? data?.fields.find(({ name }) => name === 'x' || name === 'xMin' || name === 'xMax')\n        : data?.fields[0];\n      break;\n    case 'y':\n      field = isSparse\n        ? data?.fields.find(({ name }) => name === 'y' || name === 'yMin' || name === 'yMax')\n        : data?.fields[1];\n      break;\n    case 'count':\n      field = isSparse ? data?.fields.find(({ name }) => name === 'count') : data?.fields[2];\n      break;\n  }\n\n  return field;\n};\n\nexport const getSparseCellMinMax = (data: HeatmapData, index: number): BucketsMinMax => {\n  let fields = data.heatmap!.fields;\n\n  let xMax = fields.find((f) => f.name === 'xMax')!;\n  let yMin = fields.find((f) => f.name === 'yMin')!;\n  let yMax = fields.find((f) => f.name === 'yMax')!;\n\n  let interval = xMax.config.interval!;\n\n  return {\n    xBucketMin: xMax.values[index] - interval,\n    xBucketMax: xMax.values[index],\n    yBucketMin: yMin.values[index],\n    yBucketMax: yMax.values[index],\n  };\n};\n","import { RefObject } from 'react';\nimport uPlot, { Cursor } from 'uplot';\n\nimport {\n  DataFrameType,\n  formattedValueToString,\n  getValueFormat,\n  GrafanaTheme2,\n  incrRoundDn,\n  incrRoundUp,\n  TimeRange,\n  FieldType,\n} from '@grafana/data';\nimport { AxisPlacement, ScaleDirection, ScaleDistribution, ScaleOrientation, HeatmapCellLayout } from '@grafana/schema';\nimport { UPlotConfigBuilder } from '@grafana/ui';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from '../../../features/transformers/calculateHeatmap/heatmap';\n\nimport { pointWithin, Quadtree, Rect } from '../barchart/quadtree';\n\nimport { HeatmapData } from './fields';\nimport { FieldConfig, HeatmapSelectionMode, YAxisConfig } from './types';\n\ninterface PathbuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n  gap?: number | null;\n  hideLE?: number;\n  hideGE?: number;\n  xAlign?: -1 | 0 | 1;\n  yAlign?: -1 | 0 | 1;\n  ySizeDivisor?: number;\n  disp: {\n    fill: {\n      values: (u: uPlot, seriesIndex: number) => number[];\n      index: Array<CanvasRenderingContext2D['fillStyle']>;\n    };\n  };\n}\n\ninterface PointsBuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n}\n\ninterface PrepConfigOpts {\n  dataRef: RefObject<HeatmapData>;\n  theme: GrafanaTheme2;\n  timeZone: string;\n  getTimeRange: () => TimeRange;\n  exemplarColor: string;\n  cellGap?: number | null; // in css pixels\n  hideLE?: number;\n  hideGE?: number;\n  yAxisConfig: YAxisConfig;\n  ySizeDivisor?: number;\n  selectionMode?: HeatmapSelectionMode;\n}\n\nexport function prepConfig(opts: PrepConfigOpts) {\n  const {\n    dataRef,\n    theme,\n    timeZone,\n    getTimeRange,\n    cellGap,\n    hideLE,\n    hideGE,\n    yAxisConfig,\n    ySizeDivisor,\n    selectionMode = HeatmapSelectionMode.X,\n  } = opts;\n\n  const xScaleKey = 'x';\n  let isTime = true;\n\n  if (dataRef.current?.heatmap?.fields[0].type !== FieldType.time) {\n    isTime = false;\n  }\n\n  const pxRatio = devicePixelRatio;\n\n  let heatmapType = dataRef.current?.heatmap?.meta?.type;\n  const exemplarFillColor = theme.visualization.getColorByName(opts.exemplarColor);\n\n  let qt: Quadtree;\n  let hRect: Rect | null;\n\n  let builder = new UPlotConfigBuilder(timeZone);\n\n  builder.addHook('init', (u) => {\n    u.root.querySelectorAll<HTMLElement>('.u-cursor-pt').forEach((el) => {\n      Object.assign(el.style, {\n        borderRadius: '0',\n        border: '1px solid white',\n        background: 'transparent',\n      });\n    });\n  });\n\n  if (isTime) {\n    // this is a tmp hack because in mode: 2, uplot does not currently call scales.x.range() for setData() calls\n    // scales.x.range() typically reads back from drilled-down panelProps.timeRange via getTimeRange()\n    builder.addHook('setData', (u) => {\n      //let [min, max] = (u.scales!.x!.range! as uPlot.Range.Function)(u, 0, 100, xScaleKey);\n\n      let { min: xMin, max: xMax } = u.scales!.x;\n\n      let min = getTimeRange().from.valueOf();\n      let max = getTimeRange().to.valueOf();\n\n      if (xMin !== min || xMax !== max) {\n        queueMicrotask(() => {\n          u.setScale(xScaleKey, { min, max });\n        });\n      }\n    });\n  }\n\n  builder.addHook('drawClear', (u) => {\n    qt = qt || new Quadtree(0, 0, u.bbox.width, u.bbox.height);\n\n    qt.clear();\n\n    // force-clear the path cache to cause drawBars() to rebuild new quadtree\n    u.series.forEach((s, i) => {\n      if (i > 0) {\n        // @ts-ignore\n        s._paths = null;\n      }\n    });\n  });\n\n  builder.setMode(2);\n\n  builder.addScale({\n    scaleKey: xScaleKey,\n    isTime,\n    orientation: ScaleOrientation.Horizontal,\n    direction: ScaleDirection.Right,\n    // TODO: expand by x bucket size and layout\n    range: (u, dataMin, dataMax) => {\n      if (isTime) {\n        return [getTimeRange().from.valueOf(), getTimeRange().to.valueOf()];\n      } else {\n        if (dataRef.current?.xLayout === HeatmapCellLayout.le) {\n          return [dataMin - dataRef.current?.xBucketSize!, dataMax];\n        } else if (dataRef.current?.xLayout === HeatmapCellLayout.ge) {\n          return [dataMin, dataMax + dataRef.current?.xBucketSize!];\n        } else {\n          let offset = dataRef.current?.xBucketSize! / 2;\n\n          return [dataMin - offset, dataMax + offset];\n        }\n      }\n    },\n  });\n\n  let incrs;\n\n  if (!isTime) {\n    incrs = [];\n\n    for (let i = 0; i < 10; i++) {\n      incrs.push(i * dataRef.current?.xBucketSize!);\n    }\n  }\n\n  builder.addAxis({\n    scaleKey: xScaleKey,\n    placement: AxisPlacement.Bottom,\n    incrs,\n    isTime,\n    theme: theme,\n    timeZone,\n  });\n\n  const yField = dataRef.current?.heatmap?.fields[1]!;\n  if (!yField) {\n    return builder; // early abort (avoids error)\n  }\n\n  const yFieldConfig: FieldConfig | undefined = yField.config?.custom;\n  const yScale = yFieldConfig?.scaleDistribution ?? { type: ScaleDistribution.Linear };\n  const yAxisReverse = Boolean(yAxisConfig.reverse);\n  const isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n  const shouldUseLogScale = yScale.type !== ScaleDistribution.Linear || isSparseHeatmap;\n  const isOrdinalY = readHeatmapRowsCustomMeta(dataRef.current?.heatmap).yOrdinalDisplay != null;\n\n  // random to prevent syncing y in other heatmaps\n  // TODO: try to match TimeSeries y keygen algo to sync with TimeSeries panels (when not isOrdinalY)\n  const yScaleKey = 'y_' + (Math.random() + 1).toString(36).substring(7);\n\n  builder.addScale({\n    scaleKey: yScaleKey,\n    isTime: false,\n    // distribution: ScaleDistribution.Ordinal, // does not work with facets/scatter yet\n    orientation: ScaleOrientation.Vertical,\n    direction: yAxisReverse ? ScaleDirection.Down : ScaleDirection.Up,\n    // should be tweakable manually\n    distribution: shouldUseLogScale ? ScaleDistribution.Log : ScaleDistribution.Linear,\n    log: yScale.log ?? 2,\n    range:\n      // sparse already accounts for le/ge by explicit yMin & yMax cell bounds, so no need to expand y range\n      isSparseHeatmap\n        ? (u, dataMin, dataMax) => {\n            // ...but uPlot currently only auto-ranges from the yMin facet data, so we have to grow by 1 extra factor\n            // @ts-ignore\n            let bucketFactor = u.data[1][2][0] / u.data[1][1][0];\n\n            dataMax *= bucketFactor;\n\n            let scaleMin: number | null, scaleMax: number | null;\n\n            [scaleMin, scaleMax] = shouldUseLogScale\n              ? uPlot.rangeLog(dataMin, dataMax, (yScale.log ?? 2) as unknown as uPlot.Scale.LogBase, true)\n              : [dataMin, dataMax];\n\n            if (shouldUseLogScale && !isOrdinalY) {\n              let yExp = u.scales[yScaleKey].log!;\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n              // guard against <= 0\n              if (explicitMin != null && explicitMin > 0) {\n                // snap to magnitude\n                let minLog = log(explicitMin);\n                scaleMin = yExp ** incrRoundDn(minLog, 1);\n              }\n\n              if (explicitMax != null && explicitMax > 0) {\n                let maxLog = log(explicitMax);\n                scaleMax = yExp ** incrRoundUp(maxLog, 1);\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          }\n        : // dense and ordinal only have one of yMin|yMax|y, so expand range by one cell in the direction of le/ge/unknown\n          (u, dataMin, dataMax) => {\n            let scaleMin = dataMin,\n              scaleMax = dataMax;\n\n            let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n            // logarithmic expansion\n            if (shouldUseLogScale) {\n              let yExp = u.scales[yScaleKey].log!;\n\n              let minExpanded = false;\n              let maxExpanded = false;\n\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              if (ySizeDivisor !== 1) {\n                let minLog = log(dataMin);\n                let maxLog = log(dataMax);\n\n                if (!Number.isInteger(minLog)) {\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                  minExpanded = true;\n                }\n\n                if (!Number.isInteger(maxLog)) {\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                  maxExpanded = true;\n                }\n              }\n\n              if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                if (!minExpanded) {\n                  scaleMin /= yExp;\n                }\n              } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                if (!maxExpanded) {\n                  scaleMax *= yExp;\n                }\n              } else {\n                scaleMin /= yExp / 2;\n                scaleMax *= yExp / 2;\n              }\n\n              if (!isOrdinalY) {\n                // guard against <= 0\n                if (explicitMin != null && explicitMin > 0) {\n                  // snap down to magnitude\n                  let minLog = log(explicitMin);\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                }\n\n                if (explicitMax != null && explicitMax > 0) {\n                  let maxLog = log(explicitMax);\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                }\n              }\n            }\n            // linear expansion\n            else {\n              let bucketSize = dataRef.current?.yBucketSize;\n\n              if (bucketSize === 0) {\n                bucketSize = 1;\n              }\n\n              if (bucketSize) {\n                if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                  scaleMin -= bucketSize!;\n                } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                  scaleMax += bucketSize!;\n                } else {\n                  scaleMin -= bucketSize! / 2;\n                  scaleMax += bucketSize! / 2;\n                }\n              } else {\n                // how to expand scale range if inferred non-regular or log buckets?\n              }\n\n              if (!isOrdinalY) {\n                scaleMin = explicitMin ?? scaleMin;\n                scaleMax = explicitMax ?? scaleMax;\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          },\n  });\n\n  const dispY = yField.display ?? getValueFormat('short');\n\n  builder.addAxis({\n    scaleKey: yScaleKey,\n    show: yAxisConfig.axisPlacement !== AxisPlacement.Hidden,\n    placement: yAxisConfig.axisPlacement || AxisPlacement.Left,\n    size: yAxisConfig.axisWidth || null,\n    label: yAxisConfig.axisLabel,\n    theme: theme,\n    formatValue: (v, decimals) => formattedValueToString(dispY(v, decimals)),\n    splits: isOrdinalY\n      ? (self: uPlot) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (!meta.yOrdinalDisplay) {\n            return [0, 1]; //?\n          }\n          let splits = meta.yOrdinalDisplay.map((v, idx) => idx);\n\n          switch (dataRef.current?.yLayout) {\n            case HeatmapCellLayout.le:\n              splits.unshift(-1);\n              break;\n            case HeatmapCellLayout.ge:\n              splits.push(splits.length);\n              break;\n          }\n\n          // Skip labels when the height is too small\n          if (self.height < 60) {\n            splits = [splits[0], splits[splits.length - 1]];\n          } else {\n            while (splits.length > 3 && (self.height - 15) / splits.length < 10) {\n              splits = splits.filter((v, idx) => idx % 2 === 0); // remove half the items\n            }\n          }\n          return splits;\n        }\n      : undefined,\n    values: isOrdinalY\n      ? (self: uPlot, splits) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (meta.yOrdinalDisplay) {\n            return splits.map((v) =>\n              v < 0\n                ? meta.yMinDisplay ?? '' // Check prometheus style labels\n                : meta.yOrdinalDisplay[v] ?? ''\n            );\n          }\n          return splits;\n        }\n      : undefined,\n  });\n\n  const pathBuilder = isSparseHeatmap ? heatmapPathsSparse : heatmapPathsDense;\n\n  // heatmap layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: pathBuilder({\n      each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n        qt.add({\n          x: x - u.bbox.left,\n          y: y - u.bbox.top,\n          w: xSize,\n          h: ySize,\n          sidx: seriesIdx,\n          didx: dataIdx,\n        });\n      },\n      gap: cellGap,\n      hideLE,\n      hideGE,\n      xAlign:\n        dataRef.current?.xLayout === HeatmapCellLayout.le\n          ? -1\n          : dataRef.current?.xLayout === HeatmapCellLayout.ge\n            ? 1\n            : 0,\n      yAlign: ((dataRef.current?.yLayout === HeatmapCellLayout.le\n        ? -1\n        : dataRef.current?.yLayout === HeatmapCellLayout.ge\n          ? 1\n          : 0) * (yAxisReverse ? -1 : 1)) as -1 | 0 | 1,\n      ySizeDivisor,\n      disp: {\n        fill: {\n          values: (u, seriesIdx) => dataRef.current?.heatmapColors?.values!,\n          index: dataRef.current?.heatmapColors?.palette!,\n        },\n      },\n    }),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  // exemplars layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: heatmapPathsPoints(\n      {\n        each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n          qt.add({\n            x: x - u.bbox.left,\n            y: y - u.bbox.top,\n            w: xSize,\n            h: ySize,\n            sidx: seriesIdx,\n            didx: dataIdx,\n          });\n        },\n      },\n      exemplarFillColor,\n      dataRef.current.yLayout\n    ),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  const dragX = selectionMode === HeatmapSelectionMode.X || selectionMode === HeatmapSelectionMode.Xy;\n  const dragY = selectionMode === HeatmapSelectionMode.Y || selectionMode === HeatmapSelectionMode.Xy;\n\n  const cursor: Cursor = {\n    drag: {\n      x: dragX,\n      y: dragY,\n      setScale: false,\n    },\n    dataIdx: (u, seriesIdx) => {\n      if (seriesIdx === 1) {\n        hRect = null;\n\n        let cx = u.cursor.left! * pxRatio;\n        let cy = u.cursor.top! * pxRatio;\n\n        qt.get(cx, cy, 1, 1, (o) => {\n          if (pointWithin(cx, cy, o.x, o.y, o.x + o.w, o.y + o.h)) {\n            hRect = o;\n          }\n        });\n      }\n\n      return hRect && seriesIdx === hRect.sidx ? hRect.didx : null;\n    },\n    focus: {\n      prox: 1e3,\n      dist: (u, seriesIdx) => (hRect?.sidx === seriesIdx ? 0 : Infinity),\n    },\n    points: {\n      fill: 'rgba(255,255,255, 0.3)',\n      bbox: (u, seriesIdx) => {\n        let isHovered = hRect && seriesIdx === hRect.sidx;\n\n        return {\n          left: isHovered ? hRect!.x / pxRatio : -10,\n          top: isHovered ? hRect!.y / pxRatio : -10,\n          width: isHovered ? hRect!.w / pxRatio : 0,\n          height: isHovered ? hRect!.h / pxRatio : 0,\n        };\n      },\n    },\n  };\n\n  builder.setCursor(cursor);\n\n  return builder;\n}\n\nconst CRISP_EDGES_GAP_MIN = 4;\n\nexport function heatmapPathsDense(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity, xAlign = 1, yAlign = 1, ySizeDivisor = 1 } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        let d = u.data[seriesIdx];\n        const xs = d[0] as unknown as number[];\n        const ys = d[1] as unknown as number[];\n        const counts = d[2] as unknown as number[];\n        const dlen = xs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // detect x and y bin qtys by detecting layout repetition in x & y data\n        let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n        let xBinQty = dlen / yBinQty;\n        let yBinIncr = ys[1] - ys[0] || scaleY.max! - scaleY.min!;\n        let xBinIncr = xs[yBinQty] - xs[0];\n\n        // uniform tile sizes based on zoom level\n        let xSize: number;\n        let ySize: number;\n\n        if (scaleX.distr === 3) {\n          xSize = Math.abs(valToPosX(xs[0] * scaleX.log!, scaleX, xDim, xOff) - valToPosX(xs[0], scaleX, xDim, xOff));\n        } else {\n          xSize = Math.abs(valToPosX(xBinIncr, scaleX, xDim, xOff) - valToPosX(0, scaleX, xDim, xOff));\n        }\n\n        if (scaleY.distr === 3) {\n          ySize =\n            Math.abs(valToPosY(ys[0] * scaleY.log!, scaleY, yDim, yOff) - valToPosY(ys[0], scaleY, yDim, yOff)) /\n            ySizeDivisor;\n        } else {\n          ySize = Math.abs(valToPosY(yBinIncr, scaleY, yDim, yOff) - valToPosY(0, scaleY, yDim, yOff)) / ySizeDivisor;\n        }\n\n        // clamp min tile size to 1px\n        xSize = Math.max(1, round(xSize - cellGap));\n        ySize = Math.max(1, round(ySize - cellGap));\n\n        // bucket agg direction\n        // let xCeil = false;\n        // let yCeil = false;\n\n        let xOffset = xAlign === -1 ? -xSize : xAlign === 0 ? -xSize / 2 : 0;\n        let yOffset = yAlign === 1 ? -ySize : yAlign === 0 ? -ySize / 2 : 0;\n\n        // pre-compute x and y offsets\n        let cys = ys.slice(0, yBinQty).map((y) => round(valToPosY(y, scaleY, yDim, yOff) + yOffset));\n        let cxs = Array.from({ length: xBinQty }, (v, i) =>\n          round(valToPosX(xs[i * yBinQty], scaleX, xDim, xOff) + xOffset)\n        );\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] > hideLE && counts[i] < hideGE) {\n            let cx = cxs[~~(i / yBinQty)];\n            let cy = cys[i % yBinQty];\n\n            let fillPath = fillPaths[fills[i]];\n\n            rect(fillPath, cx, cy, xSize, ySize);\n\n            each(u, 1, i, cx, cy, xSize, ySize);\n          }\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        return null;\n      }\n    );\n\n    return null;\n  };\n}\n\nexport function heatmapPathsPoints(opts: PointsBuilderOpts, exemplarColor: string, yLayout?: HeatmapCellLayout) {\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let points = new Path2D();\n        let fillPaths = [points];\n        let fillPalette = [exemplarColor ?? 'rgba(255,0,255,0.7)'];\n\n        let yShift = yLayout === HeatmapCellLayout.le ? -0.5 : yLayout === HeatmapCellLayout.ge ? 0.5 : 0;\n\n        for (let i = 0; i < dataX.length; i++) {\n          let yVal = dataY[i]!;\n\n          // this is a hacky by-proxy check\n          // works okay since we have no exemplars in calculated heatmaps and...\n          //  - heatmap-rows has ordinal y\n          //  - heatmap-cells has log2 y\n          let isSparseHeatmap = scaleY.distr === 3 && scaleY.log === 2;\n\n          if (!isSparseHeatmap) {\n            yVal += yShift;\n          }\n\n          let x = valToPosX(dataX[i], scaleX, xDim, xOff);\n          let y = valToPosY(yVal, scaleY, yDim, yOff);\n          let w = 8;\n          let h = 8;\n\n          rect(points, x - w / 2, y - h / 2, w, h);\n\n          opts.each(u, seriesIdx, i, x - w / 2, y - h / 2, w, h);\n        }\n\n        u.ctx.save();\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n      }\n    );\n\n    return null;\n  };\n}\n// accepts xMax, yMin, yMax, count\n// xbinsize? x tile sizes are uniform?\nexport function heatmapPathsSparse(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let d = u.data[seriesIdx];\n        const xMaxs = d[0] as unknown as number[]; // xMax, do we get interval?\n        const yMins = d[1] as unknown as number[];\n        const yMaxs = d[2] as unknown as number[];\n        const counts = d[3] as unknown as number[];\n        const dlen = xMaxs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // cache all tile bounds\n        let xOffs = new Map();\n        let yOffs = new Map();\n\n        for (let i = 0; i < xMaxs.length; i++) {\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          if (!xOffs.has(xMax)) {\n            xOffs.set(xMax, round(valToPosX(xMax, scaleX, xDim, xOff)));\n          }\n\n          if (!yOffs.has(yMin)) {\n            yOffs.set(yMin, round(valToPosY(yMin, scaleY, yDim, yOff)));\n          }\n\n          if (!yOffs.has(yMax)) {\n            yOffs.set(yMax, round(valToPosY(yMax, scaleY, yDim, yOff)));\n          }\n        }\n\n        // uniform x size (interval, step)\n        let xSizeUniform = xOffs.get(xMaxs.find((v) => v !== xMaxs[0])) - xOffs.get(xMaxs[0]);\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] <= hideLE || counts[i] >= hideGE) {\n            continue;\n          }\n\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          let xMaxPx = xOffs.get(xMax); // xSize is from interval, or inferred delta?\n          let yMinPx = yOffs.get(yMin);\n          let yMaxPx = yOffs.get(yMax);\n\n          let xSize = xSizeUniform;\n          let ySize = yMinPx - yMaxPx;\n\n          // clamp min tile size to 1px\n          xSize = Math.max(1, xSize - cellGap);\n          ySize = Math.max(1, ySize - cellGap);\n\n          let x = xMaxPx - cellGap / 2 - xSize;\n          let y = yMaxPx + cellGap / 2;\n\n          let fillPath = fillPaths[fills[i]];\n\n          rect(fillPath, x, y, xSize, ySize);\n\n          each(u, 1, i, x, y, xSize, ySize);\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        //console.timeEnd('heatmapPathsSparse');\n      }\n    );\n\n    return null;\n  };\n}\n\nexport const boundedMinMax = (\n  values: number[],\n  minValue?: number,\n  maxValue?: number,\n  hideLE = -Infinity,\n  hideGE = Infinity\n) => {\n  if (minValue == null) {\n    minValue = Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        minValue = Math.min(minValue, values[i]);\n      }\n    }\n  }\n\n  if (maxValue == null) {\n    maxValue = -Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        maxValue = Math.max(maxValue, values[i]);\n      }\n    }\n  }\n\n  return [minValue, maxValue];\n};\n\nexport const valuesToFills = (values: number[], palette: string[], minValue: number, maxValue: number): number[] => {\n  let range = maxValue - minValue || 1;\n\n  let paletteSize = palette.length;\n\n  let indexedFills = Array(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    indexedFills[i] =\n      values[i] < minValue\n        ? 0\n        : values[i] > maxValue\n          ? paletteSize - 1\n          : Math.min(paletteSize - 1, Math.floor((paletteSize * (values[i] - minValue)) / range));\n  }\n\n  return indexedFills;\n};\n"],"names":["stops","_a","_b","scrollTop","_c","_d","opts","scheme","_e"],"sourceRoot":""}