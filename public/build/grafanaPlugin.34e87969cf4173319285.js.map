{"version":3,"file":"grafanaPlugin.34e87969cf4173319285.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/grafana/components/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana/components/SearchEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana/module.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { PureComponent } from 'react';\nimport { DropEvent, FileRejection } from 'react-dropzone';\n\nimport {\n  QueryEditorProps,\n  SelectableValue,\n  rangeUtil,\n  DataQueryRequest,\n  DataFrameJSON,\n  dataFrameToJSON,\n  GrafanaTheme2,\n  getValueFormat,\n  formattedValueToString,\n  Field,\n} from '@grafana/data';\nimport { config, getDataSourceSrv, reportInteraction } from '@grafana/runtime';\nimport {\n  InlineField,\n  Select,\n  Alert,\n  Input,\n  InlineFieldRow,\n  InlineLabel,\n  FileDropzone,\n  FileDropzoneDefaultChildren,\n  DropzoneFile,\n  Themeable2,\n  withTheme2,\n  Stack,\n} from '@grafana/ui';\nimport { hasAlphaPanels } from '../../../../core/config';\nimport * as DFImport from '../../../../features/dataframe-import';\nimport { getManagedChannelInfo } from '../../../../features/live/info';\nimport { SearchQuery } from '../../../../features/search/service';\n\nimport { GrafanaDatasource } from '../datasource';\nimport { defaultQuery, GrafanaQuery, GrafanaQueryType } from '../types';\n\nimport SearchEditor from './SearchEditor';\n\ninterface Props extends QueryEditorProps<GrafanaDatasource, GrafanaQuery>, Themeable2 {}\n\nconst labelWidth = 12;\n\ninterface State {\n  channels: Array<SelectableValue<string>>;\n  channelFields: Record<string, Array<SelectableValue<string>>>;\n  folders?: Array<SelectableValue<string>>;\n}\n\nexport class UnthemedQueryEditor extends PureComponent<Props, State> {\n  state: State = { channels: [], channelFields: {} };\n\n  queryTypes: Array<SelectableValue<GrafanaQueryType>> = [\n    {\n      label: 'Random Walk',\n      value: GrafanaQueryType.RandomWalk,\n      description: 'Random signal within the selected time range',\n    },\n    {\n      label: 'Live Measurements',\n      value: GrafanaQueryType.LiveMeasurements,\n      description: 'Stream real-time measurements from Grafana',\n    },\n    {\n      label: 'List public files',\n      value: GrafanaQueryType.List,\n      description: 'Show directory listings for public resources',\n    },\n  ];\n\n  constructor(props: Props) {\n    super(props);\n\n    if (config.featureToggles.panelTitleSearch && hasAlphaPanels) {\n      this.queryTypes.push({\n        label: 'Search',\n        value: GrafanaQueryType.Search,\n        description: 'Search for grafana resources',\n      });\n    }\n    if (config.featureToggles.editPanelCSVDragAndDrop) {\n      this.queryTypes.push({\n        label: 'Spreadsheet or snapshot',\n        value: GrafanaQueryType.Snapshot,\n        description: 'Query an uploaded spreadsheet or a snapshot',\n      });\n    }\n  }\n\n  loadChannelInfo() {\n    getManagedChannelInfo().then((v) => {\n      this.setState(v);\n    });\n  }\n\n  loadFolderInfo() {\n    const query: DataQueryRequest<GrafanaQuery> = {\n      targets: [{ queryType: GrafanaQueryType.List, refId: 'A' }],\n    } as any;\n\n    getDataSourceSrv()\n      .get('-- Grafana --')\n      .then((ds) => {\n        const gds = ds as GrafanaDatasource;\n        gds.query(query).subscribe({\n          next: (rsp) => {\n            if (rsp.data.length) {\n              const names: Field = rsp.data[0].fields[0];\n              const folders = names.values.map((v) => ({\n                value: v,\n                label: v,\n              }));\n              this.setState({ folders });\n            }\n          },\n        });\n      });\n  }\n\n  componentDidMount() {\n    this.loadChannelInfo();\n  }\n\n  onQueryTypeChange = (sel: SelectableValue<GrafanaQueryType>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, queryType: sel.value! });\n    onRunQuery();\n\n    // Reload the channel list\n    this.loadChannelInfo();\n  };\n\n  onChannelChange = (sel: SelectableValue<string>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, channel: sel?.value });\n    onRunQuery();\n  };\n\n  onFieldNamesChange = (item: SelectableValue<string>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    let fields: string[] = [];\n    if (Array.isArray(item)) {\n      fields = item.map((v) => v.value);\n    } else if (item.value) {\n      fields = [item.value];\n    }\n\n    // When adding the first field, also add time (if it exists)\n    if (fields.length === 1 && !query.filter?.fields?.length && query.channel) {\n      const names = this.state.channelFields[query.channel] ?? [];\n      const tf = names.find((f) => f.value === 'time' || f.value === 'Time');\n      if (tf && tf.value && tf.value !== fields[0]) {\n        fields = [tf.value, ...fields];\n      }\n    }\n\n    onChange({\n      ...query,\n      filter: {\n        ...query.filter,\n        fields,\n      },\n    });\n    onRunQuery();\n  };\n\n  checkAndUpdateValue = (key: keyof GrafanaQuery, txt: string) => {\n    const { onChange, query, onRunQuery } = this.props;\n    if (key === 'buffer') {\n      let buffer: number | undefined;\n      if (txt) {\n        try {\n          buffer = rangeUtil.intervalToSeconds(txt) * 1000;\n        } catch (err) {\n          console.warn('ERROR', err);\n        }\n      }\n      onChange({\n        ...query,\n        buffer,\n      });\n    } else {\n      onChange({\n        ...query,\n        [key]: txt,\n      });\n    }\n    onRunQuery();\n  };\n\n  handleEnterKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n    this.checkAndUpdateValue('buffer', e.currentTarget.value);\n  };\n\n  handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    this.checkAndUpdateValue('buffer', e.currentTarget.value);\n  };\n\n  renderMeasurementsQuery() {\n    let { channel, filter, buffer } = this.props.query;\n    let { channels, channelFields } = this.state;\n    let currentChannel = channels.find((c) => c.value === channel);\n    if (channel && !currentChannel) {\n      currentChannel = {\n        value: channel,\n        label: channel,\n        description: `Connected to ${channel}`,\n      };\n      channels = [currentChannel, ...channels];\n    }\n\n    const distinctFields = new Set<string>();\n    const fields: Array<SelectableValue<string>> = channel ? channelFields[channel] ?? [] : [];\n    // if (data && data.series?.length) {\n    //   for (const frame of data.series) {\n    //     for (const field of frame.fields) {\n    //       if (distinctFields.has(field.name) || !field.name) {\n    //         continue;\n    //       }\n    //       fields.push({\n    //         value: field.name,\n    //         label: field.name,\n    //         description: `(${getFrameDisplayName(frame)} / ${field.type})`,\n    //       });\n    //       distinctFields.add(field.name);\n    //     }\n    //   }\n    // }\n    if (filter?.fields) {\n      for (const f of filter.fields) {\n        if (!distinctFields.has(f)) {\n          fields.push({\n            value: f,\n            label: `${f} (not loaded)`,\n            description: `Configured, but not found in the query results`,\n          });\n          distinctFields.add(f);\n        }\n      }\n    }\n\n    let formattedTime = '';\n    if (buffer) {\n      formattedTime = rangeUtil.secondsToHms(buffer / 1000);\n    }\n\n    return (\n      <>\n        <InlineField label=\"Channel\" grow={true} labelWidth={labelWidth}>\n          <Select\n            options={channels}\n            value={currentChannel || ''}\n            onChange={this.onChannelChange}\n            allowCustomValue={true}\n            backspaceRemovesValue={true}\n            placeholder=\"Select measurements channel\"\n            isClearable={true}\n            noOptionsMessage=\"Enter channel name\"\n            formatCreateLabel={(input: string) => `Connect to: ${input}`}\n          />\n        </InlineField>\n\n        {channel && (\n          <Stack direction=\"row\" gap={0}>\n            <InlineField label=\"Fields\" grow={true} labelWidth={labelWidth}>\n              <Select\n                options={fields}\n                value={filter?.fields || []}\n                onChange={this.onFieldNamesChange}\n                allowCustomValue={true}\n                backspaceRemovesValue={true}\n                placeholder=\"All fields\"\n                isClearable={true}\n                noOptionsMessage=\"Unable to list all fields\"\n                formatCreateLabel={(input: string) => `Field: ${input}`}\n                isSearchable={true}\n                isMulti={true}\n              />\n            </InlineField>\n            <InlineField label=\"Buffer\">\n              <Input\n                placeholder=\"Auto\"\n                width={12}\n                defaultValue={formattedTime}\n                onKeyDown={this.handleEnterKey}\n                onBlur={this.handleBlur}\n                spellCheck={false}\n              />\n            </InlineField>\n          </Stack>\n        )}\n\n        <Alert title=\"Grafana Live - Measurements\" severity=\"info\">\n          This supports real-time event streams in Grafana core. This feature is under heavy development. Expect the\n          interfaces and structures to change as this becomes more production ready.\n        </Alert>\n      </>\n    );\n  }\n\n  onFolderChanged = (sel: SelectableValue<string>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, path: sel?.value });\n    onRunQuery();\n  };\n\n  renderListPublicFiles() {\n    let { path } = this.props.query;\n    let { folders } = this.state;\n    if (!folders) {\n      folders = [];\n      this.loadFolderInfo();\n    }\n    const currentFolder = folders.find((f) => f.value === path);\n    if (path && !currentFolder) {\n      folders = [\n        ...folders,\n        {\n          value: path,\n          label: path,\n        },\n      ];\n    }\n\n    return (\n      <InlineFieldRow>\n        <InlineField label=\"Path\" grow={true} labelWidth={labelWidth}>\n          <Select\n            options={folders}\n            value={currentFolder || ''}\n            onChange={this.onFolderChanged}\n            allowCustomValue={true}\n            backspaceRemovesValue={true}\n            placeholder=\"Select folder\"\n            isClearable={true}\n            formatCreateLabel={(input: string) => `Folder: ${input}`}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    );\n  }\n\n  // Skip rendering the file list as we're handling that in this component instead.\n  fileListRenderer = (file: DropzoneFile, removeFile: (file: DropzoneFile) => void) => {\n    return null;\n  };\n\n  onFileDrop = (acceptedFiles: File[], fileRejections: FileRejection[], event: DropEvent) => {\n    DFImport.filesToDataframes(acceptedFiles).subscribe((next) => {\n      const snapshot: DataFrameJSON[] = [];\n      next.dataFrames.forEach((df) => {\n        const dataframeJson = dataFrameToJSON(df);\n        snapshot.push(dataframeJson);\n      });\n      this.props.onChange({\n        ...this.props.query,\n        file: { name: next.file.name, size: next.file.size },\n        queryType: GrafanaQueryType.Snapshot,\n        snapshot,\n      });\n      this.props.onRunQuery();\n\n      reportInteraction('grafana_datasource_drop_files', {\n        number_of_files: fileRejections.length + acceptedFiles.length,\n        accepted_files: acceptedFiles.map((a) => {\n          return { type: a.type, size: a.size };\n        }),\n        rejected_files: fileRejections.map((r) => {\n          return { type: r.file.type, size: r.file.size };\n        }),\n      });\n    });\n  };\n\n  renderSnapshotQuery() {\n    const { query, theme } = this.props;\n    const file = query.file;\n    const styles = getStyles(theme);\n    const fileSize = getValueFormat('decbytes')(file ? file.size : 0);\n\n    return (\n      <>\n        <InlineFieldRow>\n          <InlineField label=\"Snapshot\" grow={true} labelWidth={labelWidth}>\n            <InlineLabel>{pluralize('frame', query.snapshot?.length ?? 0, true)}</InlineLabel>\n          </InlineField>\n        </InlineFieldRow>\n        {config.featureToggles.editPanelCSVDragAndDrop && (\n          <>\n            <FileDropzone\n              readAs=\"readAsArrayBuffer\"\n              fileListRenderer={this.fileListRenderer}\n              options={{\n                onDrop: this.onFileDrop,\n                maxSize: DFImport.maxFileSize,\n                multiple: false,\n                accept: DFImport.acceptedFiles,\n              }}\n            >\n              <FileDropzoneDefaultChildren\n                primaryText={this.props?.query?.file ? 'Replace file' : 'Drop file here or click to upload'}\n              />\n            </FileDropzone>\n            {file && (\n              <div className={styles.file}>\n                <span>{file?.name}</span>\n                <span>\n                  <span>{formattedValueToString(fileSize)}</span>\n                </span>\n              </div>\n            )}\n          </>\n        )}\n      </>\n    );\n  }\n\n  onSearchChange = (search: SearchQuery) => {\n    const { query, onChange, onRunQuery } = this.props;\n\n    onChange({\n      ...query,\n      search,\n    });\n    onRunQuery();\n  };\n\n  render() {\n    const query = {\n      ...defaultQuery,\n      ...this.props.query,\n    };\n\n    const { queryType } = query;\n\n    // Only show \"snapshot\" when it already exists\n    let queryTypes = this.queryTypes;\n    if (queryType === GrafanaQueryType.Snapshot && !config.featureToggles.editPanelCSVDragAndDrop) {\n      queryTypes = [\n        ...this.queryTypes,\n        {\n          label: 'Snapshot',\n          value: queryType,\n        },\n      ];\n    }\n\n    return (\n      <>\n        {queryType === GrafanaQueryType.Search && (\n          <Alert title=\"Grafana Search\" severity=\"info\">\n            Using this datasource to call the new search system is experimental, and subject to change at any time\n            without notice.\n          </Alert>\n        )}\n        <InlineFieldRow>\n          <InlineField label=\"Query type\" grow={true} labelWidth={labelWidth}>\n            <Select\n              options={queryTypes}\n              value={queryTypes.find((v) => v.value === queryType) || queryTypes[0]}\n              onChange={this.onQueryTypeChange}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        {queryType === GrafanaQueryType.LiveMeasurements && this.renderMeasurementsQuery()}\n        {queryType === GrafanaQueryType.List && this.renderListPublicFiles()}\n        {queryType === GrafanaQueryType.Snapshot && this.renderSnapshotQuery()}\n        {queryType === GrafanaQueryType.Search && (\n          <SearchEditor value={query.search ?? {}} onChange={this.onSearchChange} />\n        )}\n      </>\n    );\n  }\n}\n\nexport const QueryEditor = withTheme2(UnthemedQueryEditor);\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    file: css`\n      width: 100%;\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      justify-content: space-between;\n      padding: ${theme.spacing(2)};\n      border: 1px dashed ${theme.colors.border.medium};\n      background-color: ${theme.colors.background.secondary};\n      margin-top: ${theme.spacing(1)};\n    `,\n  };\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { InlineField, Input, InlineFieldRow, CodeEditor } from '@grafana/ui';\nimport { SearchQuery } from '../../../../features/search/service';\n\ninterface Props {\n  value: SearchQuery;\n  onChange: (value: SearchQuery) => void;\n}\n\nexport default function SearchEditor({ value, onChange }: Props) {\n  const [json, setJSON] = useState('');\n  const [query, setQuery] = useState(value.query ?? '');\n\n  useEffect(() => {\n    const emptySearchQuery: SearchQuery = {\n      query: '*',\n      location: '', // general, etc\n      ds_uid: '',\n      sort: '',\n      tags: [],\n      kind: [],\n      explain: false,\n      facet: [{ field: 'kind' }, { field: 'tags' }],\n      from: 0,\n      limit: 20,\n    };\n\n    setJSON(JSON.stringify({ ...emptySearchQuery, ...value }, null, 2));\n  }, [value]);\n\n  const handleSearchBlur = () => {\n    if (query !== value.query) {\n      onChange({ ...value, query });\n    }\n  };\n\n  const handleSearchEnterKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n    handleSearchBlur();\n  };\n\n  const onSaveSearchJSON = (rawSearchJSON: string) => {\n    try {\n      const searchQuery: SearchQuery = JSON.parse(rawSearchJSON);\n      onChange(searchQuery);\n      setQuery(searchQuery.query ?? '');\n    } catch (ex) {\n      console.log('UNABLE TO parse search', rawSearchJSON, ex);\n    }\n  };\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Query\" grow={true} labelWidth={12}>\n          <Input\n            placeholder=\"Everything\"\n            value={query}\n            onChange={(e) => setQuery(e.currentTarget.value)}\n            onKeyDown={handleSearchEnterKey}\n            onBlur={handleSearchBlur}\n            spellCheck={false}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <CodeEditor\n        height={300}\n        language=\"json\"\n        value={json}\n        onBlur={onSaveSearchJSON}\n        onSave={onSaveSearchJSON}\n        showMiniMap={false}\n        showLineNumbers={true}\n      />\n    </>\n  );\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { QueryEditor } from './components/QueryEditor';\nimport { GrafanaDatasource } from './datasource';\nimport { GrafanaQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<GrafanaDatasource, GrafanaQuery>(GrafanaDatasource).setQueryEditor(\n  QueryEditor\n);\n"],"names":["_a"],"sourceRoot":""}