{"version":3,"file":"xychart.4ca53c1d0cfaf7cb1e2b.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Layers/LayerName.tsx","webpack://grafana/./public/app/features/dimensions/editors/ColorDimensionEditor.tsx","webpack://grafana/./public/app/features/dimensions/editors/IconSelector.tsx","webpack://grafana/./public/app/features/dimensions/editors/ResourceDimensionEditor.tsx","webpack://grafana/./public/app/features/dimensions/editors/ScalarDimensionEditor.tsx","webpack://grafana/./public/app/features/dimensions/editors/ScaleDimensionEditor.tsx","webpack://grafana/./public/app/features/dimensions/editors/TextDimensionEditor.tsx","webpack://grafana/./public/app/features/dimensions/editors/index.ts","webpack://grafana/./public/app/plugins/panel/xychart/AutoEditor.tsx","webpack://grafana/./public/app/plugins/panel/xychart/ManualEditor.tsx","webpack://grafana/./public/app/plugins/panel/xychart/ScatterSeriesEditor.tsx","webpack://grafana/./public/app/plugins/panel/xychart/XYChartPanel.tsx","webpack://grafana/./public/app/plugins/panel/xychart/XYChartTooltip.tsx","webpack://grafana/./public/app/plugins/panel/xychart/config.ts","webpack://grafana/./public/app/plugins/panel/xychart/dims.ts","webpack://grafana/./public/app/plugins/panel/xychart/module.tsx","webpack://grafana/./public/app/plugins/panel/xychart/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/xychart/scatter.ts"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Input, FieldValidationMessage, useStyles2 } from '@grafana/ui';\n\nexport interface LayerNameProps {\n  name: string;\n  onChange: (v: string) => void;\n  verifyLayerNameUniqueness?: (nameToCheck: string) => boolean;\n  overrideStyles?: boolean;\n}\n\nexport const LayerName = ({ name, onChange, verifyLayerNameUniqueness, overrideStyles }: LayerNameProps) => {\n  const styles = useStyles2(getStyles);\n\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  const onEditLayer = (event: React.SyntheticEvent) => {\n    setIsEditing(true);\n  };\n\n  const onEndEditName = (newName: string) => {\n    setIsEditing(false);\n\n    if (validationError) {\n      setValidationError(null);\n      return;\n    }\n\n    if (name !== newName) {\n      onChange(newName);\n    }\n  };\n\n  const onInputChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    const newName = event.currentTarget.value.trim();\n\n    if (newName.length === 0) {\n      setValidationError('An empty layer name is not allowed');\n      return;\n    }\n\n    if (verifyLayerNameUniqueness && !verifyLayerNameUniqueness(newName) && newName !== name) {\n      setValidationError('Layer name already exists');\n      return;\n    }\n\n    if (validationError) {\n      setValidationError(null);\n    }\n  };\n\n  const onEditLayerBlur = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    onEndEditName(event.currentTarget.value.trim());\n  };\n\n  const onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      onEndEditName(event.currentTarget.value);\n    }\n  };\n\n  const onFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    event.target.select();\n  };\n\n  return (\n    <>\n      <div className={styles.wrapper}>\n        {!isEditing && (\n          <button\n            className={styles.layerNameWrapper}\n            title=\"Edit layer name\"\n            onClick={onEditLayer}\n            data-testid=\"layer-name-div\"\n          >\n            <span className={overrideStyles ? '' : styles.layerName}>{name}</span>\n            <Icon name=\"pen\" className={styles.layerEditIcon} size=\"sm\" />\n          </button>\n        )}\n\n        {isEditing && (\n          <>\n            <Input\n              type=\"text\"\n              defaultValue={name}\n              onBlur={onEditLayerBlur}\n              autoFocus\n              onKeyDown={onKeyDown}\n              onFocus={onFocus}\n              invalid={validationError !== null}\n              onChange={onInputChange}\n              className={styles.layerNameInput}\n              data-testid=\"layer-name-input\"\n            />\n            {validationError && <FieldValidationMessage horizontal>{validationError}</FieldValidationMessage>}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      label: 'Wrapper',\n      display: 'flex',\n      alignItems: 'center',\n      marginLeft: theme.spacing(0.5),\n    }),\n    layerNameWrapper: css({\n      display: 'flex',\n      cursor: 'pointer',\n      border: '1px solid transparent',\n      borderRadius: theme.shape.radius.default,\n      alignItems: 'center',\n      padding: `0 0 0 ${theme.spacing(0.5)}`,\n      margin: 0,\n      background: 'transparent',\n\n      '&:hover': {\n        background: theme.colors.action.hover,\n        border: `1px dashed ${theme.colors.border.strong}`,\n      },\n\n      '&:focus': {\n        border: `2px solid ${theme.colors.primary.border}`,\n      },\n\n      '&:hover, &:focus': {\n        '.query-name-edit-icon': {\n          visibility: 'visible',\n        },\n      },\n    }),\n    layerName: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      color: theme.colors.primary.text,\n      cursor: 'pointer',\n      overflow: 'hidden',\n      marginLeft: theme.spacing(0.5),\n    }),\n    layerEditIcon: cx(\n      css({\n        marginLeft: theme.spacing(2),\n        visibility: 'hidden',\n      }),\n      'query-name-edit-icon'\n    ),\n    layerNameInput: css({\n      maxWidth: '300px',\n      margin: '-4px 0',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, StandardEditorProps, FieldNamePickerBaseNameMode } from '@grafana/data';\nimport { ColorDimensionConfig } from '@grafana/schema';\nimport { Select, ColorPicker, useStyles2 } from '@grafana/ui';\nimport { useFieldDisplayNames, useSelectOptions } from '@grafana/ui/src/components/MatchersUI/utils';\n\nconst fixedColorOption: SelectableValue<string> = {\n  label: 'Fixed color',\n  value: '_____fixed_____',\n};\n\ninterface ColorDimensionSettings {\n  isClearable?: boolean;\n  baseNameMode?: FieldNamePickerBaseNameMode;\n  placeholder?: string;\n}\n\nexport const ColorDimensionEditor = (props: StandardEditorProps<ColorDimensionConfig, ColorDimensionSettings>) => {\n  const { value, context, onChange, item } = props;\n\n  const defaultColor = 'dark-green';\n\n  const styles = useStyles2(getStyles);\n  const fieldName = value?.field;\n  const isFixed = value && Boolean(!fieldName) && value?.fixed;\n  const names = useFieldDisplayNames(context.data);\n  const selectOptions = useSelectOptions(names, fieldName, fixedColorOption, undefined, item.settings?.baseNameMode);\n\n  const onSelectChange = useCallback(\n    (selection: SelectableValue<string>) => {\n      if (!selection) {\n        onChange(undefined);\n        return;\n      }\n\n      const field = selection.value;\n      if (field && field !== fixedColorOption.value) {\n        onChange({\n          ...value,\n          field,\n        });\n      } else {\n        const fixed = value?.fixed ?? defaultColor;\n        onChange({\n          ...value,\n          field: undefined,\n          fixed,\n        });\n      }\n    },\n    [onChange, value]\n  );\n\n  const onColorChange = useCallback(\n    (c: string) => {\n      onChange({\n        field: undefined,\n        fixed: c ?? defaultColor,\n      });\n    },\n    [onChange]\n  );\n\n  const selectedOption = isFixed ? fixedColorOption : selectOptions.find((v) => v.value === fieldName);\n  return (\n    <>\n      <div className={styles.container}>\n        <Select\n          value={selectedOption}\n          options={selectOptions}\n          onChange={onSelectChange}\n          noOptionsMessage=\"No fields found\"\n          isClearable={item.settings?.isClearable}\n          placeholder={item.settings?.placeholder}\n        />\n        {isFixed && (\n          <div className={styles.picker}>\n            <ColorPicker color={value?.fixed} onChange={onColorChange} enableNamedColors={true} />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n  `,\n  picker: css`\n    padding-left: 8px;\n  `,\n});\n","import React, { useState, useEffect } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Select } from '@grafana/ui';\n\ninterface Props {\n  value: string;\n  onChange: (v: string) => void;\n}\n\nconst IconSelector = ({ value, onChange }: Props) => {\n  const [icons, setIcons] = useState<SelectableValue[]>(value ? [{ value, label: value }] : []);\n  const [icon, setIcon] = useState<string>();\n  const iconRoot = window.__grafana_public_path__ + 'img/icons/unicons/';\n  const onChangeIcon = (value: string) => {\n    onChange(value);\n    setIcon(value);\n  };\n  useEffect(() => {\n    getBackendSrv()\n      .get(`${iconRoot}/index.json`)\n      .then((data) => {\n        setIcons(\n          data.files.map((icon: string) => ({\n            value: icon,\n            label: icon,\n          }))\n        );\n      });\n  }, [iconRoot]);\n  return (\n    <Select\n      options={icons}\n      value={icon}\n      onChange={(selectedValue) => {\n        onChangeIcon(selectedValue.value!);\n      }}\n    />\n  );\n};\n\nexport default IconSelector;\n","import React, { useCallback } from 'react';\n\nimport { FieldNamePickerConfigSettings, StandardEditorProps, StandardEditorsRegistryItem } from '@grafana/data';\nimport { ResourceDimensionConfig, ResourceDimensionMode } from '@grafana/schema';\nimport { InlineField, InlineFieldRow, RadioButtonGroup } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\n\nimport { getPublicOrAbsoluteUrl, ResourceFolderName } from '..';\nimport { MediaType, ResourceDimensionOptions, ResourcePickerSize } from '../types';\n\nimport { ResourcePicker } from './ResourcePicker';\n\nconst resourceOptions = [\n  { label: 'Fixed', value: ResourceDimensionMode.Fixed, description: 'Fixed value' },\n  { label: 'Field', value: ResourceDimensionMode.Field, description: 'Use a string field result' },\n  //  { label: 'Mapping', value: ResourceDimensionMode.Mapping, description: 'Map the results of a value to an svg' },\n];\n\nconst dummyFieldSettings = {\n  settings: {},\n} as StandardEditorsRegistryItem<string, FieldNamePickerConfigSettings>;\n\nexport const ResourceDimensionEditor = (\n  props: StandardEditorProps<ResourceDimensionConfig, ResourceDimensionOptions, unknown>\n) => {\n  const { value, context, onChange, item } = props;\n  const labelWidth = 9;\n\n  const onModeChange = useCallback(\n    (mode: ResourceDimensionMode) => {\n      onChange({\n        ...value,\n        mode,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onFieldChange = useCallback(\n    (field = '') => {\n      onChange({\n        ...value,\n        field,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onFixedChange = useCallback(\n    (fixed?: string) => {\n      onChange({\n        ...value,\n        fixed: fixed ?? '',\n      });\n    },\n    [onChange, value]\n  );\n\n  const onClear = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onChange({ mode: ResourceDimensionMode.Fixed, fixed: '', field: '' });\n  };\n\n  const mode = value?.mode ?? ResourceDimensionMode.Fixed;\n  const showSourceRadio = item.settings?.showSourceRadio ?? true;\n  const mediaType = item.settings?.resourceType ?? MediaType.Icon;\n  const folderName = item.settings?.folderName ?? ResourceFolderName.Icon;\n  const maxFiles = item.settings?.maxFiles; // undefined leads to backend default\n  let srcPath = '';\n  if (mediaType === MediaType.Icon) {\n    if (value?.fixed) {\n      srcPath = getPublicOrAbsoluteUrl(value.fixed);\n    } else if (item.settings?.placeholderValue) {\n      srcPath = getPublicOrAbsoluteUrl(item.settings.placeholderValue);\n    }\n  }\n\n  return (\n    <>\n      {showSourceRadio && (\n        <InlineFieldRow>\n          <InlineField label=\"Source\" labelWidth={labelWidth} grow={true}>\n            <RadioButtonGroup value={mode} options={resourceOptions} onChange={onModeChange} fullWidth />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n      {mode !== ResourceDimensionMode.Fixed && (\n        <InlineFieldRow>\n          <InlineField label=\"Field\" labelWidth={labelWidth} grow={true}>\n            <FieldNamePicker\n              context={context}\n              value={value.field ?? ''}\n              onChange={onFieldChange}\n              item={dummyFieldSettings}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n      {mode === ResourceDimensionMode.Fixed && (\n        <ResourcePicker\n          onChange={onFixedChange}\n          onClear={onClear}\n          value={value?.fixed}\n          src={srcPath}\n          placeholder={item.settings?.placeholderText ?? 'Select a value'}\n          name={niceName(value?.fixed) ?? ''}\n          mediaType={mediaType}\n          folderName={folderName}\n          size={ResourcePickerSize.NORMAL}\n          maxFiles={maxFiles}\n        />\n      )}\n      {mode === ResourceDimensionMode.Mapping && (\n        <InlineFieldRow>\n          <InlineField label=\"Mappings\" labelWidth={labelWidth} grow={true}>\n            <div>TODO mappings editor!</div>\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n\nexport function niceName(value?: string): string | undefined {\n  if (!value) {\n    return undefined;\n  }\n  const idx = value.lastIndexOf('/');\n  if (idx > 0) {\n    return value.substring(idx + 1);\n  }\n  return value;\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\n\nimport { FieldType, GrafanaTheme2, SelectableValue, StandardEditorProps } from '@grafana/data';\nimport { ScalarDimensionMode, ScalarDimensionConfig } from '@grafana/schema';\nimport { InlineField, InlineFieldRow, RadioButtonGroup, Select, useStyles2 } from '@grafana/ui';\nimport { useFieldDisplayNames, useSelectOptions } from '@grafana/ui/src/components/MatchersUI/utils';\nimport { NumberInput } from '../../../core/components/OptionsUI/NumberInput';\n\nimport { ScalarDimensionOptions } from '../types';\n\nconst fixedValueOption: SelectableValue<string> = {\n  label: 'Fixed value',\n  value: '_____fixed_____',\n};\n\nconst scalarOptions = [\n  { label: 'Mod', value: ScalarDimensionMode.Mod, description: 'Use field values, mod from max' },\n  { label: 'Clamped', value: ScalarDimensionMode.Clamped, description: 'Use field values, clamped to max and min' },\n];\n\ntype Props = StandardEditorProps<ScalarDimensionConfig, ScalarDimensionOptions>;\n\nexport const ScalarDimensionEditor = ({ value, context, onChange, item }: Props) => {\n  const { settings } = item;\n\n  const DEFAULT_VALUE = 0;\n\n  const fieldName = value?.field;\n  const isFixed = Boolean(!fieldName);\n  const names = useFieldDisplayNames(context.data);\n  const selectOptions = useSelectOptions(names, fieldName, fixedValueOption, FieldType.number);\n\n  const styles = useStyles2(getStyles);\n\n  const onSelectChange = useCallback(\n    (selection: SelectableValue<string>) => {\n      const field = selection.value;\n      if (field && field !== fixedValueOption.value) {\n        onChange({\n          ...value,\n          field,\n        });\n      } else {\n        const fixed = value.fixed ?? DEFAULT_VALUE;\n        onChange({\n          ...value,\n          field: undefined,\n          fixed,\n        });\n      }\n    },\n    [onChange, value]\n  );\n\n  const onModeChange = useCallback(\n    (mode: ScalarDimensionMode) => {\n      onChange({\n        ...value,\n        mode,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onValueChange = useCallback(\n    (v: number | undefined) => {\n      onChange({\n        ...value,\n        field: undefined,\n        fixed: v ?? DEFAULT_VALUE,\n      });\n    },\n    [onChange, value]\n  );\n\n  const val = value ?? {};\n  const mode = value?.mode ?? ScalarDimensionMode.Mod;\n  const selectedOption = isFixed ? fixedValueOption : selectOptions.find((v) => v.value === fieldName);\n  return (\n    <>\n      <div>\n        <InlineFieldRow>\n          <InlineField label=\"Limit\" labelWidth={8} grow={true}>\n            <RadioButtonGroup value={mode} options={scalarOptions} onChange={onModeChange} fullWidth />\n          </InlineField>\n        </InlineFieldRow>\n        <Select\n          value={selectedOption}\n          options={selectOptions}\n          onChange={onSelectChange}\n          noOptionsMessage=\"No fields found\"\n        />\n      </div>\n      <div className={styles.range}>\n        {isFixed && (\n          <InlineFieldRow>\n            <InlineField label=\"Value\" labelWidth={8} grow={true}>\n              <NumberInput\n                value={val?.fixed ?? DEFAULT_VALUE}\n                onChange={onValueChange}\n                max={settings?.max}\n                min={settings?.min}\n              />\n            </InlineField>\n          </InlineFieldRow>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  range: css`\n    padding-top: 8px;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useCallback, useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, StandardEditorProps } from '@grafana/data';\nimport { ScaleDimensionConfig } from '@grafana/schema';\nimport { InlineField, InlineFieldRow, Select, useStyles2 } from '@grafana/ui';\nimport { useFieldDisplayNames, useSelectOptions } from '@grafana/ui/src/components/MatchersUI/utils';\nimport { NumberInput } from '../../../core/components/OptionsUI/NumberInput';\n\nimport { validateScaleOptions, validateScaleConfig } from '../scale';\nimport { ScaleDimensionOptions } from '../types';\n\nconst fixedValueOption: SelectableValue<string> = {\n  label: 'Fixed value',\n  value: '_____fixed_____',\n};\n\nexport const ScaleDimensionEditor = (props: StandardEditorProps<ScaleDimensionConfig, ScaleDimensionOptions>) => {\n  const { value, context, onChange, item } = props;\n  const { settings } = item;\n  const styles = useStyles2(getStyles);\n\n  const fieldName = value?.field;\n  const isFixed = Boolean(!fieldName);\n  const names = useFieldDisplayNames(context.data);\n  const selectOptions = useSelectOptions(names, fieldName, fixedValueOption, settings?.filteredFieldType);\n  const minMaxStep = useMemo(() => {\n    return validateScaleOptions(settings);\n  }, [settings]);\n\n  // Validate and update\n  const validateAndDoChange = useCallback(\n    (v: ScaleDimensionConfig) => {\n      // always called with a copy so no need to spread\n      onChange(validateScaleConfig(v, minMaxStep));\n    },\n    [onChange, minMaxStep]\n  );\n\n  const onSelectChange = useCallback(\n    (selection: SelectableValue<string>) => {\n      const field = selection.value;\n      if (field && field !== fixedValueOption.value) {\n        validateAndDoChange({\n          ...value,\n          field,\n        });\n      } else {\n        validateAndDoChange({\n          ...value,\n          field: undefined,\n        });\n      }\n    },\n    [validateAndDoChange, value]\n  );\n\n  const onMinChange = useCallback(\n    (min?: number) => {\n      if (min !== undefined) {\n        validateAndDoChange({\n          ...value,\n          min,\n        });\n      }\n    },\n    [validateAndDoChange, value]\n  );\n\n  const onMaxChange = useCallback(\n    (max?: number) => {\n      if (max !== undefined) {\n        validateAndDoChange({\n          ...value,\n          max,\n        });\n      }\n    },\n    [validateAndDoChange, value]\n  );\n\n  const onValueChange = useCallback(\n    (fixed?: number) => {\n      if (fixed !== undefined) {\n        validateAndDoChange({\n          ...value,\n          fixed,\n        });\n      }\n    },\n    [validateAndDoChange, value]\n  );\n\n  const val = value ?? {};\n  const selectedOption = isFixed ? fixedValueOption : selectOptions.find((v) => v.value === fieldName);\n  return (\n    <>\n      <div>\n        <Select\n          value={selectedOption}\n          options={selectOptions}\n          onChange={onSelectChange}\n          noOptionsMessage=\"No fields found\"\n        />\n      </div>\n      <div className={styles.range}>\n        {isFixed && (\n          <InlineFieldRow>\n            <InlineField label=\"Value\" labelWidth={8} grow={true}>\n              <NumberInput value={val.fixed} {...minMaxStep} onChange={onValueChange} />\n            </InlineField>\n          </InlineFieldRow>\n        )}\n        {!isFixed && !minMaxStep.hideRange && (\n          <>\n            <InlineFieldRow>\n              <InlineField label=\"Min\" labelWidth={8} grow={true}>\n                <NumberInput value={val.min} {...minMaxStep} onChange={onMinChange} />\n              </InlineField>\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <InlineField label=\"Max\" labelWidth={8} grow={true}>\n                <NumberInput value={val.max} {...minMaxStep} onChange={onMaxChange} />\n              </InlineField>\n            </InlineFieldRow>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  range: css`\n    padding-top: 8px;\n  `,\n});\n","import React, { useCallback } from 'react';\n\nimport {\n  FieldNamePickerConfigSettings,\n  StandardEditorProps,\n  StandardEditorsRegistryItem,\n  StringFieldConfigSettings,\n} from '@grafana/data';\nimport { TextDimensionConfig, TextDimensionMode } from '@grafana/schema';\nimport { Button, InlineField, InlineFieldRow, RadioButtonGroup } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { StringValueEditor } from '../../../core/components/OptionsUI/string';\n\nimport { TextDimensionOptions } from '../types';\n\nconst textOptions = [\n  { label: 'Fixed', value: TextDimensionMode.Fixed, description: 'Fixed value' },\n  { label: 'Field', value: TextDimensionMode.Field, description: 'Display field value' },\n  //  { label: 'Template', value: TextDimensionMode.Template, description: 'use template text' },\n];\n\nconst dummyFieldSettings = {\n  settings: {},\n} as StandardEditorsRegistryItem<string, FieldNamePickerConfigSettings>;\n\nconst dummyStringSettings = {\n  settings: {},\n} as StandardEditorsRegistryItem<string, StringFieldConfigSettings>;\n\ntype Props = StandardEditorProps<TextDimensionConfig, TextDimensionOptions>;\n\nexport const TextDimensionEditor = ({ value, context, onChange }: Props) => {\n  const labelWidth = 9;\n\n  const onModeChange = useCallback(\n    (mode: TextDimensionMode) => {\n      onChange({\n        ...value,\n        mode,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onFieldChange = useCallback(\n    (field?: string) => {\n      onChange({\n        ...value,\n        field,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onFixedChange = useCallback(\n    (fixed = '') => {\n      onChange({\n        ...value,\n        fixed,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onClearFixed = () => {\n    onFixedChange('');\n  };\n\n  const mode = value?.mode ?? TextDimensionMode.Fixed;\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Source\" labelWidth={labelWidth} grow={true}>\n          <RadioButtonGroup value={mode} options={textOptions} onChange={onModeChange} fullWidth />\n        </InlineField>\n      </InlineFieldRow>\n      {mode !== TextDimensionMode.Fixed && (\n        <InlineFieldRow>\n          <InlineField label=\"Field\" labelWidth={labelWidth} grow={true}>\n            <FieldNamePicker\n              context={context}\n              value={value.field ?? ''}\n              onChange={onFieldChange}\n              item={dummyFieldSettings}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n      {mode === TextDimensionMode.Fixed && (\n        <InlineFieldRow key={value?.fixed}>\n          <InlineField label={'Value'} labelWidth={labelWidth} grow={true}>\n            <StringValueEditor\n              context={context}\n              value={value?.fixed}\n              onChange={onFixedChange}\n              item={dummyStringSettings}\n              suffix={\n                value?.fixed && <Button icon=\"times\" variant=\"secondary\" fill=\"text\" size=\"sm\" onClick={onClearFixed} />\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n      {mode === TextDimensionMode.Template && (\n        <InlineFieldRow>\n          <InlineField label=\"Template\" labelWidth={labelWidth} grow={true}>\n            <StringValueEditor // This could be a code editor\n              context={context}\n              value={value?.fixed}\n              onChange={onFixedChange}\n              item={dummyStringSettings}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n","export * from './ColorDimensionEditor';\nexport * from './IconSelector';\nexport * from './ResourceDimensionEditor';\nexport * from './ScaleDimensionEditor';\nexport * from './ScalarDimensionEditor';\nexport * from './TextDimensionEditor';\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport {\n  SelectableValue,\n  getFrameDisplayName,\n  StandardEditorProps,\n  getFieldDisplayName,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { Field, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { getXYDimensions, isGraphable } from './dims';\nimport { XYDimensionConfig, Options } from './panelcfg.gen';\n\ninterface XYInfo {\n  numberFields: Array<SelectableValue<string>>;\n  xAxis?: SelectableValue<string>;\n  yFields: Array<SelectableValue<boolean>>;\n}\n\nexport const AutoEditor = ({ value, onChange, context }: StandardEditorProps<XYDimensionConfig, any, Options>) => {\n  const frameNames = useMemo(() => {\n    if (context?.data?.length) {\n      return context.data.map((f, idx) => ({\n        value: idx,\n        label: `${getFrameDisplayName(f, idx)} (index: ${idx}, rows: ${f.length})`,\n      }));\n    }\n    return [{ value: 0, label: 'First result' }];\n  }, [context.data]);\n\n  const dims = useMemo(() => getXYDimensions(value, context.data), [context.data, value]);\n\n  const info = useMemo(() => {\n    const v: XYInfo = {\n      numberFields: [],\n      yFields: [],\n      xAxis: value?.x\n        ? {\n            label: `${value.x} (Not found)`,\n            value: value.x, // empty\n          }\n        : undefined,\n    };\n    const frame = context.data ? context.data[value?.frame ?? 0] : undefined;\n    if (frame) {\n      const xName = 'x' in dims ? getFieldDisplayName(dims.x, dims.frame, context.data) : undefined;\n      for (let field of frame.fields) {\n        if (isGraphable(field)) {\n          const name = getFieldDisplayName(field, frame, context.data);\n          const sel = {\n            label: name,\n            value: name,\n          };\n          v.numberFields.push(sel);\n          if (value?.x && name === value.x) {\n            v.xAxis = sel;\n          }\n          if (xName !== name) {\n            v.yFields.push({\n              label: name,\n              value: value?.exclude?.includes(name),\n            });\n          }\n        }\n      }\n      if (!v.xAxis) {\n        v.xAxis = { label: xName, value: xName };\n      }\n    }\n\n    return v;\n  }, [dims, context.data, value]);\n\n  const styles = useStyles2(getStyles);\n\n  if (!context.data?.length) {\n    return <div>No data...</div>;\n  }\n\n  return (\n    <div>\n      <Field label={'Data'}>\n        <Select\n          isClearable={true}\n          options={frameNames}\n          placeholder={'Change filter'}\n          value={frameNames.find((v) => v.value === value?.frame)}\n          onChange={(v) => {\n            onChange({\n              ...value,\n              frame: v?.value!,\n              x: undefined,\n            });\n          }}\n        />\n      </Field>\n      <Field label={'X Field'}>\n        <Select\n          isClearable={true}\n          options={info.numberFields}\n          value={info.xAxis}\n          placeholder={`${info.numberFields?.[0].label} (First numeric)`}\n          onChange={(v) => {\n            onChange({\n              ...value,\n              x: v?.value,\n            });\n          }}\n        />\n      </Field>\n      <Field label={'Y Fields'}>\n        <div>\n          {info.yFields.map((v) => (\n            <div key={v.label} className={styles.row}>\n              <IconButton\n                name={v.value ? 'eye-slash' : 'eye'}\n                onClick={() => {\n                  const exclude: string[] = value?.exclude ? [...value.exclude] : [];\n                  let idx = exclude.indexOf(v.label!);\n                  if (idx < 0) {\n                    exclude.push(v.label!);\n                  } else {\n                    exclude.splice(idx, 1);\n                  }\n                  onChange({\n                    ...value,\n                    exclude,\n                  });\n                }}\n                tooltip={v.value ? 'Disable' : 'Enable'}\n              />\n              {v.label}\n            </div>\n          ))}\n        </div>\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  sorter: css`\n    margin-top: 10px;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    align-items: center;\n    cursor: pointer;\n  `,\n\n  row: css`\n    padding: ${theme.spacing(0.5, 1)};\n    border-radius: ${theme.shape.radius.default};\n    background: ${theme.colors.background.secondary};\n    min-height: ${theme.spacing(4)};\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    align-items: center;\n    margin-bottom: 3px;\n    border: 1px solid ${theme.components.input.borderColor};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { useState, useEffect, useMemo } from 'react';\n\nimport {\n  GrafanaTheme2,\n  StandardEditorProps,\n  FieldNamePickerBaseNameMode,\n  StandardEditorsRegistryItem,\n  getFrameDisplayName,\n} from '@grafana/data';\nimport { Button, Field, IconButton, Select, useStyles2 } from '@grafana/ui';\nimport { LayerName } from '../../../core/components/Layers/LayerName';\n\nimport { ScatterSeriesEditor } from './ScatterSeriesEditor';\nimport { Options, ScatterSeriesConfig, defaultFieldConfig } from './panelcfg.gen';\n\nexport const ManualEditor = ({\n  value,\n  onChange,\n  context,\n}: StandardEditorProps<ScatterSeriesConfig[], unknown, Options>) => {\n  const frameNames = useMemo(() => {\n    if (context?.data?.length) {\n      return context.data.map((frame, index) => ({\n        value: index,\n        label: `${getFrameDisplayName(frame, index)} (index: ${index}, rows: ${frame.length})`,\n      }));\n    }\n    return [{ value: 0, label: 'First result' }];\n  }, [context.data]);\n\n  const [selected, setSelected] = useState(0);\n  const style = useStyles2(getStyles);\n\n  const onFieldChange = (val: unknown | undefined, index: number, field: string) => {\n    onChange(\n      value.map((obj, i) => {\n        if (i === index) {\n          return { ...obj, [field]: val };\n        }\n        return obj;\n      })\n    );\n  };\n\n  const createNewSeries = () => {\n    onChange([\n      ...value,\n      {\n        pointColor: undefined,\n        pointSize: defaultFieldConfig.pointSize,\n      },\n    ]);\n    setSelected(value.length);\n  };\n\n  // Component-did-mount callback to check if a new series should be created\n  useEffect(() => {\n    if (!value?.length) {\n      createNewSeries(); // adds a new series\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onSeriesDelete = (index: number) => {\n    onChange(value.filter((_, i) => i !== index));\n  };\n\n  // const { options } = context;\n\n  const getRowStyle = (index: number) => {\n    return index === selected ? `${style.row} ${style.sel}` : style.row;\n  };\n\n  return (\n    <>\n      <Button icon=\"plus\" size=\"sm\" variant=\"secondary\" onClick={createNewSeries} className={style.marginBot}>\n        Add series\n      </Button>\n\n      <div className={style.marginBot}>\n        {value.map((series, index) => {\n          return (\n            <div\n              key={`series/${index}`}\n              className={getRowStyle(index)}\n              onClick={() => setSelected(index)}\n              role=\"button\"\n              aria-label={`Select series ${index + 1}`}\n              tabIndex={0}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  setSelected(index);\n                }\n              }}\n            >\n              <LayerName\n                name={series.name ?? `Series ${index + 1}`}\n                onChange={(v) => onFieldChange(v, index, 'name')}\n              />\n\n              <IconButton\n                name=\"trash-alt\"\n                title={'remove'}\n                className={cx(style.actionIcon)}\n                onClick={() => onSeriesDelete(index)}\n                tooltip=\"Delete series\"\n              />\n            </div>\n          );\n        })}\n      </div>\n\n      {selected >= 0 && value[selected] && (\n        <>\n          {frameNames.length > 1 && (\n            <Field label={'Data'}>\n              <Select\n                isClearable={false}\n                options={frameNames}\n                placeholder={'Change filter'}\n                value={\n                  frameNames.find((v) => {\n                    return v.value === value[selected].frame;\n                  }) ?? 0\n                }\n                onChange={(val) => {\n                  onChange(\n                    value.map((obj, i) => {\n                      if (i === selected) {\n                        if (val === null) {\n                          return { ...value[i], frame: undefined };\n                        }\n                        return { ...value[i], frame: val?.value!, x: undefined, y: undefined };\n                      }\n                      return obj;\n                    })\n                  );\n                }}\n              />\n            </Field>\n          )}\n          <ScatterSeriesEditor\n            key={`series/${selected}`}\n            baseNameMode={FieldNamePickerBaseNameMode.ExcludeBaseNames}\n            item={{} as StandardEditorsRegistryItem}\n            context={context}\n            value={value[selected]}\n            onChange={(val) => {\n              onChange(\n                value.map((obj, i) => {\n                  if (i === selected) {\n                    return val!;\n                  }\n                  return obj;\n                })\n              );\n            }}\n            frameFilter={value[selected].frame ?? undefined}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  marginBot: css({\n    marginBottom: '20px',\n  }),\n  row: css({\n    padding: `${theme.spacing(0.5, 1)}`,\n    borderRadius: `${theme.shape.radius.default}`,\n    background: `${theme.colors.background.secondary}`,\n    minHeight: `${theme.spacing(4)}`,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: '3px',\n    cursor: 'pointer',\n\n    border: `1px solid ${theme.components.input.borderColor}`,\n    '&:hover': {\n      border: `1px solid ${theme.components.input.borderHover}`,\n    },\n  }),\n  sel: css({\n    border: `1px solid ${theme.colors.primary.border}`,\n    '&:hover': {\n      border: `1px solid ${theme.colors.primary.border}`,\n    },\n  }),\n  actionIcon: css({\n    color: `${theme.colors.text.secondary}`,\n    '&:hover': {\n      color: `${theme.colors.text}`,\n    },\n  }),\n});\n","import React from 'react';\n\nimport { StandardEditorProps, FieldNamePickerBaseNameMode } from '@grafana/data';\nimport { Field } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { ColorDimensionEditor, ScaleDimensionEditor } from '../../../features/dimensions/editors';\n\nimport { Options, ScatterSeriesConfig } from './panelcfg.gen';\n\nexport interface Props extends StandardEditorProps<ScatterSeriesConfig, unknown, Options> {\n  baseNameMode: FieldNamePickerBaseNameMode;\n  frameFilter?: number;\n}\n\nexport const ScatterSeriesEditor = ({ value, onChange, context, baseNameMode, frameFilter = -1 }: Props) => {\n  const onFieldChange = (val: unknown | undefined, field: string) => {\n    onChange({ ...value, [field]: val });\n  };\n\n  const frame = context.data && frameFilter > -1 ? context.data[frameFilter] : undefined;\n\n  return (\n    <div>\n      <Field label={'X Field'}>\n        <FieldNamePicker\n          value={value.x ?? ''}\n          context={context}\n          onChange={(field) => onFieldChange(field, 'x')}\n          item={{\n            id: 'x',\n            name: 'x',\n            settings: {\n              filter: (field) =>\n                frame?.fields.some((obj) => obj.state?.displayName === field.state?.displayName) ?? true,\n              baseNameMode,\n              placeholderText: 'select X field',\n            },\n          }}\n        />\n      </Field>\n      <Field label={'Y Field'}>\n        <FieldNamePicker\n          value={value.y ?? ''}\n          context={context}\n          onChange={(field) => onFieldChange(field, 'y')}\n          item={{\n            id: 'y',\n            name: 'y',\n            settings: {\n              filter: (field) =>\n                frame?.fields.some((obj) => obj.state?.displayName === field.state?.displayName) ?? true,\n              baseNameMode,\n              placeholderText: 'select Y field',\n            },\n          }}\n        />\n      </Field>\n      <Field label={'Point color'}>\n        <ColorDimensionEditor\n          value={value.pointColor!}\n          context={context}\n          onChange={(field) => onFieldChange(field, 'pointColor')}\n          item={{\n            id: 'x',\n            name: 'x',\n            settings: {\n              baseNameMode,\n              isClearable: true,\n              placeholder: 'Use standard color scheme',\n            },\n          }}\n        />\n      </Field>\n      <Field label={'Point size'}>\n        <ScaleDimensionEditor\n          value={value.pointSize!}\n          context={context}\n          onChange={(field) => onFieldChange(field, 'pointSize')}\n          item={{\n            id: 'x',\n            name: 'x',\n            settings: {\n              min: 1,\n              max: 100,\n            },\n          }}\n        />\n      </Field>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { PanelProps } from '@grafana/data';\nimport { alpha } from '@grafana/data/src/themes/colorManipulator';\nimport { config } from '@grafana/runtime';\nimport {\n  TooltipDisplayMode,\n  TooltipPlugin2,\n  UPlotChart,\n  UPlotConfigBuilder,\n  useTheme2,\n  VizLayout,\n  VizLegend,\n  VizLegendItem,\n} from '@grafana/ui';\nimport { TooltipHoverMode } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin2';\nimport { FacetedData } from '@grafana/ui/src/components/uPlot/types';\nimport { getDisplayValuesForCalcs } from '@grafana/ui/src/components/uPlot/utils';\n\nimport { XYChartTooltip } from './XYChartTooltip';\nimport { Options, SeriesMapping } from './panelcfg.gen';\nimport { prepData, prepScatter, ScatterPanelInfo } from './scatter';\nimport { ScatterSeries } from './types';\n\ntype Props = PanelProps<Options>;\n\nexport const XYChartPanel = (props: Props) => {\n  const theme = useTheme2();\n\n  const [error, setError] = useState<string | undefined>();\n  const [series, setSeries] = useState<ScatterSeries[]>([]);\n  const [builder, setBuilder] = useState<UPlotConfigBuilder | undefined>();\n  const [facets, setFacets] = useState<FacetedData | undefined>();\n\n  const oldOptions = usePrevious(props.options);\n  const oldData = usePrevious(props.data);\n\n  const initSeries = useCallback(() => {\n    const getData = () => props.data.series;\n    const info: ScatterPanelInfo = prepScatter(props.options, getData, config.theme2);\n\n    if (info.error) {\n      setError(info.error);\n    } else if (info.series.length && props.data.series) {\n      setBuilder(info.builder);\n      setSeries(info.series);\n      setFacets(() => prepData(info, props.data.series));\n      setError(undefined);\n    }\n  }, [props.data.series, props.options]);\n\n  const initFacets = useCallback(() => {\n    setFacets(() => prepData({ error, series }, props.data.series));\n  }, [props.data.series, error, series]);\n\n  useEffect(() => {\n    if (oldOptions !== props.options || oldData?.structureRev !== props.data.structureRev) {\n      initSeries();\n    } else if (oldData?.series !== props.data.series) {\n      initFacets();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props]);\n\n  const renderLegend = () => {\n    const items: VizLegendItem[] = [];\n\n    for (let si = 0; si < series.length; si++) {\n      const s = series[si];\n      const frame = s.frame(props.data.series);\n      if (frame) {\n        for (const item of s.legend()) {\n          const field = s.y(frame);\n          item.getDisplayValues = () => getDisplayValuesForCalcs(props.options.legend.calcs, field, theme);\n          item.disabled = !(s.show ?? true);\n\n          if (props.options.seriesMapping === SeriesMapping.Manual) {\n            item.label = props.options.series?.[si]?.name ?? `Series ${si + 1}`;\n          }\n\n          item.color = alpha(s.lineColor(frame) as string, 1);\n\n          items.push(item);\n        }\n      }\n    }\n\n    if (!props.options.legend.showLegend) {\n      return null;\n    }\n\n    const legendStyle = {\n      flexStart: css({\n        div: {\n          justifyContent: 'flex-start',\n        },\n      }),\n    };\n\n    return (\n      <VizLayout.Legend placement={props.options.legend.placement} width={props.options.legend.width}>\n        <VizLegend\n          className={legendStyle.flexStart}\n          placement={props.options.legend.placement}\n          items={items}\n          displayMode={props.options.legend.displayMode}\n        />\n      </VizLayout.Legend>\n    );\n  };\n\n  if (error || !builder || !facets) {\n    return (\n      <div className=\"panel-empty\">\n        <p>{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <VizLayout width={props.width} height={props.height} legend={renderLegend()}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart config={builder} data={facets} width={vizWidth} height={vizHeight}>\n            {props.options.tooltip.mode !== TooltipDisplayMode.None && (\n              <TooltipPlugin2\n                config={builder}\n                hoverMode={TooltipHoverMode.xyOne}\n                render={(u, dataIdxs, seriesIdx, isPinned, dismiss) => {\n                  return (\n                    <XYChartTooltip\n                      data={props.data.series}\n                      dataIdxs={dataIdxs}\n                      allSeries={series}\n                      dismiss={dismiss}\n                      isPinned={isPinned}\n                      options={props.options}\n                      seriesIdx={seriesIdx}\n                    />\n                  );\n                }}\n                maxWidth={props.options.tooltip.maxWidth}\n              />\n            )}\n          </UPlotChart>\n        )}\n      </VizLayout>\n    </>\n  );\n};\n","import React, { ReactNode } from 'react';\n\nimport { DataFrame, Field, getFieldDisplayName } from '@grafana/data';\nimport { alpha } from '@grafana/data/src/themes/colorManipulator';\nimport { useStyles2 } from '@grafana/ui';\nimport { VizTooltipContent } from '@grafana/ui/src/components/VizTooltip/VizTooltipContent';\nimport { VizTooltipFooter } from '@grafana/ui/src/components/VizTooltip/VizTooltipFooter';\nimport { VizTooltipHeader } from '@grafana/ui/src/components/VizTooltip/VizTooltipHeader';\nimport { ColorIndicator, VizTooltipItem } from '@grafana/ui/src/components/VizTooltip/types';\n\nimport { getDataLinks } from '../status-history/utils';\nimport { getStyles } from '../timeseries/TimeSeriesTooltip';\n\nimport { Options } from './panelcfg.gen';\nimport { ScatterSeries } from './types';\nimport { fmt } from './utils';\n\nexport interface Props {\n  dataIdxs: Array<number | null>;\n  seriesIdx: number | null | undefined;\n  isPinned: boolean;\n  dismiss: () => void;\n  options: Options;\n  data: DataFrame[]; // source data\n  allSeries: ScatterSeries[];\n}\n\nexport const XYChartTooltip = ({ dataIdxs, seriesIdx, data, allSeries, dismiss, options, isPinned }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const rowIndex = dataIdxs.find((idx) => idx !== null);\n  // @todo: remove -1 when uPlot v2 arrive\n  // context: first value in dataIdxs always null and represent X series\n  const hoveredPointIndex = seriesIdx! - 1;\n\n  if (!allSeries || rowIndex == null) {\n    return null;\n  }\n\n  const series = allSeries[hoveredPointIndex];\n  const frame = series.frame(data);\n  const xField = series.x(frame);\n  const yField = series.y(frame);\n\n  let label = series.name;\n  if (options.seriesMapping === 'manual') {\n    label = options.series?.[hoveredPointIndex]?.name ?? `Series ${hoveredPointIndex + 1}`;\n  }\n\n  let colorThing = series.pointColor(frame);\n\n  if (Array.isArray(colorThing)) {\n    colorThing = colorThing[rowIndex];\n  }\n\n  const headerItem: VizTooltipItem = {\n    label,\n    value: '',\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    color: alpha(colorThing as string, 0.5),\n    colorIndicator: ColorIndicator.marker_md,\n  };\n\n  const contentItems: VizTooltipItem[] = [\n    {\n      label: getFieldDisplayName(xField, frame),\n      value: fmt(xField, xField.values[rowIndex]),\n    },\n    {\n      label: getFieldDisplayName(yField, frame),\n      value: fmt(yField, yField.values[rowIndex]),\n    },\n  ];\n\n  // add extra fields\n  const extraFields: Field[] = frame.fields.filter((f) => f !== xField && f !== yField);\n  if (extraFields) {\n    extraFields.forEach((field) => {\n      contentItems.push({\n        label: field.name,\n        value: fmt(field, field.values[rowIndex]),\n      });\n    });\n  }\n\n  let footer: ReactNode;\n\n  if (isPinned && seriesIdx != null) {\n    const links = getDataLinks(yField, rowIndex);\n\n    footer = <VizTooltipFooter dataLinks={links} />;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <VizTooltipHeader item={headerItem} isPinned={isPinned} />\n      <VizTooltipContent items={contentItems} isPinned={isPinned} />\n      {footer}\n    </div>\n  );\n};\n","import {\n  FieldColorModeId,\n  FieldConfigProperty,\n  FieldType,\n  identityOverrideProcessor,\n  SetFieldConfigOptionsArgs,\n} from '@grafana/data';\nimport { LineStyle } from '@grafana/schema';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { LineStyleEditor } from '../timeseries/LineStyleEditor';\n\nimport { FieldConfig, ScatterShow } from './panelcfg.gen';\n\nexport const DEFAULT_POINT_SIZE = 5;\n\nexport function getScatterFieldConfig(cfg: FieldConfig): SetFieldConfigOptionsArgs<FieldConfig> {\n  return {\n    standardOptions: {\n      [FieldConfigProperty.Min]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.Max]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.Unit]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.Decimals]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.NoValue]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.DisplayName]: {\n        hideFromDefaults: true,\n      },\n\n      // TODO: this still leaves Color series by: [ Last | Min | Max ]\n      // because item.settings?.bySeriesSupport && colorMode.isByValue\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: true,\n          bySeriesSupport: true,\n          preferThresholdsMode: false,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n    },\n\n    useCustomConfig: (builder) => {\n      builder\n        .addRadio({\n          path: 'show',\n          name: 'Show',\n          defaultValue: cfg.show,\n          settings: {\n            options: [\n              { label: 'Points', value: ScatterShow.Points },\n              { label: 'Lines', value: ScatterShow.Lines },\n              { label: 'Both', value: ScatterShow.PointsAndLines },\n            ],\n          },\n        })\n        // .addGenericEditor(\n        //   {\n        //     path: 'pointSymbol',\n        //     name: 'Point symbol',\n        //     defaultValue: defaultFieldConfig.pointSymbol ?? {\n        //       mode: 'fixed',\n        //       fixed: 'img/icons/marker/circle.svg',\n        //     },\n        //     settings: {\n        //       resourceType: MediaType.Icon,\n        //       folderName: ResourceFolderName.Marker,\n        //       placeholderText: 'Select a symbol',\n        //       placeholderValue: 'img/icons/marker/circle.svg',\n        //       showSourceRadio: false,\n        //     },\n        //     showIf: (c) => c.show !== ScatterShow.Lines,\n        //   },\n        //   SymbolEditor // ResourceDimensionEditor\n        // )\n        .addSliderInput({\n          path: 'pointSize.fixed',\n          name: 'Point size',\n          defaultValue: cfg.pointSize?.fixed ?? DEFAULT_POINT_SIZE,\n          settings: {\n            min: 1,\n            max: 100,\n            step: 1,\n          },\n          showIf: (c) => c.show !== ScatterShow.Lines,\n        })\n        // .addSliderInput({\n        //   path: 'fillOpacity',\n        //   name: 'Fill opacity',\n        //   defaultValue: 0.4, // defaultFieldConfig.fillOpacity,\n        //   settings: {\n        //     min: 0, // hidden?  or just outlines?\n        //     max: 1,\n        //     step: 0.05,\n        //   },\n        //   showIf: (c) => c.show !== ScatterShow.Lines,\n        // })\n        .addCustomEditor<void, LineStyle>({\n          id: 'lineStyle',\n          path: 'lineStyle',\n          name: 'Line style',\n          showIf: (c) => c.show !== ScatterShow.Points,\n          editor: LineStyleEditor,\n          override: LineStyleEditor,\n          process: identityOverrideProcessor,\n          shouldApply: (f) => f.type === FieldType.number,\n        })\n        .addSliderInput({\n          path: 'lineWidth',\n          name: 'Line width',\n          defaultValue: cfg.lineWidth,\n          settings: {\n            min: 0,\n            max: 10,\n            step: 1,\n          },\n          showIf: (c) => c.show !== ScatterShow.Points,\n        });\n\n      commonOptionsBuilder.addAxisConfig(builder, cfg);\n      commonOptionsBuilder.addHideFrom(builder);\n    },\n  };\n}\n","import { DataFrame, Field, FieldMatcher, FieldType, getFieldDisplayName } from '@grafana/data';\nimport { XYFieldMatchers } from 'app/core/components/GraphNG/types';\n\nimport { XYDimensionConfig } from './panelcfg.gen';\n\n// TODO: fix import\n\nexport enum DimensionError {\n  NoData,\n  BadFrameSelection,\n  XNotFound,\n}\n\nexport interface XYDimensions {\n  frame: DataFrame; // matches order from configs, excluds non-graphable values\n  x: Field;\n  fields: XYFieldMatchers;\n  hasData?: boolean;\n  hasTime?: boolean;\n}\n\nexport interface XYDimensionsError {\n  error: DimensionError;\n}\n\nexport function isGraphable(field: Field) {\n  return field.type === FieldType.number;\n}\n\nexport function getXYDimensions(cfg?: XYDimensionConfig, data?: DataFrame[]): XYDimensions | XYDimensionsError {\n  if (!data || !data.length) {\n    return { error: DimensionError.NoData };\n  }\n  if (!cfg) {\n    cfg = {\n      frame: 0,\n    };\n  }\n\n  let frame = data[cfg.frame ?? 0];\n  if (!frame) {\n    return { error: DimensionError.BadFrameSelection };\n  }\n\n  let xIndex = -1;\n  for (let i = 0; i < frame.fields.length; i++) {\n    const f = frame.fields[i];\n    if (cfg.x && cfg.x === getFieldDisplayName(f, frame, data)) {\n      xIndex = i;\n      break;\n    }\n    if (isGraphable(f) && !cfg.x) {\n      xIndex = i;\n      break;\n    }\n  }\n\n  let hasTime = false;\n  const x = frame.fields[xIndex];\n  const fields: Field[] = [x];\n  for (const f of frame.fields) {\n    if (f.type === FieldType.time) {\n      hasTime = true;\n    }\n    if (f === x || !isGraphable(f)) {\n      continue;\n    }\n    if (cfg.exclude) {\n      const name = getFieldDisplayName(f, frame, data);\n      if (cfg.exclude.includes(name)) {\n        continue;\n      }\n    }\n    fields.push(f);\n  }\n\n  return {\n    x,\n    fields: {\n      x: getSimpleFieldMatcher(x),\n      y: getSimpleFieldNotMatcher(x), // Not x\n    },\n    frame: {\n      ...frame,\n      fields,\n    },\n    hasData: frame.fields.length > 0,\n    hasTime,\n  };\n}\n\nfunction getSimpleFieldMatcher(f: Field): FieldMatcher {\n  if (!f) {\n    return () => false;\n  }\n  // the field may change if sorted\n  return (field) => f === field || !!(f.state && f.state === field.state);\n}\n\nfunction getSimpleFieldNotMatcher(f: Field): FieldMatcher {\n  if (!f) {\n    return () => false;\n  }\n  const m = getSimpleFieldMatcher(f);\n  return (field) => !m(field, { fields: [], length: 0 }, []);\n}\n","import { PanelPlugin } from '@grafana/data';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { AutoEditor } from './AutoEditor';\nimport { ManualEditor } from './ManualEditor';\nimport { XYChartPanel } from './XYChartPanel';\nimport { getScatterFieldConfig } from './config';\nimport { Options, FieldConfig, defaultFieldConfig } from './panelcfg.gen';\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(XYChartPanel)\n  .useFieldConfig(getScatterFieldConfig(defaultFieldConfig))\n  .setPanelOptions((builder) => {\n    builder\n      .addRadio({\n        path: 'seriesMapping',\n        name: 'Series mapping',\n        defaultValue: 'auto',\n        settings: {\n          options: [\n            { value: 'auto', label: 'Table', description: 'Plot values within a single table result' },\n            { value: 'manual', label: 'Manual', description: 'Construct values from any result' },\n          ],\n        },\n      })\n      .addCustomEditor({\n        id: 'xyPlotConfig',\n        path: 'dims',\n        name: '',\n        editor: AutoEditor,\n        showIf: (cfg) => cfg.seriesMapping === 'auto',\n      })\n      .addCustomEditor({\n        id: 'series',\n        path: 'series',\n        name: '',\n        defaultValue: [],\n        editor: ManualEditor,\n        showIf: (cfg) => cfg.seriesMapping === 'manual',\n      });\n\n    commonOptionsBuilder.addTooltipOptions(builder, true);\n    commonOptionsBuilder.addLegendOptions(builder);\n  });\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\n/**\n * Auto is \"table\" in the UI\n */\nexport enum SeriesMapping {\n  Auto = 'auto',\n  Manual = 'manual',\n}\n\nexport enum ScatterShow {\n  Lines = 'lines',\n  Points = 'points',\n  PointsAndLines = 'points+lines',\n}\n\n/**\n * Configuration for the Table/Auto mode\n */\nexport interface XYDimensionConfig {\n  exclude?: Array<string>;\n  frame: number;\n  x?: string;\n}\n\nexport const defaultXYDimensionConfig: Partial<XYDimensionConfig> = {\n  exclude: [],\n};\n\nexport interface FieldConfig extends common.HideableFieldConfig, common.AxisConfig {\n  label?: common.VisibilityMode;\n  labelValue?: common.TextDimensionConfig;\n  lineColor?: common.ColorDimensionConfig;\n  lineStyle?: common.LineStyle;\n  lineWidth?: number;\n  pointColor?: common.ColorDimensionConfig;\n  pointSize?: common.ScaleDimensionConfig;\n  show?: ScatterShow;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  label: common.VisibilityMode.Auto,\n  show: ScatterShow.Points,\n};\n\nexport interface ScatterSeriesConfig extends FieldConfig {\n  frame?: number;\n  name?: string;\n  x?: string;\n  y?: string;\n}\n\nexport interface Options extends common.OptionsWithLegend, common.OptionsWithTooltip {\n  /**\n   * Table Mode (auto)\n   */\n  dims: XYDimensionConfig;\n  /**\n   * Manual Mode\n   */\n  series: Array<ScatterSeriesConfig>;\n  seriesMapping?: SeriesMapping;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  series: [],\n};\n","import uPlot from 'uplot';\n\nimport {\n  DataFrame,\n  FieldColorModeId,\n  fieldColorModeRegistry,\n  formattedValueToString,\n  getDisplayProcessor,\n  getFieldColorModeForField,\n  getFieldDisplayName,\n  getFieldSeriesColor,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { alpha } from '@grafana/data/src/themes/colorManipulator';\nimport { config } from '@grafana/runtime';\nimport {\n  AxisPlacement,\n  ScaleDirection,\n  ScaleOrientation,\n  VisibilityMode,\n  ScaleDimensionConfig,\n  ScaleDimensionMode,\n} from '@grafana/schema';\nimport { UPlotConfigBuilder } from '@grafana/ui';\nimport { FacetedData, FacetSeries } from '@grafana/ui/src/components/uPlot/types';\nimport { findFieldIndex, getScaledDimensionForField } from '../../../features/dimensions';\n\nimport { pointWithin, Quadtree, Rect } from '../barchart/quadtree';\n\nimport { DEFAULT_POINT_SIZE } from './config';\nimport { isGraphable } from './dims';\nimport { FieldConfig, defaultFieldConfig, Options, ScatterShow } from './panelcfg.gen';\nimport { DimensionValues, ScatterSeries } from './types';\n\nexport interface ScatterPanelInfo {\n  error?: string;\n  series: ScatterSeries[];\n  builder?: UPlotConfigBuilder;\n}\n\n/**\n * This is called when options or structure rev changes\n */\nexport function prepScatter(options: Options, getData: () => DataFrame[], theme: GrafanaTheme2): ScatterPanelInfo {\n  let series: ScatterSeries[];\n  let builder: UPlotConfigBuilder;\n\n  try {\n    series = prepSeries(options, getData());\n    builder = prepConfig(getData, series, theme);\n  } catch (e) {\n    let errorMsg = 'Unknown error in prepScatter';\n    if (typeof e === 'string') {\n      errorMsg = e;\n    } else if (e instanceof Error) {\n      errorMsg = e.message;\n    }\n\n    return {\n      error: errorMsg,\n      series: [],\n    };\n  }\n\n  return {\n    series,\n    builder,\n  };\n}\n\ninterface Dims {\n  pointColorIndex?: number;\n  pointColorFixed?: string;\n\n  pointSizeIndex?: number;\n  pointSizeConfig?: ScaleDimensionConfig;\n}\n\nfunction getScatterSeries(\n  seriesIndex: number,\n  frames: DataFrame[],\n  frameIndex: number,\n  xIndex: number,\n  yIndex: number,\n  dims: Dims\n): ScatterSeries {\n  const frame = frames[frameIndex];\n  const y = frame.fields[yIndex];\n  let state = y.state ?? {};\n  state.seriesIndex = seriesIndex;\n  y.state = state;\n\n  // Color configs\n  //----------------\n  let seriesColor = dims.pointColorFixed\n    ? config.theme2.visualization.getColorByName(dims.pointColorFixed)\n    : getFieldSeriesColor(y, config.theme2).color;\n  let pointColor: DimensionValues<string> = () => seriesColor;\n  const fieldConfig: FieldConfig = { ...defaultFieldConfig, ...y.config.custom };\n  let pointColorMode = fieldColorModeRegistry.get(FieldColorModeId.PaletteClassic);\n  if (dims.pointColorIndex) {\n    const f = frames[frameIndex].fields[dims.pointColorIndex];\n    if (f) {\n      pointColorMode = getFieldColorModeForField(y);\n      if (pointColorMode.isByValue) {\n        const index = dims.pointColorIndex;\n        pointColor = (frame: DataFrame) => {\n          const field = frame.fields[index];\n\n          if (field.state?.range) {\n            // this forces local min/max recalc, rather than using global min/max from field.state\n            field.state.range = undefined;\n          }\n\n          field.display = getDisplayProcessor({ field, theme: config.theme2 });\n\n          return field.values.map((v) => field.display!(v).color!); // slow!\n        };\n      } else {\n        seriesColor = pointColorMode.getCalculator(f, config.theme2)(f.values[0], 1);\n        pointColor = () => seriesColor;\n      }\n    }\n  }\n\n  // Size configs\n  //----------------\n  let pointSizeHints = dims.pointSizeConfig;\n  let pointSizeFixed = dims.pointSizeConfig?.fixed ?? y.config.custom?.pointSize?.fixed ?? DEFAULT_POINT_SIZE;\n  let pointSize: DimensionValues<number> = () => pointSizeFixed;\n  if (dims.pointSizeIndex) {\n    pointSize = (frame) => {\n      const s = getScaledDimensionForField(\n        frame.fields[dims.pointSizeIndex!],\n        dims.pointSizeConfig!,\n        ScaleDimensionMode.Quad\n      );\n      const vals = Array(frame.length);\n      for (let i = 0; i < frame.length; i++) {\n        vals[i] = s.get(i);\n      }\n      return vals;\n    };\n  } else {\n    pointSizeHints = {\n      fixed: pointSizeFixed,\n      min: pointSizeFixed,\n      max: pointSizeFixed,\n    };\n  }\n\n  // Series config\n  //----------------\n  const name = getFieldDisplayName(y, frame, frames);\n  return {\n    name,\n\n    frame: (frames) => frames[frameIndex],\n\n    x: (frame) => frame.fields[xIndex],\n    y: (frame) => frame.fields[yIndex],\n    legend: () => {\n      return [\n        {\n          label: name,\n          color: seriesColor, // single color for series?\n          getItemKey: () => name,\n          yAxis: yIndex, // << but not used\n        },\n      ];\n    },\n\n    showLine: fieldConfig.show !== ScatterShow.Points,\n    lineWidth: fieldConfig.lineWidth ?? 2,\n    lineStyle: fieldConfig.lineStyle!,\n    lineColor: () => seriesColor,\n\n    showPoints: fieldConfig.show !== ScatterShow.Lines ? VisibilityMode.Always : VisibilityMode.Never,\n    pointSize,\n    pointColor,\n    pointSymbol: (frame: DataFrame, from?: number) => 'circle', // single field, multiple symbols.... kinda equals multiple series 🤔\n\n    label: VisibilityMode.Never,\n    labelValue: () => '',\n    show: !frame.fields[yIndex].config.custom.hideFrom?.viz,\n\n    hints: {\n      pointSize: pointSizeHints!,\n      pointColor: {\n        mode: pointColorMode,\n      },\n    },\n  };\n}\n\nfunction prepSeries(options: Options, frames: DataFrame[]): ScatterSeries[] {\n  let seriesIndex = 0;\n  if (!frames.length) {\n    throw 'Missing data';\n  }\n\n  if (options.seriesMapping === 'manual') {\n    if (!options.series?.length) {\n      throw 'Missing series config';\n    }\n\n    const scatterSeries: ScatterSeries[] = [];\n\n    for (const series of options.series) {\n      if (!series?.x) {\n        throw 'Select X dimension';\n      }\n\n      if (!series?.y) {\n        throw 'Select Y dimension';\n      }\n\n      for (let frameIndex = 0; frameIndex < frames.length; frameIndex++) {\n        // When a frame filter is applied, only include matching frame index\n        if (series.frame !== undefined && series.frame !== frameIndex) {\n          continue;\n        }\n        const frame = frames[frameIndex];\n        const xIndex = findFieldIndex(series.x, frame, frames);\n\n        if (xIndex != null) {\n          // TODO: this should find multiple y fields\n          const yIndex = findFieldIndex(series.y, frame, frames);\n\n          if (yIndex == null) {\n            throw 'Y must be in the same frame as X';\n          }\n\n          const dims: Dims = {\n            pointColorFixed: series.pointColor?.fixed,\n            pointColorIndex: findFieldIndex(series.pointColor?.field, frame, frames),\n            pointSizeConfig: series.pointSize,\n            pointSizeIndex: findFieldIndex(series.pointSize?.field, frame, frames),\n          };\n          scatterSeries.push(getScatterSeries(seriesIndex++, frames, frameIndex, xIndex, yIndex, dims));\n        }\n      }\n    }\n\n    return scatterSeries;\n  }\n\n  // Default behavior\n  const dims = options.dims ?? {};\n  const frameIndex = dims.frame ?? 0;\n  const frame = frames[frameIndex];\n  const numericIndices: number[] = [];\n\n  let xIndex = findFieldIndex(dims.x, frame, frames);\n  for (let i = 0; i < frame.fields.length; i++) {\n    if (isGraphable(frame.fields[i])) {\n      if (xIndex == null || i === xIndex) {\n        xIndex = i;\n        continue;\n      }\n      if (dims.exclude && dims.exclude.includes(getFieldDisplayName(frame.fields[i], frame, frames))) {\n        continue; // skip\n      }\n\n      numericIndices.push(i);\n    }\n  }\n\n  if (xIndex == null) {\n    throw 'Missing X dimension';\n  }\n\n  if (!numericIndices.length) {\n    throw 'No Y values';\n  }\n  return numericIndices.map((yIndex) => getScatterSeries(seriesIndex++, frames, frameIndex, xIndex!, yIndex, {}));\n}\n\ninterface DrawBubblesOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n  disp: {\n    //unit: 3,\n    size: {\n      values: (u: uPlot, seriesIdx: number) => number[];\n    };\n    color: {\n      values: (u: uPlot, seriesIdx: number) => string[];\n      alpha: number;\n    };\n  };\n}\n\nconst prepConfig = (getData: () => DataFrame[], scatterSeries: ScatterSeries[], theme: GrafanaTheme2) => {\n  let qt: Quadtree;\n  let hRect: Rect | null;\n\n  function drawBubblesFactory(opts: DrawBubblesOpts) {\n    const drawBubbles: uPlot.Series.PathBuilder = (u, seriesIdx, idx0, idx1) => {\n      uPlot.orient(\n        u,\n        seriesIdx,\n        (\n          series,\n          dataX,\n          dataY,\n          scaleX,\n          scaleY,\n          valToPosX,\n          valToPosY,\n          xOff,\n          yOff,\n          xDim,\n          yDim,\n          moveTo,\n          lineTo,\n          rect,\n          arc\n        ) => {\n          const pxRatio = uPlot.pxRatio;\n          const scatterInfo = scatterSeries[seriesIdx - 1];\n          let d = u.data[seriesIdx] as unknown as FacetSeries;\n\n          let showLine = scatterInfo.showLine;\n          let showPoints = scatterInfo.showPoints === VisibilityMode.Always;\n          if (!showPoints && scatterInfo.showPoints === VisibilityMode.Auto) {\n            showPoints = d[0].length < 1000;\n          }\n\n          // always show something\n          if (!showPoints && !showLine) {\n            showLine = true;\n          }\n\n          let strokeWidth = 1;\n\n          u.ctx.save();\n\n          u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n          u.ctx.clip();\n\n          u.ctx.fillStyle = (series.fill as any)(); // assumes constant\n          u.ctx.strokeStyle = (series.stroke as any)();\n          u.ctx.lineWidth = strokeWidth;\n\n          let deg360 = 2 * Math.PI;\n\n          let xKey = scaleX.key!;\n          let yKey = scaleY.key!;\n\n          let pointHints = scatterInfo.hints.pointSize;\n          const colorByValue = scatterInfo.hints.pointColor.mode.isByValue;\n\n          let maxSize = (pointHints.max ?? pointHints.fixed) * pxRatio;\n\n          // todo: this depends on direction & orientation\n          // todo: calc once per redraw, not per path\n          let filtLft = u.posToVal(-maxSize / 2, xKey);\n          let filtRgt = u.posToVal(u.bbox.width / pxRatio + maxSize / 2, xKey);\n          let filtBtm = u.posToVal(u.bbox.height / pxRatio + maxSize / 2, yKey);\n          let filtTop = u.posToVal(-maxSize / 2, yKey);\n\n          let sizes = opts.disp.size.values(u, seriesIdx);\n          let pointColors = opts.disp.color.values(u, seriesIdx);\n          let pointAlpha = opts.disp.color.alpha;\n\n          let linePath: Path2D | null = showLine ? new Path2D() : null;\n\n          let curColor: CanvasRenderingContext2D['fillStyle'] | null = null;\n\n          for (let i = 0; i < d[0].length; i++) {\n            let xVal = d[0][i];\n            let yVal = d[1][i];\n            let size = sizes[i] * pxRatio;\n\n            if (xVal >= filtLft && xVal <= filtRgt && yVal >= filtBtm && yVal <= filtTop) {\n              let cx = valToPosX(xVal, scaleX, xDim, xOff);\n              let cy = valToPosY(yVal, scaleY, yDim, yOff);\n\n              if (showLine) {\n                linePath!.lineTo(cx, cy);\n              }\n\n              if (showPoints) {\n                // if pointHints.fixed? don't recalc size\n                // if pointColor has 0 opacity, draw as single path (assuming all strokes are alpha 1)\n\n                u.ctx.beginPath();\n                u.ctx.arc(cx, cy, size / 2, 0, deg360);\n\n                if (colorByValue) {\n                  if (pointColors[i] !== curColor) {\n                    curColor = pointColors[i];\n                    u.ctx.fillStyle = alpha(curColor, pointAlpha);\n                    u.ctx.strokeStyle = curColor;\n                  }\n                }\n\n                u.ctx.fill();\n                u.ctx.stroke();\n                opts.each(\n                  u,\n                  seriesIdx,\n                  i,\n                  cx - size / 2 - strokeWidth / 2,\n                  cy - size / 2 - strokeWidth / 2,\n                  size + strokeWidth,\n                  size + strokeWidth\n                );\n              }\n            }\n          }\n\n          if (showLine) {\n            let frame = scatterInfo.frame(getData());\n            u.ctx.strokeStyle = scatterInfo.lineColor(frame);\n            u.ctx.lineWidth = scatterInfo.lineWidth * pxRatio;\n\n            const { lineStyle } = scatterInfo;\n            if (lineStyle && lineStyle.fill !== 'solid') {\n              if (lineStyle.fill === 'dot') {\n                u.ctx.lineCap = 'round';\n              }\n              u.ctx.setLineDash(lineStyle.dash ?? [10, 10]);\n            }\n\n            u.ctx.stroke(linePath!);\n          }\n\n          u.ctx.restore();\n        }\n      );\n\n      return null;\n    };\n\n    return drawBubbles;\n  }\n\n  let drawBubbles = drawBubblesFactory({\n    disp: {\n      size: {\n        //unit: 3, // raw CSS pixels\n        values: (u, seriesIdx) => {\n          return u.data[seriesIdx][2] as any; // already contains final pixel geometry\n          //let [minValue, maxValue] = getSizeMinMax(u);\n          //return u.data[seriesIdx][2].map(v => getSize(v, minValue, maxValue));\n        },\n      },\n      color: {\n        // string values\n        values: (u, seriesIdx) => {\n          return u.data[seriesIdx][3] as any;\n        },\n        alpha: 0.5,\n      },\n    },\n    each: (u, seriesIdx, dataIdx, lft, top, wid, hgt) => {\n      // we get back raw canvas coords (included axes & padding). translate to the plotting area origin\n      lft -= u.bbox.left;\n      top -= u.bbox.top;\n      qt.add({ x: lft, y: top, w: wid, h: hgt, sidx: seriesIdx, didx: dataIdx });\n    },\n  });\n\n  const builder = new UPlotConfigBuilder();\n\n  builder.setCursor({\n    drag: { setScale: true },\n    dataIdx: (u, seriesIdx) => {\n      if (seriesIdx === 1) {\n        const pxRatio = uPlot.pxRatio;\n\n        hRect = null;\n\n        let dist = Infinity;\n        let cx = u.cursor.left! * pxRatio;\n        let cy = u.cursor.top! * pxRatio;\n\n        qt.get(cx, cy, 1, 1, (o) => {\n          if (pointWithin(cx, cy, o.x, o.y, o.x + o.w, o.y + o.h)) {\n            let ocx = o.x + o.w / 2;\n            let ocy = o.y + o.h / 2;\n\n            let dx = ocx - cx;\n            let dy = ocy - cy;\n\n            let d = Math.sqrt(dx ** 2 + dy ** 2);\n\n            // test against radius for actual hover\n            if (d <= o.w / 2) {\n              // only hover bbox with closest distance\n              if (d <= dist) {\n                dist = d;\n                hRect = o;\n              }\n            }\n          }\n        });\n      }\n\n      return hRect && seriesIdx === hRect.sidx ? hRect.didx : null;\n    },\n    points: {\n      size: (u, seriesIdx) => {\n        return hRect && seriesIdx === hRect.sidx ? hRect.w / uPlot.pxRatio : 0;\n      },\n      fill: (u, seriesIdx) => 'rgba(255,255,255,0.4)',\n    },\n  });\n\n  builder.addHook('drawClear', (u) => {\n    qt = qt || new Quadtree(0, 0, u.bbox.width, u.bbox.height);\n\n    qt.clear();\n\n    // force-clear the path cache to cause drawBars() to rebuild new quadtree\n    u.series.forEach((s, i) => {\n      if (i > 0) {\n        // @ts-ignore\n        s._paths = null;\n      }\n    });\n  });\n\n  builder.setMode(2);\n\n  const frames = getData();\n  let xField = scatterSeries[0].x(scatterSeries[0].frame(frames));\n\n  let fieldConfig = xField.config;\n  let customConfig = fieldConfig.custom;\n  let scaleDistr = customConfig?.scaleDistribution;\n\n  builder.addScale({\n    scaleKey: 'x',\n    isTime: false,\n    orientation: ScaleOrientation.Horizontal,\n    direction: ScaleDirection.Right,\n    distribution: scaleDistr?.type,\n    log: scaleDistr?.log,\n    linearThreshold: scaleDistr?.linearThreshold,\n    min: fieldConfig.min,\n    max: fieldConfig.max,\n    softMin: customConfig?.axisSoftMin,\n    softMax: customConfig?.axisSoftMax,\n    centeredZero: customConfig?.axisCenteredZero,\n    decimals: fieldConfig.decimals,\n  });\n\n  // why does this fall back to '' instead of null or undef?\n  let xAxisLabel = customConfig.axisLabel;\n\n  builder.addAxis({\n    scaleKey: 'x',\n    placement: customConfig?.axisPlacement !== AxisPlacement.Hidden ? AxisPlacement.Bottom : AxisPlacement.Hidden,\n    show: customConfig?.axisPlacement !== AxisPlacement.Hidden,\n    grid: { show: customConfig?.axisGridShow },\n    border: { show: customConfig?.axisBorderShow },\n    theme,\n    label:\n      xAxisLabel == null || xAxisLabel === ''\n        ? getFieldDisplayName(xField, scatterSeries[0].frame(frames), frames)\n        : xAxisLabel,\n    formatValue: (v, decimals) => formattedValueToString(xField.display!(v, decimals)),\n  });\n\n  scatterSeries.forEach((s, si) => {\n    let frame = s.frame(frames);\n    let field = s.y(frame);\n\n    const lineColor = s.lineColor(frame);\n    const pointColor = asSingleValue(frame, s.pointColor) as string;\n    //const lineColor = s.lineColor(frame);\n    //const lineWidth = s.lineWidth;\n\n    let scaleKey = field.config.unit ?? 'y';\n    let config = field.config;\n    let customConfig = config.custom;\n    let scaleDistr = customConfig?.scaleDistribution;\n\n    builder.addScale({\n      scaleKey,\n      orientation: ScaleOrientation.Vertical,\n      direction: ScaleDirection.Up,\n      distribution: scaleDistr?.type,\n      log: scaleDistr?.log,\n      linearThreshold: scaleDistr?.linearThreshold,\n      min: config.min,\n      max: config.max,\n      softMin: customConfig?.axisSoftMin,\n      softMax: customConfig?.axisSoftMax,\n      centeredZero: customConfig?.axisCenteredZero,\n      decimals: config.decimals,\n    });\n\n    // why does this fall back to '' instead of null or undef?\n    let yAxisLabel = customConfig?.axisLabel;\n\n    builder.addAxis({\n      scaleKey,\n      theme,\n      placement: customConfig?.axisPlacement === AxisPlacement.Auto ? AxisPlacement.Left : customConfig?.axisPlacement,\n      show: customConfig?.axisPlacement !== AxisPlacement.Hidden,\n      grid: { show: customConfig?.axisGridShow },\n      border: { show: customConfig?.axisBorderShow },\n      size: customConfig?.axisWidth,\n      label:\n        yAxisLabel == null || yAxisLabel === ''\n          ? getFieldDisplayName(field, scatterSeries[si].frame(frames), frames)\n          : yAxisLabel,\n      formatValue: (v, decimals) => formattedValueToString(field.display!(v, decimals)),\n    });\n\n    builder.addSeries({\n      facets: [\n        {\n          scale: 'x',\n          auto: true,\n        },\n        {\n          scale: scaleKey,\n          auto: true,\n        },\n      ],\n      pathBuilder: drawBubbles, // drawBubbles({disp: {size: {values: () => }}})\n      theme,\n      scaleKey: '', // facets' scales used (above)\n      lineColor: alpha('' + lineColor, 1),\n      fillColor: alpha(pointColor, 0.5),\n      show: !customConfig.hideFrom?.viz,\n    });\n  });\n\n  /*\n  builder.setPrepData((frames) => {\n    let seriesData = lookup.fieldMaps.flatMap((f, i) => {\n      let { fields } = frames[i];\n\n      return f.y.map((yIndex, frameSeriesIndex) => {\n        let xValues = fields[f.x[frameSeriesIndex]].values;\n        let yValues = fields[f.y[frameSeriesIndex]].values;\n        let sizeValues = f.size![frameSeriesIndex](frames[i]);\n\n        if (!Array.isArray(sizeValues)) {\n          sizeValues = Array(xValues.length).fill(sizeValues);\n        }\n\n        return [xValues, yValues, sizeValues];\n      });\n    });\n\n    return [null, ...seriesData];\n  });\n  */\n\n  return builder;\n};\n\n/**\n * This is called everytime the data changes\n *\n * from?  is this where we would support that?  -- need the previous values\n */\nexport function prepData(info: ScatterPanelInfo, data: DataFrame[], from?: number): FacetedData {\n  if (info.error || !data.length) {\n    return [null];\n  }\n  return [\n    null,\n    ...info.series.map((s, idx) => {\n      const frame = s.frame(data);\n\n      let colorValues;\n      const r = s.pointColor(frame);\n      if (Array.isArray(r)) {\n        colorValues = r;\n      } else {\n        colorValues = Array(frame.length).fill(r);\n      }\n      return [\n        s.x(frame).values, // X\n        s.y(frame).values, // Y\n        asArray(frame, s.pointSize),\n        colorValues,\n      ];\n    }),\n  ];\n}\n\nfunction asArray<T>(frame: DataFrame, lookup: DimensionValues<T>): T[] {\n  const r = lookup(frame);\n  if (Array.isArray(r)) {\n    return r;\n  }\n  return Array(frame.length).fill(r);\n}\n\nfunction asSingleValue<T>(frame: DataFrame, lookup: DimensionValues<T>): T {\n  const r = lookup(frame);\n  if (Array.isArray(r)) {\n    return r[0];\n  }\n  return r;\n}\n"],"names":["_a","_b","value","icon","mode","DimensionError","SeriesMapping","ScatterShow","frame","frames","frameIndex","xIndex","dims","drawBubbles","config","customConfig","scaleDistr"],"sourceRoot":""}