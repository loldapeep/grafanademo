{"version":3,"file":"opentsdbPlugin.d9d0c9de9430cfdcdaca.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/opentsdb/components/AnnotationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/DownSample.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/FilterSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/MetricSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/OpenTsdbDetails.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/OpenTsdbQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/RateSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/TagSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/datasource.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/migrations.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/module.ts"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { InlineFormLabel, Input, InlineSwitch } from '@grafana/ui';\n\nimport OpenTsDatasource from '../datasource';\nimport { OpenTsdbQuery, OpenTsdbOptions } from '../types';\n\nexport const AnnotationEditor = (props: QueryEditorProps<OpenTsDatasource, OpenTsdbQuery, OpenTsdbOptions>) => {\n  const { query, onChange } = props;\n  const [target, setTarget] = useState<string>(query.target ?? '');\n  const [isGlobal, setIsGlobal] = useState<boolean>(query.isGlobal ?? false);\n\n  const updateValue = <K extends keyof OpenTsdbQuery, V extends OpenTsdbQuery[K]>(key: K, val: V) => {\n    onChange({\n      ...query,\n      [key]: val,\n      fromAnnotations: true,\n    });\n  };\n\n  const updateIsGlobal = (isGlobal: boolean) => {\n    isGlobal = !isGlobal;\n    setIsGlobal(isGlobal);\n    updateValue('isGlobal', isGlobal);\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      <div className=\"gf-form\">\n        <InlineFormLabel width={12}>OpenTSDB metrics query</InlineFormLabel>\n        <Input\n          value={target}\n          onChange={(e) => setTarget(e.currentTarget.value ?? '')}\n          onBlur={() => updateValue('target', target)}\n          placeholder=\"events.eventname\"\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={12}>Show Global Annotations?</InlineFormLabel>\n        <InlineSwitch value={isGlobal} onChange={(e) => updateIsGlobal(isGlobal)} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataSourceHttpSettings } from '@grafana/ui';\n\nimport { OpenTsdbOptions } from '../types';\n\nimport { OpenTsdbDetails } from './OpenTsdbDetails';\n\nexport const ConfigEditor = (props: DataSourcePluginOptionsEditorProps<OpenTsdbOptions>) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:4242\"\n        dataSourceConfig={options}\n        onChange={onOptionsChange}\n        secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n      />\n      <OpenTsdbDetails value={options} onChange={onOptionsChange} />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { toOption } from '@grafana/data';\nimport { InlineLabel, Select, Input, InlineFormLabel, InlineSwitch, Stack } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface DownSampleProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  aggregators: string[];\n  fillPolicies: string[];\n  tsdbVersion: number;\n}\n\nexport function DownSample({ query, onChange, onRunQuery, aggregators, fillPolicies, tsdbVersion }: DownSampleProps) {\n  const aggregatorOptions = aggregators.map((value: string) => toOption(value));\n  const fillPolicyOptions = fillPolicies.map((value: string) => toOption(value));\n\n  return (\n    <Stack gap={0.5} alignItems=\"flex-start\" data-testid={testIds.section}>\n      <Stack gap={0}>\n        <InlineFormLabel\n          className=\"query-keyword\"\n          width={8}\n          tooltip={\n            <div>\n              Leave interval blank for auto or for example use <code>1m</code>\n            </div>\n          }\n        >\n          Down sample\n        </InlineFormLabel>\n        <Input\n          width={25}\n          data-testid={testIds.interval}\n          placeholder=\"interval\"\n          value={query.downsampleInterval ?? ''}\n          onChange={(e) => {\n            const value = e.currentTarget.value;\n            onChange({ ...query, downsampleInterval: value });\n          }}\n          onBlur={() => onRunQuery()}\n        />\n      </Stack>\n      <Stack gap={0}>\n        <InlineFormLabel width={'auto'} className=\"query-keyword\">\n          Aggregator\n        </InlineFormLabel>\n        <Select\n          value={query.downsampleAggregator ? toOption(query.downsampleAggregator) : undefined}\n          options={aggregatorOptions}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, downsampleAggregator: value });\n              onRunQuery();\n            }\n          }}\n        />\n      </Stack>\n      {tsdbVersion >= 2 && (\n        <Stack gap={0} alignItems=\"flex-start\">\n          <InlineLabel className=\"width-6 query-keyword\">Fill</InlineLabel>\n          <Select\n            inputId=\"opentsdb-fillpolicy-select\"\n            value={query.downsampleFillPolicy ? toOption(query.downsampleFillPolicy) : undefined}\n            options={fillPolicyOptions}\n            onChange={({ value }) => {\n              if (value) {\n                onChange({ ...query, downsampleFillPolicy: value });\n                onRunQuery();\n              }\n            }}\n          />\n        </Stack>\n      )}\n      <Stack gap={0}>\n        <InlineFormLabel className=\"query-keyword\">Disable downsampling</InlineFormLabel>\n        <InlineSwitch\n          value={query.disableDownsampling ?? false}\n          onChange={() => {\n            const disableDownsampling = query.disableDownsampling ?? false;\n            onChange({ ...query, disableDownsampling: !disableDownsampling });\n            onRunQuery();\n          }}\n        />\n      </Stack>\n      <Stack gap={0} grow={1}>\n        <InlineLabel> </InlineLabel>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-downsample',\n  interval: 'downsample-interval',\n};\n","import debounce from 'debounce-promise';\nimport { size } from 'lodash';\nimport React, { useCallback, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport {\n  InlineLabel,\n  Select,\n  InlineFormLabel,\n  InlineSwitch,\n  Icon,\n  clearButtonStyles,\n  useStyles2,\n  AsyncSelect,\n  Stack,\n} from '@grafana/ui';\n\nimport { OpenTsdbFilter, OpenTsdbQuery } from '../types';\n\nexport interface FilterSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  suggestTagKeys: (query: OpenTsdbQuery) => Promise<string[]>;\n  filterTypes: string[];\n  suggestTagValues: (value: string) => Promise<SelectableValue[]>;\n}\n\nexport function FilterSection({\n  query,\n  onChange,\n  onRunQuery,\n  suggestTagKeys,\n  filterTypes,\n  suggestTagValues,\n}: FilterSectionProps) {\n  const buttonStyles = useStyles2(clearButtonStyles);\n\n  const [tagKeys, updTagKeys] = useState<Array<SelectableValue<string>>>();\n  const [keyIsLoading, updKeyIsLoading] = useState<boolean>();\n\n  const [addFilterMode, updAddFilterMode] = useState<boolean>(false);\n\n  const [curFilterType, updCurFilterType] = useState<string>('iliteral_or');\n  const [curFilterKey, updCurFilterKey] = useState<string>('');\n  const [curFilterValue, updCurFilterValue] = useState<string>('');\n  const [curFilterGroupBy, updCurFilterGroupBy] = useState<boolean>(false);\n\n  const [errors, setErrors] = useState<string>('');\n\n  const filterTypesOptions = filterTypes.map((value: string) => toOption(value));\n\n  function changeAddFilterMode() {\n    updAddFilterMode(!addFilterMode);\n  }\n\n  function addFilter() {\n    if (query.tags && size(query.tags) > 0) {\n      const err = 'Please remove tags to use filters, tags and filters are mutually exclusive.';\n      setErrors(err);\n      return;\n    }\n\n    if (!addFilterMode) {\n      updAddFilterMode(true);\n      return;\n    }\n\n    // Add the filter to the query\n    const currentFilter = {\n      type: curFilterType,\n      tagk: curFilterKey,\n      filter: curFilterValue,\n      groupBy: curFilterGroupBy,\n    };\n\n    // filters may be undefined\n    query.filters = query.filters ? query.filters.concat([currentFilter]) : [currentFilter];\n\n    // reset the inputs\n    updCurFilterType('literal_or');\n    updCurFilterKey('');\n    updCurFilterValue('');\n    updCurFilterGroupBy(false);\n\n    // fire the query\n    onChange(query);\n    onRunQuery();\n\n    // close the filter ditor\n    changeAddFilterMode();\n  }\n\n  function removeFilter(index: number) {\n    query.filters?.splice(index, 1);\n    // fire the query\n    onChange(query);\n    onRunQuery();\n  }\n\n  function editFilter(fil: OpenTsdbFilter, idx: number) {\n    removeFilter(idx);\n    updCurFilterKey(fil.tagk);\n    updCurFilterValue(fil.filter);\n    updCurFilterType(fil.type);\n    updCurFilterGroupBy(fil.groupBy);\n    addFilter();\n  }\n\n  // We are matching words split with space\n  const splitSeparator = ' ';\n  const customFilterOption = useCallback((option: SelectableValue<string>, searchQuery: string) => {\n    const label = option.value ?? '';\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  const tagValueSearch = debounce((query: string) => suggestTagValues(query), 350);\n\n  return (\n    <Stack gap={0} data-testid={testIds.section}>\n      <InlineFormLabel\n        className=\"query-keyword\"\n        width={8}\n        tooltip={<div>Filters does not work with tags, either of the two will work but not both.</div>}\n      >\n        Filters\n      </InlineFormLabel>\n      {query.filters &&\n        query.filters.map((fil: OpenTsdbFilter, idx: number) => {\n          return (\n            <InlineFormLabel key={idx} width=\"auto\" data-testid={testIds.list + idx}>\n              {fil.tagk} = {fil.type}({fil.filter}), groupBy = {'' + fil.groupBy}\n              <button type=\"button\" className={buttonStyles} onClick={() => editFilter(fil, idx)}>\n                <Icon name={'pen'} />\n              </button>\n              <button\n                type=\"button\"\n                className={buttonStyles}\n                onClick={() => removeFilter(idx)}\n                data-testid={testIds.remove}\n              >\n                <Icon name={'times'} />\n              </button>\n            </InlineFormLabel>\n          );\n        })}\n      {!addFilterMode && (\n        <InlineFormLabel width={2}>\n          <button type=\"button\" className={buttonStyles} onClick={changeAddFilterMode} aria-label=\"Add filter\">\n            <Icon name={'plus'} />\n          </button>\n        </InlineFormLabel>\n      )}\n      {addFilterMode && (\n        <Stack gap={0.5} alignItems=\"center\">\n          <Stack gap={0}>\n            <Select\n              inputId=\"opentsdb-suggested-tagk-select\"\n              value={curFilterKey ? toOption(curFilterKey) : undefined}\n              placeholder=\"key\"\n              allowCustomValue\n              filterOption={customFilterOption}\n              onOpenMenu={async () => {\n                updKeyIsLoading(true);\n                const tKs = await suggestTagKeys(query);\n                const tKsOptions = tKs.map((value: string) => toOption(value));\n                updTagKeys(tKsOptions);\n                updKeyIsLoading(false);\n              }}\n              isLoading={keyIsLoading}\n              options={tagKeys}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurFilterKey(value);\n                }\n              }}\n            />\n          </Stack>\n\n          <Stack gap={0}>\n            <InlineLabel className=\"width-4 query-keyword\">Type</InlineLabel>\n            <Select\n              inputId=\"opentsdb-aggregator-select\"\n              value={curFilterType ? toOption(curFilterType) : undefined}\n              options={filterTypesOptions}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurFilterType(value);\n                }\n              }}\n            />\n          </Stack>\n\n          <Stack gap={0}>\n            <AsyncSelect\n              inputId=\"opentsdb-suggested-tagv-select\"\n              value={curFilterValue ? toOption(curFilterValue) : undefined}\n              placeholder=\"filter\"\n              allowCustomValue\n              loadOptions={tagValueSearch}\n              defaultOptions={[]}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurFilterValue(value);\n                }\n              }}\n            />\n          </Stack>\n\n          <InlineFormLabel width={5} className=\"query-keyword\">\n            Group by\n          </InlineFormLabel>\n          <InlineSwitch\n            value={curFilterGroupBy}\n            onChange={() => {\n              // DO NOT RUN THE QUERY HERE\n              // OLD FUNCTIONALITY RAN THE QUERY\n              updCurFilterGroupBy(!curFilterGroupBy);\n            }}\n          />\n          <Stack gap={0}>\n            {errors && (\n              <InlineLabel title={errors} data-testid={testIds.error}>\n                <Icon name={'exclamation-triangle'} color={'rgb(229, 189, 28)'} />\n              </InlineLabel>\n            )}\n            <InlineFormLabel width={5.5}>\n              <button type=\"button\" className={buttonStyles} onClick={addFilter}>\n                add filter\n              </button>\n              <button type=\"button\" className={buttonStyles} onClick={changeAddFilterMode}>\n                <Icon name={'times'} />\n              </button>\n            </InlineFormLabel>\n          </Stack>\n        </Stack>\n      )}\n      <Stack gap={0} grow={1}>\n        <InlineLabel> </InlineLabel>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-filter',\n  list: 'opentsdb-filter-list',\n  error: 'opentsdb-filter-error',\n  remove: 'opentsdb-filter-remove',\n};\n","import debounce from 'debounce-promise';\nimport React from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { Select, Input, InlineFormLabel, AsyncSelect, Stack, InlineLabel } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface MetricSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  suggestMetrics: (value: string) => Promise<SelectableValue[]>;\n  aggregators: string[];\n}\n\nexport function MetricSection({ query, onChange, onRunQuery, suggestMetrics, aggregators }: MetricSectionProps) {\n  const aggregatorOptions = aggregators.map((value: string) => toOption(value));\n  const metricSearch = debounce((query: string) => suggestMetrics(query), 350);\n\n  return (\n    <Stack gap={0.5} alignItems=\"flex-start\" data-testid={testIds.section}>\n      <Stack gap={0}>\n        <InlineFormLabel width={8} className=\"query-keyword\">\n          Metric\n        </InlineFormLabel>\n        {/* metric async select: autocomplete calls opentsdb suggest API */}\n        <AsyncSelect\n          width={25}\n          inputId=\"opentsdb-metric-select\"\n          value={query.metric ? toOption(query.metric) : undefined}\n          placeholder=\"Metric name\"\n          allowCustomValue\n          loadOptions={metricSearch}\n          defaultOptions={[]}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, metric: value });\n              onRunQuery();\n            }\n          }}\n        />\n      </Stack>\n      <Stack gap={0} alignItems=\"flex-start\">\n        <InlineFormLabel width={'auto'} className=\"query-keyword\">\n          Aggregator\n        </InlineFormLabel>\n        <Select\n          inputId=\"opentsdb-aggregator-select\"\n          value={query.aggregator ? toOption(query.aggregator) : undefined}\n          options={aggregatorOptions}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, aggregator: value });\n              onRunQuery();\n            }\n          }}\n        />\n      </Stack>\n      <Stack gap={0}>\n        <InlineFormLabel\n          className=\"query-keyword\"\n          width={6}\n          tooltip={<div>Use patterns like $tag_tagname to replace part of the alias for a tag value</div>}\n        >\n          Alias\n        </InlineFormLabel>\n        <Input\n          data-testid={testIds.alias}\n          placeholder=\"series alias\"\n          value={query.alias ?? ''}\n          onChange={(e) => {\n            const value = e.currentTarget.value;\n            onChange({ ...query, alias: value });\n          }}\n          onBlur={() => onRunQuery()}\n        />\n      </Stack>\n      <Stack gap={0} grow={1}>\n        <InlineLabel> </InlineLabel>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-metricsection',\n  alias: 'metric-alias',\n};\n","import React, { SyntheticEvent, useId } from 'react';\n\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\nimport { Select, Input, Field, FieldSet } from '@grafana/ui';\n\nimport { OpenTsdbOptions } from '../types';\n\nconst tsdbVersions = [\n  { label: '<=2.1', value: 1 },\n  { label: '==2.2', value: 2 },\n  { label: '==2.3', value: 3 },\n];\n\nconst tsdbResolutions = [\n  { label: 'second', value: 1 },\n  { label: 'millisecond', value: 2 },\n];\n\ninterface Props {\n  value: DataSourceSettings<OpenTsdbOptions>;\n  onChange: (value: DataSourceSettings<OpenTsdbOptions>) => void;\n}\n\nexport const OpenTsdbDetails = (props: Props) => {\n  const { onChange, value } = props;\n\n  const idSuffix = useId();\n\n  return (\n    <>\n      <FieldSet label=\"OpenTSDB settings\">\n        <Field htmlFor={`select-version-${idSuffix}`} label=\"Version\">\n          <Select\n            inputId={`select-version-${idSuffix}`}\n            options={tsdbVersions}\n            value={tsdbVersions.find((version) => version.value === value.jsonData.tsdbVersion) ?? tsdbVersions[0]}\n            onChange={onSelectChangeHandler('tsdbVersion', value, onChange)}\n            width={20}\n          />\n        </Field>\n        <Field htmlFor={`select-resolution-${idSuffix}`} label=\"Resolution\">\n          <Select\n            inputId={`select-resolution-${idSuffix}`}\n            options={tsdbResolutions}\n            value={\n              tsdbResolutions.find((resolution) => resolution.value === value.jsonData.tsdbResolution) ??\n              tsdbResolutions[0]\n            }\n            onChange={onSelectChangeHandler('tsdbResolution', value, onChange)}\n            width={20}\n          />\n        </Field>\n        <Field htmlFor={`lookup-input-${idSuffix}`} label=\"Lookup limit\">\n          <Input\n            id={`lookup-input-${idSuffix}`}\n            type=\"number\"\n            value={value.jsonData.lookupLimit ?? 1000}\n            onChange={onInputChangeHandler('lookupLimit', value, onChange)}\n            width={20}\n          />\n        </Field>\n      </FieldSet>\n    </>\n  );\n};\n\nconst onSelectChangeHandler =\n  (key: keyof OpenTsdbOptions, value: Props['value'], onChange: Props['onChange']) => (newValue: SelectableValue) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: newValue.value,\n      },\n    });\n  };\n\nconst onInputChangeHandler =\n  (key: keyof OpenTsdbOptions, value: Props['value'], onChange: Props['onChange']) =>\n  (event: SyntheticEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: event.currentTarget.value,\n      },\n    });\n  };\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, QueryEditorProps, textUtil } from '@grafana/data';\nimport { useStyles2, Stack } from '@grafana/ui';\n\nimport OpenTsDatasource from '../datasource';\nimport { OpenTsdbOptions, OpenTsdbQuery } from '../types';\n\nimport { DownSample } from './DownSample';\nimport { FilterSection } from './FilterSection';\nimport { MetricSection } from './MetricSection';\nimport { RateSection } from './RateSection';\nimport { TagSection } from './TagSection';\n\nexport type OpenTsdbQueryEditorProps = QueryEditorProps<OpenTsDatasource, OpenTsdbQuery, OpenTsdbOptions>;\n\nexport function OpenTsdbQueryEditor({\n  datasource,\n  onRunQuery,\n  onChange,\n  query,\n  range,\n  queries,\n}: OpenTsdbQueryEditorProps) {\n  const styles = useStyles2(getStyles);\n\n  const [aggregators, setAggregators] = useState<string[]>([\n    'avg',\n    'sum',\n    'min',\n    'max',\n    'dev',\n    'zimsum',\n    'mimmin',\n    'mimmax',\n  ]);\n\n  const fillPolicies: string[] = ['none', 'nan', 'null', 'zero'];\n\n  const [filterTypes, setFilterTypes] = useState<string[]>([\n    'wildcard',\n    'iliteral_or',\n    'not_iliteral_or',\n    'not_literal_or',\n    'iwildcard',\n    'literal_or',\n    'regexp',\n  ]);\n\n  const tsdbVersion: number = datasource.tsdbVersion;\n\n  if (!query.aggregator) {\n    query.aggregator = 'sum';\n  }\n\n  if (!query.downsampleAggregator) {\n    query.downsampleAggregator = 'avg';\n  }\n\n  if (!query.downsampleFillPolicy) {\n    query.downsampleFillPolicy = 'none';\n  }\n\n  useEffect(() => {\n    datasource.getAggregators().then((aggs: string[]) => {\n      if (aggs.length !== 0) {\n        setAggregators(aggs);\n      }\n    });\n  }, [datasource]);\n\n  useEffect(() => {\n    datasource.getFilterTypes().then((newFilterTypes: string[]) => {\n      if (newFilterTypes.length !== 0) {\n        setFilterTypes(newFilterTypes);\n      }\n    });\n  }, [datasource]);\n\n  async function suggestMetrics(value: string): Promise<Array<{ value: string; description: string }>> {\n    return datasource.metricFindQuery(`metrics(${value})`).then(getTextValues);\n  }\n\n  // previously called as an autocomplete on every input,\n  // in this we call it once on init and filter in the MetricSection component\n  async function suggestTagValues(value: string): Promise<Array<{ value: string; description: string }>> {\n    return datasource.metricFindQuery(`suggest_tagv(${value})`).then(getTextValues);\n  }\n\n  async function suggestTagKeys(query: OpenTsdbQuery): Promise<string[]> {\n    return datasource.suggestTagKeys(query);\n  }\n\n  function getTextValues(metrics: Array<{ text: string }>) {\n    const variables = datasource.getVariables().map((value) => {\n      return {\n        value: textUtil.escapeHtml(value),\n        description: value,\n      };\n    });\n\n    const values = metrics.map((value: { text: string }) => {\n      return {\n        value: textUtil.escapeHtml(value.text),\n        description: value.text,\n      };\n    });\n\n    return variables.concat(values);\n  }\n\n  return (\n    <div className={styles.container} data-testid={testIds.editor}>\n      <Stack gap={0.5} direction=\"column\" grow={1}>\n        <MetricSection\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          suggestMetrics={suggestMetrics}\n          aggregators={aggregators}\n        />\n        <DownSample\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          aggregators={aggregators}\n          fillPolicies={fillPolicies}\n          tsdbVersion={tsdbVersion}\n        />\n        {tsdbVersion >= 2 && (\n          <FilterSection\n            query={query}\n            onChange={onChange}\n            onRunQuery={onRunQuery}\n            filterTypes={filterTypes}\n            suggestTagValues={suggestTagValues}\n            suggestTagKeys={suggestTagKeys}\n          />\n        )}\n        <TagSection\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          suggestTagValues={suggestTagValues}\n          suggestTagKeys={suggestTagKeys}\n          tsdbVersion={tsdbVersion}\n        />\n        <RateSection query={query} onChange={onChange} onRunQuery={onRunQuery} tsdbVersion={tsdbVersion} />\n      </Stack>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      display: flex;\n    `,\n    toggleButton: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n  };\n}\n\nexport const testIds = {\n  editor: 'opentsdb-editor',\n};\n","import React from 'react';\n\nimport { InlineLabel, Input, InlineFormLabel, InlineSwitch, Stack } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface RateSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  tsdbVersion: number;\n}\n\nexport function RateSection({ query, onChange, onRunQuery, tsdbVersion }: RateSectionProps) {\n  return (\n    <Stack gap={0} data-testid={testIds.section}>\n      <InlineFormLabel className=\"query-keyword\" width={8}>\n        Rate\n      </InlineFormLabel>\n      <InlineSwitch\n        data-testid={testIds.shouldComputeRate}\n        value={query.shouldComputeRate ?? false}\n        onChange={() => {\n          const shouldComputeRate = query.shouldComputeRate ?? false;\n          onChange({ ...query, shouldComputeRate: !shouldComputeRate });\n          onRunQuery();\n        }}\n      />\n\n      {query.shouldComputeRate && (\n        <>\n          <InlineFormLabel className=\"query-keyword\" width={'auto'}>\n            Counter\n          </InlineFormLabel>\n          <InlineSwitch\n            data-testid={testIds.isCounter}\n            value={query.isCounter ?? false}\n            onChange={() => {\n              const isCounter = query.isCounter ?? false;\n              onChange({ ...query, isCounter: !isCounter });\n              onRunQuery();\n            }}\n          />\n        </>\n      )}\n      {query.shouldComputeRate && query.isCounter && (\n        <Stack gap={0}>\n          <InlineLabel width={'auto'} className=\"query-keyword\">\n            Counter max\n          </InlineLabel>\n          <Input\n            data-testid={testIds.counterMax}\n            placeholder=\"max value\"\n            value={query.counterMax ?? ''}\n            onChange={(e) => {\n              const value = e.currentTarget.value;\n              onChange({ ...query, counterMax: value });\n            }}\n            onBlur={() => onRunQuery()}\n          />\n          <InlineLabel width={'auto'} className=\"query-keyword\">\n            Reset value\n          </InlineLabel>\n          <Input\n            data-testid={testIds.counterResetValue}\n            placeholder=\"reset value\"\n            value={query.counterResetValue ?? ''}\n            onChange={(e) => {\n              const value = e.currentTarget.value;\n              onChange({ ...query, counterResetValue: value });\n            }}\n            onBlur={() => onRunQuery()}\n          />\n        </Stack>\n      )}\n      {tsdbVersion > 2 && (\n        <>\n          <InlineFormLabel className=\"query-keyword\" width={'auto'}>\n            Explicit tags\n          </InlineFormLabel>\n          <InlineSwitch\n            data-testid={testIds.explicitTags}\n            value={query.explicitTags ?? false}\n            onChange={() => {\n              const explicitTags = query.explicitTags ?? false;\n              onChange({ ...query, explicitTags: !explicitTags });\n              onRunQuery();\n            }}\n          />\n        </>\n      )}\n      <Stack gap={0} grow={1}>\n        <InlineLabel> </InlineLabel>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-rate',\n  shouldComputeRate: 'opentsdb-shouldComputeRate',\n  isCounter: 'opentsdb-is-counter',\n  counterMax: 'opentsdb-counter-max',\n  counterResetValue: 'opentsdb-counter-reset-value',\n  explicitTags: 'opentsdb-explicit-tags',\n};\n","import debounce from 'debounce-promise';\nimport { has, size } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport {\n  Select,\n  InlineFormLabel,\n  Icon,\n  clearButtonStyles,\n  useStyles2,\n  AsyncSelect,\n  Stack,\n  InlineLabel,\n} from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface TagSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  suggestTagKeys: (query: OpenTsdbQuery) => Promise<string[]>;\n  suggestTagValues: (value: string) => Promise<SelectableValue[]>;\n  tsdbVersion: number;\n}\n\nexport function TagSection({\n  query,\n  onChange,\n  onRunQuery,\n  suggestTagKeys,\n  suggestTagValues,\n  tsdbVersion,\n}: TagSectionProps) {\n  const buttonStyles = useStyles2(clearButtonStyles);\n\n  const [tagKeys, updTagKeys] = useState<Array<SelectableValue<string>>>();\n  const [keyIsLoading, updKeyIsLoading] = useState<boolean>();\n\n  const [addTagMode, updAddTagMode] = useState<boolean>(false);\n\n  const [curTagKey, updCurTagKey] = useState<string | number>('');\n  const [curTagValue, updCurTagValue] = useState<string>('');\n\n  const [errors, setErrors] = useState<string>('');\n\n  function changeAddTagMode() {\n    updAddTagMode(!addTagMode);\n  }\n\n  function addTag() {\n    if (query.filters && size(query.filters) > 0) {\n      const err = 'Please remove filters to use tags, tags and filters are mutually exclusive.';\n      setErrors(err);\n      return;\n    }\n\n    if (!addTagMode) {\n      updAddTagMode(true);\n      return;\n    }\n\n    // check for duplicate tags\n    if (query.tags && has(query.tags, curTagKey)) {\n      const err = \"Duplicate tag key '\" + curTagKey + \"'.\";\n      setErrors(err);\n      return;\n    }\n\n    // tags may be undefined\n    if (!query.tags) {\n      query.tags = {};\n    }\n\n    // add tag to query\n    query.tags[curTagKey] = curTagValue;\n\n    // reset the inputs\n    updCurTagKey('');\n    updCurTagValue('');\n\n    // fire the query\n    onChange(query);\n    onRunQuery();\n\n    // close the tag ditor\n    changeAddTagMode();\n  }\n\n  function removeTag(key: string | number) {\n    delete query.tags[key];\n\n    // fire off the query\n    onChange(query);\n    onRunQuery();\n  }\n\n  function editTag(key: string | number, value: string) {\n    removeTag(key);\n    updCurTagKey(key);\n    updCurTagValue(value);\n    addTag();\n  }\n\n  const tagValueSearch = debounce((query: string) => suggestTagValues(query), 350);\n\n  return (\n    <Stack gap={0} data-testid={testIds.section}>\n      <InlineFormLabel\n        className=\"query-keyword\"\n        width={8}\n        tooltip={tsdbVersion >= 2 ? <div>Please use filters, tags are deprecated in opentsdb 2.2</div> : undefined}\n      >\n        Tags\n      </InlineFormLabel>\n      {query.tags &&\n        Object.keys(query.tags).map((tagKey: string | number, idx: number) => {\n          const tagValue = query.tags[tagKey];\n          return (\n            <InlineFormLabel key={idx} width=\"auto\" data-testid={testIds.list + idx}>\n              {tagKey}={tagValue}\n              <button type=\"button\" className={buttonStyles} onClick={() => editTag(tagKey, tagValue)}>\n                <Icon name={'pen'} />\n              </button>\n              <button\n                type=\"button\"\n                className={buttonStyles}\n                onClick={() => removeTag(tagKey)}\n                data-testid={testIds.remove}\n              >\n                <Icon name={'times'} />\n              </button>\n            </InlineFormLabel>\n          );\n        })}\n      {!addTagMode && (\n        <InlineFormLabel width={2}>\n          <button type=\"button\" className={buttonStyles} onClick={changeAddTagMode} aria-label=\"Add tag\">\n            <Icon name={'plus'} />\n          </button>\n        </InlineFormLabel>\n      )}\n\n      {addTagMode && (\n        <Stack gap={0.5} alignItems=\"center\">\n          <Stack gap={0}>\n            <Select\n              inputId=\"opentsdb-suggested-tagk-select\"\n              value={curTagKey ? toOption('' + curTagKey) : undefined}\n              placeholder=\"key\"\n              allowCustomValue\n              onOpenMenu={async () => {\n                updKeyIsLoading(true);\n                const tKs = await suggestTagKeys(query);\n                const tKsOptions = tKs.map((value: string) => toOption(value));\n                updTagKeys(tKsOptions);\n                updKeyIsLoading(false);\n              }}\n              isLoading={keyIsLoading}\n              options={tagKeys}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurTagKey(value);\n                }\n              }}\n            />\n          </Stack>\n\n          <Stack gap={0}>\n            <AsyncSelect\n              inputId=\"opentsdb-suggested-tagv-select\"\n              value={curTagValue ? toOption(curTagValue) : undefined}\n              placeholder=\"value\"\n              allowCustomValue\n              loadOptions={tagValueSearch}\n              defaultOptions={[]}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurTagValue(value);\n                }\n              }}\n            />\n          </Stack>\n\n          <Stack gap={0}>\n            {errors && (\n              <InlineLabel title={errors} data-testid={testIds.error}>\n                <Icon name={'exclamation-triangle'} color={'rgb(229, 189, 28)'} />\n              </InlineLabel>\n            )}\n\n            <InlineFormLabel width={5.5}>\n              <button type=\"button\" className={buttonStyles} onClick={addTag}>\n                add tag\n              </button>\n              <button type=\"button\" className={buttonStyles} onClick={changeAddTagMode}>\n                <Icon name={'times'} />\n              </button>\n            </InlineFormLabel>\n          </Stack>\n        </Stack>\n      )}\n      <Stack gap={0} grow={1}>\n        <InlineLabel> </InlineLabel>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-tag',\n  list: 'opentsdb-tag-list',\n  error: 'opentsdb-tag-error',\n  remove: 'opentsdb-tag-remove',\n};\n","import {\n  clone,\n  cloneDeep,\n  compact,\n  each,\n  every,\n  filter,\n  findIndex,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map as _map,\n  toPairs,\n} from 'lodash';\nimport { lastValueFrom, merge, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  dateMath,\n  DateTime,\n  ScopedVars,\n  toDataFrame,\n} from '@grafana/data';\nimport { FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { getTemplateSrv, TemplateSrv } from '../../../features/templating/template_srv';\n\nimport { AnnotationEditor } from './components/AnnotationEditor';\nimport { prepareAnnotation } from './migrations';\nimport { OpenTsdbFilter, OpenTsdbOptions, OpenTsdbQuery } from './types';\n\nexport default class OpenTsDatasource extends DataSourceApi<OpenTsdbQuery, OpenTsdbOptions> {\n  type: 'opentsdb';\n  url: string;\n  name: string;\n  withCredentials: boolean;\n  basicAuth: any;\n  tsdbVersion: number;\n  tsdbResolution: number;\n  lookupLimit: number;\n  tagKeys: Record<string | number, string[]>;\n\n  aggregatorsPromise: Promise<string[]> | null;\n  filterTypesPromise: Promise<string[]> | null;\n\n  constructor(\n    instanceSettings: any,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.type = 'opentsdb';\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n    instanceSettings.jsonData = instanceSettings.jsonData || {};\n    this.tsdbVersion = instanceSettings.jsonData.tsdbVersion || 1;\n    this.tsdbResolution = instanceSettings.jsonData.tsdbResolution || 1;\n    this.lookupLimit = instanceSettings.jsonData.lookupLimit || 1000;\n    this.tagKeys = {};\n\n    this.aggregatorsPromise = null;\n    this.filterTypesPromise = null;\n    this.annotations = {\n      QueryEditor: AnnotationEditor,\n      prepareAnnotation,\n    };\n  }\n\n  // Called once per panel (graph)\n  query(options: DataQueryRequest<OpenTsdbQuery>): Observable<DataQueryResponse> {\n    // migrate annotations\n    if (options.targets.some((target: OpenTsdbQuery) => target.fromAnnotations)) {\n      const streams: Array<Observable<DataQueryResponse>> = [];\n\n      for (const annotation of options.targets) {\n        if (annotation.target) {\n          streams.push(\n            new Observable((subscriber) => {\n              this.annotationEvent(options, annotation)\n                .then((events) => subscriber.next({ data: [toDataFrame(events)] }))\n                .catch((ex) => {\n                  // grafana fetch throws the error so for annotation consistency among datasources\n                  // we return an empty array which displays as 'no events found'\n                  // in the annnotation editor\n                  return subscriber.next({ data: [toDataFrame([])] });\n                })\n                .finally(() => subscriber.complete());\n            })\n          );\n        }\n      }\n\n      return merge(...streams);\n    }\n\n    const start = this.convertToTSDBTime(options.range.raw.from, false, options.timezone);\n    const end = this.convertToTSDBTime(options.range.raw.to, true, options.timezone);\n    const qs: any[] = [];\n\n    each(options.targets, (target) => {\n      if (!target.metric) {\n        return;\n      }\n      qs.push(this.convertTargetToQuery(target, options, this.tsdbVersion));\n    });\n\n    const queries = compact(qs);\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(queries)) {\n      return of({ data: [] });\n    }\n\n    const groupByTags: Record<string, boolean> = {};\n    each(queries, (query) => {\n      if (query.filters && query.filters.length > 0) {\n        each(query.filters, (val) => {\n          groupByTags[val.tagk] = true;\n        });\n      } else {\n        each(query.tags, (val, key) => {\n          groupByTags[key] = true;\n        });\n      }\n    });\n\n    options.targets = filter(options.targets, (query) => {\n      return query.hide !== true;\n    });\n\n    return this.performTimeSeriesQuery(queries, start, end).pipe(\n      catchError((err) => {\n        // Throw the error message here instead of the whole object to workaround the error parsing error.\n        throw err?.data?.error?.message || 'Error performing time series query.';\n      }),\n      map((response) => {\n        const metricToTargetMapping = this.mapMetricsToTargets(response.data, options, this.tsdbVersion);\n        const result = _map(response.data, (metricData, index: number) => {\n          index = metricToTargetMapping[index];\n          if (index === -1) {\n            index = 0;\n          }\n          this._saveTagKeys(metricData);\n\n          return this.transformMetricData(\n            metricData,\n            groupByTags,\n            options.targets[index],\n            options,\n            this.tsdbResolution\n          );\n        });\n        return { data: result };\n      })\n    );\n  }\n\n  annotationEvent(options: DataQueryRequest, annotation: OpenTsdbQuery): Promise<AnnotationEvent[]> {\n    const start = this.convertToTSDBTime(options.range.raw.from, false, options.timezone);\n    const end = this.convertToTSDBTime(options.range.raw.to, true, options.timezone);\n    const qs = [];\n    const eventList: AnnotationEvent[] = [];\n\n    qs.push({ aggregator: 'sum', metric: annotation.target });\n\n    const queries = compact(qs);\n\n    return lastValueFrom(\n      this.performTimeSeriesQuery(queries, start, end).pipe(\n        map((results) => {\n          if (results.data[0]) {\n            let annotationObject = results.data[0].annotations;\n            if (annotation.isGlobal) {\n              annotationObject = results.data[0].globalAnnotations;\n            }\n            if (annotationObject) {\n              each(annotationObject, (ann) => {\n                const event = {\n                  text: ann.description,\n                  time: Math.floor(ann.startTime) * 1000,\n                  annotation: annotation,\n                };\n\n                eventList.push(event);\n              });\n            }\n          }\n          return eventList;\n        })\n      )\n    );\n  }\n\n  targetContainsTemplate(target: any) {\n    if (target.filters && target.filters.length > 0) {\n      for (let i = 0; i < target.filters.length; i++) {\n        if (this.templateSrv.containsTemplate(target.filters[i].filter)) {\n          return true;\n        }\n      }\n    }\n\n    if (target.tags && Object.keys(target.tags).length > 0) {\n      for (const tagKey in target.tags) {\n        if (this.templateSrv.containsTemplate(target.tags[tagKey])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  performTimeSeriesQuery(queries: any[], start: number | null, end: number | null): Observable<FetchResponse> {\n    let msResolution = false;\n    if (this.tsdbResolution === 2) {\n      msResolution = true;\n    }\n    const reqBody: any = {\n      start: start,\n      queries: queries,\n      msResolution: msResolution,\n      globalAnnotations: true,\n    };\n    if (this.tsdbVersion === 3) {\n      reqBody.showQuery = true;\n    }\n\n    // Relative queries (e.g. last hour) don't include an end time\n    if (end) {\n      reqBody.end = end;\n    }\n\n    const options = {\n      method: 'POST',\n      url: this.url + '/api/query',\n      data: reqBody,\n    };\n\n    this._addCredentialOptions(options);\n    return getBackendSrv().fetch(options);\n  }\n\n  suggestTagKeys(query: OpenTsdbQuery) {\n    const metric = query.metric ?? '';\n    return Promise.resolve(this.tagKeys[metric] || []);\n  }\n\n  _saveTagKeys(metricData: { tags: {}; aggregateTags: any; metric: string | number }) {\n    const tagKeys = Object.keys(metricData.tags);\n    each(metricData.aggregateTags, (tag) => {\n      tagKeys.push(tag);\n    });\n\n    this.tagKeys[metricData.metric] = tagKeys;\n  }\n\n  _performSuggestQuery(query: string, type: string) {\n    return this._get('/api/suggest', { type, q: query, max: this.lookupLimit }).pipe(\n      map((result) => {\n        return result.data;\n      })\n    );\n  }\n\n  _performMetricKeyValueLookup(metric: string, keys: string) {\n    if (!metric || !keys) {\n      return of([]);\n    }\n\n    const keysArray = keys.split(',').map((key) => {\n      return key.trim();\n    });\n    const key = keysArray[0];\n    let keysQuery = key + '=*';\n\n    if (keysArray.length > 1) {\n      keysQuery += ',' + keysArray.splice(1).join(',');\n    }\n\n    const m = metric + '{' + keysQuery + '}';\n\n    return this._get('/api/search/lookup', { m: m, limit: this.lookupLimit }).pipe(\n      map((result) => {\n        result = result.data.results;\n        const tagvs: any[] = [];\n        each(result, (r) => {\n          if (tagvs.indexOf(r.tags[key]) === -1) {\n            tagvs.push(r.tags[key]);\n          }\n        });\n        return tagvs;\n      })\n    );\n  }\n\n  _performMetricKeyLookup(metric: string) {\n    if (!metric) {\n      return of([]);\n    }\n\n    return this._get('/api/search/lookup', { m: metric, limit: 1000 }).pipe(\n      map((result) => {\n        result = result.data.results;\n        const tagks: any[] = [];\n        each(result, (r) => {\n          each(r.tags, (tagv, tagk) => {\n            if (tagks.indexOf(tagk) === -1) {\n              tagks.push(tagk);\n            }\n          });\n        });\n        return tagks;\n      })\n    );\n  }\n\n  _get(\n    relativeUrl: string,\n    params?: { type?: string; q?: string; max?: number; m?: string; limit?: number }\n  ): Observable<FetchResponse> {\n    const options = {\n      method: 'GET',\n      url: this.url + relativeUrl,\n      params: params,\n    };\n\n    this._addCredentialOptions(options);\n\n    return getBackendSrv().fetch(options);\n  }\n\n  _addCredentialOptions(options: Record<string, unknown>) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = { Authorization: this.basicAuth };\n    }\n  }\n\n  metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    let interpolated;\n    try {\n      interpolated = this.templateSrv.replace(query, {}, 'distributed');\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    const responseTransform = (result: any) => {\n      return _map(result, (value) => {\n        return { text: value };\n      });\n    };\n\n    const metricsRegex = /metrics\\((.*)\\)/;\n    const tagNamesRegex = /tag_names\\((.*)\\)/;\n    const tagValuesRegex = /tag_values\\((.*?),\\s?(.*)\\)/;\n    const tagNamesSuggestRegex = /suggest_tagk\\((.*)\\)/;\n    const tagValuesSuggestRegex = /suggest_tagv\\((.*)\\)/;\n\n    const metricsQuery = interpolated.match(metricsRegex);\n    if (metricsQuery) {\n      return lastValueFrom(this._performSuggestQuery(metricsQuery[1], 'metrics').pipe(map(responseTransform)));\n    }\n\n    const tagNamesQuery = interpolated.match(tagNamesRegex);\n    if (tagNamesQuery) {\n      return lastValueFrom(this._performMetricKeyLookup(tagNamesQuery[1]).pipe(map(responseTransform)));\n    }\n\n    const tagValuesQuery = interpolated.match(tagValuesRegex);\n    if (tagValuesQuery) {\n      return lastValueFrom(\n        this._performMetricKeyValueLookup(tagValuesQuery[1], tagValuesQuery[2]).pipe(map(responseTransform))\n      );\n    }\n\n    const tagNamesSuggestQuery = interpolated.match(tagNamesSuggestRegex);\n    if (tagNamesSuggestQuery) {\n      return lastValueFrom(this._performSuggestQuery(tagNamesSuggestQuery[1], 'tagk').pipe(map(responseTransform)));\n    }\n\n    const tagValuesSuggestQuery = interpolated.match(tagValuesSuggestRegex);\n    if (tagValuesSuggestQuery) {\n      return lastValueFrom(this._performSuggestQuery(tagValuesSuggestQuery[1], 'tagv').pipe(map(responseTransform)));\n    }\n\n    return Promise.resolve([]);\n  }\n\n  testDatasource() {\n    return lastValueFrom(\n      this._performSuggestQuery('cpu', 'metrics').pipe(\n        map(() => {\n          return { status: 'success', message: 'Data source is working' };\n        })\n      )\n    );\n  }\n\n  getAggregators() {\n    if (this.aggregatorsPromise) {\n      return this.aggregatorsPromise;\n    }\n\n    this.aggregatorsPromise = lastValueFrom(\n      this._get('/api/aggregators').pipe(\n        map((result) => {\n          if (result.data && isArray(result.data)) {\n            return result.data.sort();\n          }\n          return [];\n        })\n      )\n    );\n    return this.aggregatorsPromise;\n  }\n\n  getFilterTypes() {\n    if (this.filterTypesPromise) {\n      return this.filterTypesPromise;\n    }\n\n    this.filterTypesPromise = lastValueFrom(\n      this._get('/api/config/filters').pipe(\n        map((result) => {\n          if (result.data) {\n            return Object.keys(result.data).sort();\n          }\n          return [];\n        })\n      )\n    );\n    return this.filterTypesPromise;\n  }\n\n  transformMetricData(\n    md: { dps: any },\n    groupByTags: Record<string, boolean>,\n    target: OpenTsdbQuery,\n    options: DataQueryRequest<OpenTsdbQuery>,\n    tsdbResolution: number\n  ) {\n    const metricLabel = this.createMetricLabel(md, target, groupByTags, options);\n    const dps: any[] = [];\n\n    // TSDB returns datapoints has a hash of ts => value.\n    // Can't use pairs(invert()) because it stringifies keys/values\n    each(md.dps, (v, k: number) => {\n      if (tsdbResolution === 2) {\n        dps.push([v, k * 1]);\n      } else {\n        dps.push([v, k * 1000]);\n      }\n    });\n\n    return { target: metricLabel, datapoints: dps };\n  }\n\n  createMetricLabel(\n    md: { dps?: any; tags?: any; metric?: any },\n    target: OpenTsdbQuery,\n    groupByTags: Record<string, boolean>,\n    options: DataQueryRequest<OpenTsdbQuery>\n  ) {\n    if (target.alias) {\n      const scopedVars = clone(options.scopedVars || {});\n      each(md.tags, (value, key) => {\n        scopedVars['tag_' + key] = { value: value };\n      });\n      return this.templateSrv.replace(target.alias, scopedVars);\n    }\n\n    let label = md.metric;\n    const tagData: any[] = [];\n\n    if (!isEmpty(md.tags)) {\n      each(toPairs(md.tags), (tag) => {\n        if (has(groupByTags, tag[0])) {\n          tagData.push(tag[0] + '=' + tag[1]);\n        }\n      });\n    }\n\n    if (!isEmpty(tagData)) {\n      label += '{' + tagData.join(', ') + '}';\n    }\n\n    return label;\n  }\n\n  convertTargetToQuery(target: OpenTsdbQuery, options: DataQueryRequest<OpenTsdbQuery>, tsdbVersion: number) {\n    if (!target.metric || target.hide) {\n      return null;\n    }\n\n    const query = this.interpolateVariablesInQuery(target, options.scopedVars);\n\n    if (target.shouldComputeRate) {\n      query.rate = true;\n      query.rateOptions = {\n        counter: !!target.isCounter,\n      };\n\n      if (target.counterMax && target.counterMax.length) {\n        query.rateOptions.counterMax = parseInt(target.counterMax, 10);\n      }\n\n      if (target.counterResetValue && target.counterResetValue.length) {\n        query.rateOptions.resetValue = parseInt(target.counterResetValue, 10);\n      }\n\n      if (tsdbVersion >= 2) {\n        query.rateOptions.dropResets =\n          !query.rateOptions.counterMax && (!query.rateOptions.ResetValue || query.rateOptions.ResetValue === 0);\n      }\n    }\n\n    if (!target.disableDownsampling) {\n      let interval = this.templateSrv.replace(target.downsampleInterval || options.interval);\n\n      if (interval.match(/\\.[0-9]+s/)) {\n        interval = parseFloat(interval) * 1000 + 'ms';\n      }\n\n      query.downsample = interval + '-' + target.downsampleAggregator;\n\n      if (target.downsampleFillPolicy && target.downsampleFillPolicy !== 'none') {\n        query.downsample += '-' + target.downsampleFillPolicy;\n      }\n    }\n\n    if (target.explicitTags) {\n      query.explicitTags = true;\n    }\n\n    return query;\n  }\n\n  interpolateVariablesInFilters(query: OpenTsdbQuery, scopedVars: ScopedVars) {\n    query.filters = query.filters?.map((filter: OpenTsdbFilter): OpenTsdbFilter => {\n      filter.tagk = this.templateSrv.replace(filter.tagk, scopedVars, 'pipe');\n\n      filter.filter = this.templateSrv.replace(filter.filter, scopedVars, 'pipe');\n\n      return filter;\n    });\n  }\n\n  getVariables(): string[] {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  mapMetricsToTargets(metrics: any, options: DataQueryRequest<OpenTsdbQuery>, tsdbVersion: number) {\n    let interpolatedTagValue, arrTagV;\n    return _map(metrics, (metricData) => {\n      if (tsdbVersion === 3) {\n        return metricData.query.index;\n      } else {\n        return findIndex(options.targets, (target) => {\n          if (target.filters && target.filters.length > 0) {\n            return target.metric === metricData.metric;\n          } else {\n            return (\n              target.metric === metricData.metric &&\n              every(target.tags, (tagV, tagK) => {\n                interpolatedTagValue = this.templateSrv.replace(tagV, options.scopedVars, 'pipe');\n                arrTagV = interpolatedTagValue.split('|');\n                return includes(arrTagV, metricData.tags[tagK]) || interpolatedTagValue === '*';\n              })\n            );\n          }\n        });\n      }\n    });\n  }\n\n  interpolateVariablesInQueries(queries: OpenTsdbQuery[], scopedVars: ScopedVars): OpenTsdbQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map((query) => this.interpolateVariablesInQuery(query, scopedVars));\n  }\n\n  interpolateVariablesInQuery(target: OpenTsdbQuery, scopedVars: ScopedVars): any {\n    const query = cloneDeep(target);\n\n    query.metric = this.templateSrv.replace(target.metric, scopedVars, 'pipe');\n\n    query.aggregator = 'avg';\n    if (target.aggregator) {\n      query.aggregator = this.templateSrv.replace(target.aggregator);\n    }\n\n    if (query.filters && query.filters.length > 0) {\n      this.interpolateVariablesInFilters(query, scopedVars);\n    } else {\n      if (query.tags) {\n        for (const tagKey in query.tags) {\n          query.tags[tagKey] = this.templateSrv.replace(query.tags[tagKey], scopedVars, 'pipe');\n        }\n      }\n    }\n\n    return query;\n  }\n\n  convertToTSDBTime(date: string | DateTime, roundUp: boolean, timezone: string) {\n    if (date === 'now') {\n      return null;\n    }\n\n    const dateTime = dateMath.parse(date, roundUp, timezone);\n    return dateTime?.valueOf() ?? null;\n  }\n}\n","import { LegacyAnnotation } from './types';\n\n// this becomes the target in the migrated annotations\nconst migrateLegacyAnnotation = (json: LegacyAnnotation) => {\n  // return the target annotation\n  const annotation: LegacyAnnotation = {\n    fromAnnotations: true,\n    target: json.target ?? '',\n    name: json.name ?? '',\n    isGlobal: json.isGlobal ?? false,\n  };\n\n  return annotation;\n};\n\n// eslint-ignore-next-line\nexport const prepareAnnotation = (json: any) => {\n  const resultingTarget = json.target && typeof json.target !== 'string' ? json.target : migrateLegacyAnnotation(json);\n\n  json.target = resultingTarget;\n\n  return json;\n};\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { OpenTsdbQueryEditor } from './components/OpenTsdbQueryEditor';\nimport OpenTsDatasource from './datasource';\n\nexport const plugin = new DataSourcePlugin(OpenTsDatasource)\n  .setQueryEditor(OpenTsdbQueryEditor)\n  .setConfigEditor(ConfigEditor);\n"],"names":["isGlobal","_a","query","key","filter"],"sourceRoot":""}