{"version":3,"file":"public_app_plugins_datasource_dashboard_module_ts.ae64e94dc365882fd5c5.js","mappings":";;;;;;;;;;;;;;;;;;AAAqD;AAQ9C;AAC8D;AACT;AAOrD,MAAM,4BAA4B,wDAAa,CAAiB;AAAA,EACrE,YAAY,kBAA8C;AACxD,UAAM,gBAAgB;AAAA,EACxB;AAAA,EAEA,iBAAiB,OAAuB;AACtC,WAAO,wBAAwB,aAAM;AAAA,EACvC;AAAA,EAEA,MAAM,SAA0E;AA1BlF;AA2BI,UAAM,SAAiC,mBAAQ,eAAR,mBAAoB,kBAApB,mBAAmC;AAE1E,QAAI,QAAQ,UAAU,QAAQ,OAAO,IAAI,IAAI;AAC3C,YAAM,IAAI,MAAM,8DAA8D;AAAA,IAChF;AAEA,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACnD;AAEA,UAAM,QAAQ,QAAQ,QAAQ,CAAC;AAC/B,QAAI,CAAC,OAAO;AACV,aAAO,wCAAE,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC;AAAA,IACxB;AAEA,UAAM,UAAU,MAAM;AAEtB,QAAI,CAAC,SAAS;AACZ,aAAO,wCAAE,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC;AAAA,IACxB;AAEA,QAAI,cAAc,KAAK,gBAAgB,OAAO,OAAO;AAErD,QAAI,CAAC,aAAa;AAChB,aAAO,wCAAE,CAAC,EAAE,MAAM,CAAC,GAAG,OAAO,EAAE,SAAS,8BAA8B,EAAE,CAAC;AAAA,IAC3E;AAEA,QAAI,qBAAoD,YAAY,MAAM;AAE1E,QAAI,CAAC,MAAM,kBAAkB,8BAA8B,iEAAoB,EAAE;AAC/E,2BAAqB,mBAAmB,MAAM;AAAA,IAChD;AAEA,QAAI,CAAC,sBAAsB,CAAC,mBAAmB,kBAAkB;AAC/D,aAAO,wCAAE,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC;AAAA,IACxB;AAEA,WAAO,2CAAK,CAAC,MAAM;AACjB,UAAI,CAAC,mBAAoB,aAAY,yDAAoB,oBAAmB;AAC1E,iEAAoB,kBAAkB;AAAA,MACxC;AAEA,YAAM,UAAU,mBAAoB,SAAS;AAE7C,aAAO,mBAAoB,iBAAkB,EAAE;AAAA,QAC7C,yCAAG,CAAC,CAAC,WAAW;AACd,iBAAO;AAAA,YACL,MAAM,OAAO,KAAK;AAAA,YAClB,OAAO,OAAO,KAAK;AAAA,YACnB,QAAQ,OAAO,KAAK;AAAA,YACpB,OAAO,OAAO,KAAK;AAAA,YACnB,KAAK;AAAA,UACP;AAAA,QACF,CAAC;AAAA,QACD,8CAAQ,CAAC,OAAO;AAAA,MAClB;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEQ,gBAAgB,OAAoB,SAAiB;AAC3D,WAAO,wFAAiB,CAAC,OAAO,+FAAwB,CAAC,OAAO,CAAC;AAAA,EACnE;AAAA,EAEA,iBAAkD;AAChD,WAAO,QAAQ,QAAQ,EAAE,SAAS,IAAI,QAAQ,GAAG,CAAC;AAAA,EACpD;AACF;;;;;;;;;;;;;;;;AC7FiC;AAEI;AACD;AAE7B,MAAM,SAAS,IAAI,2DAAgB,CAAC,4DAAmB,EAAE,eAAe,uEAAoB","sources":["webpack://grafana/./public/app/plugins/datasource/dashboard/datasource.ts","webpack://grafana/./public/app/plugins/datasource/dashboard/module.ts"],"sourcesContent":["import { Observable, defer, finalize, map, of } from 'rxjs';\n\nimport {\n  DataSourceApi,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  TestDataSourceResponse,\n} from '@grafana/data';\nimport { SceneDataProvider, SceneDataTransformer, SceneObject } from '@grafana/scenes';\nimport { findVizPanelByKey, getVizPanelKeyForPanelId } from '../../../features/dashboard-scene/utils/utils';\n\nimport { DashboardQuery } from './types';\n\n/**\n * This should not really be called\n */\nexport class DashboardDatasource extends DataSourceApi<DashboardQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  getCollapsedText(query: DashboardQuery) {\n    return `Dashboard Reference: ${query.panelId}`;\n  }\n\n  query(options: DataQueryRequest<DashboardQuery>): Observable<DataQueryResponse> {\n    const scene: SceneObject | undefined = options.scopedVars?.__sceneObject?.value;\n\n    if (options.requestId.indexOf('mixed') > -1) {\n      throw new Error('Dashboard data source cannot be used with Mixed data source.');\n    }\n\n    if (!scene) {\n      throw new Error('Can only be called from a scene');\n    }\n\n    const query = options.targets[0];\n    if (!query) {\n      return of({ data: [] });\n    }\n\n    const panelId = query.panelId;\n\n    if (!panelId) {\n      return of({ data: [] });\n    }\n\n    let sourcePanel = this.findSourcePanel(scene, panelId);\n\n    if (!sourcePanel) {\n      return of({ data: [], error: { message: 'Could not find source panel' } });\n    }\n\n    let sourceDataProvider: SceneDataProvider | undefined = sourcePanel.state.$data;\n\n    if (!query.withTransforms && sourceDataProvider instanceof SceneDataTransformer) {\n      sourceDataProvider = sourceDataProvider.state.$data;\n    }\n\n    if (!sourceDataProvider || !sourceDataProvider.getResultsStream) {\n      return of({ data: [] });\n    }\n\n    return defer(() => {\n      if (!sourceDataProvider!.isActive && sourceDataProvider?.setContainerWidth) {\n        sourceDataProvider?.setContainerWidth(500);\n      }\n\n      const cleanUp = sourceDataProvider!.activate();\n\n      return sourceDataProvider!.getResultsStream!().pipe(\n        map((result) => {\n          return {\n            data: result.data.series,\n            state: result.data.state,\n            errors: result.data.errors,\n            error: result.data.error,\n            key: 'source-ds-provider',\n          };\n        }),\n        finalize(cleanUp)\n      );\n    });\n  }\n\n  private findSourcePanel(scene: SceneObject, panelId: number) {\n    return findVizPanelByKey(scene, getVizPanelKeyForPanelId(panelId));\n  }\n\n  testDatasource(): Promise<TestDataSourceResponse> {\n    return Promise.resolve({ message: '', status: '' });\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { DashboardQueryEditor } from './DashboardQueryEditor';\nimport { DashboardDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(DashboardDatasource).setQueryEditor(DashboardQueryEditor);\n"],"names":[],"sourceRoot":""}