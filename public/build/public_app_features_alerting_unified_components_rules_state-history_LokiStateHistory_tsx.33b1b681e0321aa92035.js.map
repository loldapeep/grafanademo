{"version":3,"file":"public_app_features_alerting_unified_components_rules_state-history_LokiStateHistory_tsx.33b1b681e0321aa92035.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/api/stateHistoryApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/LogRecordViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/LogTimelineViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/LokiStateHistory.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/common.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/useRuleHistoryRecords.tsx"],"sourcesContent":["import { DataFrameJSON } from '@grafana/data';\n\nimport { alertingApi } from './alertingApi';\n\nexport const stateHistoryApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getRuleHistory: build.query<DataFrameJSON, { ruleUid?: string; from?: number; to?: number; limit?: number }>({\n      query: ({ ruleUid, from, to, limit = 100 }) => ({\n        url: '/api/v1/rules/history',\n        params: { ruleUID: ruleUid, from, to, limit },\n      }),\n    }),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { formatDistanceToNowStrict } from 'date-fns';\nimport { groupBy, uniqueId } from 'lodash';\nimport React, { useEffect } from 'react';\n\nimport { dateTimeFormat, GrafanaTheme2 } from '@grafana/data';\nimport { Icon, TagList, useStyles2, Stack } from '@grafana/ui';\n\nimport { Label } from '../../Label';\nimport { AlertStateTag } from '../AlertStateTag';\n\nimport { LogRecord, omitLabels } from './common';\n\ninterface LogRecordViewerProps {\n  records: LogRecord[];\n  commonLabels: Array<[string, string]>;\n  onRecordsRendered?: (timestampRefs: Map<number, HTMLElement>) => void;\n  onLabelClick?: (label: string) => void;\n}\n\nfunction groupRecordsByTimestamp(records: LogRecord[]) {\n  // groupBy has been replaced by the reduce to avoid back and forth conversion of timestamp from number to string\n  const groupedLines = records.reduce((acc, current) => {\n    const tsGroup = acc.get(current.timestamp);\n    if (tsGroup) {\n      tsGroup.push(current);\n    } else {\n      acc.set(current.timestamp, [current]);\n    }\n\n    return acc;\n  }, new Map<number, LogRecord[]>());\n\n  return new Map([...groupedLines].sort((a, b) => b[0] - a[0]));\n}\n\nexport const LogRecordViewerByTimestamp = React.memo(\n  ({ records, commonLabels, onLabelClick, onRecordsRendered }: LogRecordViewerProps) => {\n    const styles = useStyles2(getStyles);\n\n    const groupedLines = groupRecordsByTimestamp(records);\n\n    const timestampRefs = new Map<number, HTMLElement>();\n    useEffect(() => {\n      onRecordsRendered && onRecordsRendered(timestampRefs);\n    });\n\n    return (\n      <ul className={styles.logsScrollable} aria-label=\"State history by timestamp\">\n        {Array.from(groupedLines.entries()).map(([key, records]) => {\n          return (\n            <li\n              id={key.toString(10)}\n              key={key}\n              data-testid={key}\n              ref={(element) => element && timestampRefs.set(key, element)}\n              className={styles.listItemWrapper}\n            >\n              <Timestamp time={key} />\n              <div className={styles.logsContainer}>\n                {records.map(({ line }) => (\n                  <React.Fragment key={uniqueId()}>\n                    <AlertStateTag state={line.previous} size=\"sm\" muted />\n                    <Icon name=\"arrow-right\" size=\"sm\" />\n                    <AlertStateTag state={line.current} />\n                    <Stack>{line.values && <AlertInstanceValues record={line.values} />}</Stack>\n                    <div>\n                      {line.labels && (\n                        <TagList\n                          tags={omitLabels(Object.entries(line.labels), commonLabels).map(\n                            ([key, value]) => `${key}=${value}`\n                          )}\n                          onClick={onLabelClick}\n                        />\n                      )}\n                    </div>\n                  </React.Fragment>\n                ))}\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n);\nLogRecordViewerByTimestamp.displayName = 'LogRecordViewerByTimestamp';\n\nexport function LogRecordViewerByInstance({ records, commonLabels }: LogRecordViewerProps) {\n  const styles = useStyles2(getStyles);\n\n  const groupedLines = groupBy(records, (record: LogRecord) => {\n    return JSON.stringify(record.line.labels);\n  });\n\n  return (\n    <>\n      {Object.entries(groupedLines).map(([key, records]) => {\n        return (\n          <Stack direction=\"column\" key={key}>\n            <h4>\n              <TagList\n                tags={omitLabels(Object.entries(records[0].line.labels ?? {}), commonLabels).map(\n                  ([key, value]) => `${key}=${value}`\n                )}\n              />\n            </h4>\n            <div className={styles.logsContainer}>\n              {records.map(({ line, timestamp }) => (\n                <div key={uniqueId()}>\n                  <AlertStateTag state={line.previous} size=\"sm\" muted />\n                  <Icon name=\"arrow-right\" size=\"sm\" />\n                  <AlertStateTag state={line.current} />\n                  <Stack>{line.values && <AlertInstanceValues record={line.values} />}</Stack>\n                  <div>{dateTimeFormat(timestamp)}</div>\n                </div>\n              ))}\n            </div>\n          </Stack>\n        );\n      })}\n    </>\n  );\n}\n\ninterface TimestampProps {\n  time: number; // epoch timestamp\n}\n\nconst Timestamp = ({ time }: TimestampProps) => {\n  const dateTime = new Date(time);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.timestampWrapper}>\n      <Stack alignItems=\"center\" gap={1}>\n        <Icon name=\"clock-nine\" size=\"sm\" />\n        <span className={styles.timestampText}>{dateTimeFormat(dateTime)}</span>\n        <small>({formatDistanceToNowStrict(dateTime)} ago)</small>\n      </Stack>\n    </div>\n  );\n};\n\nconst AlertInstanceValues = React.memo(({ record }: { record: Record<string, number> }) => {\n  const values = Object.entries(record);\n\n  return (\n    <>\n      {values.map(([key, value]) => (\n        <Label key={key} label={key} value={value} />\n      ))}\n    </>\n  );\n});\nAlertInstanceValues.displayName = 'AlertInstanceValues';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  logsContainer: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content max-content max-content auto max-content',\n    gap: theme.spacing(2, 1),\n    alignItems: 'center',\n  }),\n  logsScrollable: css({\n    height: '500px',\n    overflow: 'scroll',\n\n    flex: 1,\n  }),\n  timestampWrapper: css({\n    color: theme.colors.text.secondary,\n  }),\n  timestampText: css({\n    color: theme.colors.text.primary,\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  listItemWrapper: css({\n    background: 'transparent',\n    outline: '1px solid transparent',\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n    [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n      transition: 'background 150ms, outline 150ms',\n    },\n  }),\n});\n","import React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { DataFrame, InterpolateFunction, TimeRange } from '@grafana/data';\nimport { VisibilityMode } from '@grafana/schema';\nimport { LegendDisplayMode, useTheme2 } from '@grafana/ui';\nimport { TimelineChart } from '../../../../../../core/components/TimelineChart/TimelineChart';\nimport { TimelineMode } from '../../../../../../core/components/TimelineChart/utils';\n\ninterface LogTimelineViewerProps {\n  frames: DataFrame[];\n  timeRange: TimeRange;\n}\n\n// noop\nconst replaceVariables: InterpolateFunction = (v) => v;\n\nexport const LogTimelineViewer = React.memo(({ frames, timeRange }: LogTimelineViewerProps) => {\n  const theme = useTheme2();\n\n  return (\n    <AutoSizer disableHeight>\n      {({ width }) => (\n        <TimelineChart\n          frames={frames}\n          timeRange={timeRange}\n          timeZone={'browser'}\n          mode={TimelineMode.Changes}\n          height={18 * frames.length + 50}\n          width={width}\n          showValue={VisibilityMode.Never}\n          theme={theme}\n          rowHeight={0.8}\n          legend={{\n            calcs: [],\n            displayMode: LegendDisplayMode.List,\n            placement: 'bottom',\n            showLegend: true,\n          }}\n          legendItems={[\n            { label: 'Normal', color: theme.colors.success.main, yAxis: 1 },\n            { label: 'Pending', color: theme.colors.warning.main, yAxis: 1 },\n            { label: 'Alerting', color: theme.colors.error.main, yAxis: 1 },\n            { label: 'NoData', color: theme.colors.info.main, yAxis: 1 },\n            { label: 'Mixed', color: theme.colors.text.secondary, yAxis: 1 },\n          ]}\n          replaceVariables={replaceVariables}\n        />\n      )}\n    </AutoSizer>\n  );\n});\n\nLogTimelineViewer.displayName = 'LogTimelineViewer';\n","import { css } from '@emotion/css';\nimport { fromPairs, isEmpty, sortBy, take, uniq } from 'lodash';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { DataFrame, dateTime, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { Alert, Button, Field, Icon, Input, Label, Stack, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { stateHistoryApi } from '../../../api/stateHistoryApi';\nimport { combineMatcherStrings } from '../../../utils/alertmanager';\nimport { AlertLabels } from '../../AlertLabels';\nimport { HoverCard } from '../../HoverCard';\n\nimport { LogRecordViewerByTimestamp } from './LogRecordViewer';\nimport { LogTimelineViewer } from './LogTimelineViewer';\nimport { useRuleHistoryRecords } from './useRuleHistoryRecords';\n\ninterface Props {\n  ruleUID: string;\n}\n\nconst STATE_HISTORY_POLLING_INTERVAL = 10 * 1000; // 10 seconds\nconst MAX_TIMELINE_SERIES = 12;\n\nconst LokiStateHistory = ({ ruleUID }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [instancesFilter, setInstancesFilter] = useState('');\n  const logsRef = useRef<Map<number, HTMLElement>>(new Map<number, HTMLElement>());\n\n  const { getValues, setValue, register, handleSubmit } = useForm({ defaultValues: { query: '' } });\n\n  const { useGetRuleHistoryQuery } = stateHistoryApi;\n\n  // We prefer log count-based limit rather than time-based, but the API doesn't support it yet\n  const queryTimeRange = useMemo(() => getDefaultTimeRange(), []);\n\n  const {\n    currentData: stateHistory,\n    isLoading,\n    isError,\n    error,\n  } = useGetRuleHistoryQuery(\n    {\n      ruleUid: ruleUID,\n      from: queryTimeRange.from.unix(),\n      to: queryTimeRange.to.unix(),\n      limit: 250,\n    },\n    {\n      refetchOnFocus: true,\n      refetchOnReconnect: true,\n      pollingInterval: STATE_HISTORY_POLLING_INTERVAL,\n    }\n  );\n\n  const { dataFrames, historyRecords, commonLabels, totalRecordsCount } = useRuleHistoryRecords(\n    stateHistory,\n    instancesFilter\n  );\n\n  const { frameSubset, frameTimeRange } = useFrameSubset(dataFrames);\n\n  const onLogRecordLabelClick = useCallback(\n    (label: string) => {\n      const matcherString = combineMatcherStrings(getValues('query'), label);\n      setInstancesFilter(matcherString);\n      setValue('query', matcherString);\n    },\n    [setInstancesFilter, setValue, getValues]\n  );\n\n  const onFilterCleared = useCallback(() => {\n    setInstancesFilter('');\n    setValue('query', '');\n  }, [setInstancesFilter, setValue]);\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n  if (isError) {\n    return (\n      <Alert title=\"Error fetching the state history\" severity=\"error\">\n        {error instanceof Error ? error.message : 'Unable to fetch alert state history'}\n      </Alert>\n    );\n  }\n\n  const hasMoreInstances = frameSubset.length < dataFrames.length;\n  const emptyStateMessage =\n    totalRecordsCount > 0\n      ? `No matches were found for the given filters among the ${totalRecordsCount} instances`\n      : 'No state transitions have occurred in the last 30 days';\n\n  return (\n    <div className={styles.fullSize}>\n      <form onSubmit={handleSubmit((data) => setInstancesFilter(data.query))}>\n        <SearchFieldInput\n          {...register('query')}\n          showClearFilterSuffix={!!instancesFilter}\n          onClearFilterClick={onFilterCleared}\n        />\n        <input type=\"submit\" hidden />\n      </form>\n      {!isEmpty(commonLabels) && (\n        <div className={styles.commonLabels}>\n          <Stack gap={1} alignItems=\"center\">\n            <strong>Common labels</strong>\n            <Tooltip content=\"Common labels are the ones attached to all of the alert instances\">\n              <Icon name=\"info-circle\" />\n            </Tooltip>\n            <AlertLabels labels={fromPairs(commonLabels)} size=\"sm\" />\n          </Stack>\n        </div>\n      )}\n      {isEmpty(frameSubset) ? (\n        <>\n          <div className={styles.emptyState}>\n            {emptyStateMessage}\n            {totalRecordsCount > 0 && (\n              <Button variant=\"secondary\" type=\"button\" onClick={onFilterCleared}>\n                Clear filters\n              </Button>\n            )}\n          </div>\n        </>\n      ) : (\n        <>\n          <div className={styles.graphWrapper}>\n            <LogTimelineViewer frames={frameSubset} timeRange={frameTimeRange} />\n          </div>\n          {hasMoreInstances && (\n            <div className={styles.moreInstancesWarning}>\n              <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                <Icon name=\"exclamation-triangle\" size=\"sm\" />\n                <small>{`Only showing ${frameSubset.length} out of ${dataFrames.length} instances. Click on the labels to narrow down the results`}</small>\n              </Stack>\n            </div>\n          )}\n          <LogRecordViewerByTimestamp\n            records={historyRecords}\n            commonLabels={commonLabels}\n            onRecordsRendered={(recordRefs) => (logsRef.current = recordRefs)}\n            onLabelClick={onLogRecordLabelClick}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nfunction useFrameSubset(frames: DataFrame[]) {\n  return useMemo(() => {\n    const frameSubset = take(frames, MAX_TIMELINE_SERIES);\n    const frameSubsetTimestamps = sortBy(uniq(frameSubset.flatMap((frame) => frame.fields[0].values)));\n\n    const minTs = Math.min(...frameSubsetTimestamps);\n    const maxTs = Math.max(...frameSubsetTimestamps);\n\n    const rangeStart = dateTime(minTs);\n    const rangeStop = dateTime(maxTs);\n\n    const frameTimeRange: TimeRange = {\n      from: rangeStart,\n      to: rangeStop,\n      raw: {\n        from: rangeStart,\n        to: rangeStop,\n      },\n    };\n\n    return { frameSubset, frameSubsetTimestamps, frameTimeRange };\n  }, [frames]);\n}\n\ninterface SearchFieldInputProps extends Omit<React.ComponentProps<typeof Input>, 'prefix' | 'suffix' | 'placeholder'> {\n  showClearFilterSuffix: boolean;\n  onClearFilterClick: () => void;\n}\n\nconst SearchFieldInput = React.forwardRef<HTMLInputElement, SearchFieldInputProps>(\n  ({ showClearFilterSuffix, onClearFilterClick, ...rest }: SearchFieldInputProps, ref) => {\n    return (\n      <Field\n        label={\n          <Label htmlFor=\"instancesSearchInput\">\n            <Stack gap={0.5}>\n              <span>Filter instances</span>\n              <HoverCard\n                content={\n                  <>\n                    Use label matcher expression (like <code>{'{foo=bar}'}</code>) or click on an instance label to\n                    filter instances\n                  </>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </HoverCard>\n            </Stack>\n          </Label>\n        }\n      >\n        <Input\n          id=\"instancesSearchInput\"\n          prefix={<Icon name=\"search\" />}\n          suffix={\n            showClearFilterSuffix && (\n              <Button fill=\"text\" icon=\"times\" size=\"sm\" onClick={onClearFilterClick}>\n                Clear\n              </Button>\n            )\n          }\n          placeholder=\"Filter instances\"\n          ref={ref}\n          {...rest}\n        />\n      </Field>\n    );\n  }\n);\nSearchFieldInput.displayName = 'SearchFieldInput';\n\nfunction getDefaultTimeRange(): TimeRange {\n  const fromDateTime = dateTime().subtract(30, 'days');\n  const toDateTime = dateTime();\n  return {\n    from: fromDateTime,\n    to: toDateTime,\n    raw: { from: fromDateTime, to: toDateTime },\n  };\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  fullSize: css({\n    minWidth: '100%',\n    height: '100%',\n\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n  graphWrapper: css({\n    padding: `${theme.spacing()} 0`,\n  }),\n  emptyState: css({\n    color: theme.colors.text.secondary,\n\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n    alignItems: 'center',\n    margin: 'auto auto',\n  }),\n  moreInstancesWarning: css({\n    color: theme.colors.warning.text,\n    padding: theme.spacing(),\n  }),\n  commonLabels: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content auto',\n  }),\n  // we need !important here to override the list item default styles\n  highlightedLogRecord: css({\n    background: `${theme.colors.primary.transparent} !important`,\n    outline: `1px solid ${theme.colors.primary.shade} !important`,\n  }),\n});\n\nexport default LokiStateHistory;\n","import { isEqual, uniqBy } from 'lodash';\n\nimport { GrafanaAlertStateWithReason } from '../../../../../../types/unified-alerting-dto';\n\nexport interface Line {\n  previous: GrafanaAlertStateWithReason;\n  current: GrafanaAlertStateWithReason;\n  values?: Record<string, number>;\n  labels?: Record<string, string>;\n}\n\nexport interface LogRecord {\n  timestamp: number;\n  line: Line;\n}\n\nexport type Label = [string, string];\n\n// omit \"common\" labels from \"labels\"\nexport function omitLabels(labels: Label[], common: Label[]): Label[] {\n  return labels.filter((label) => {\n    return !common.find((commonLabel) => JSON.stringify(commonLabel) === JSON.stringify(label));\n  });\n}\n\n// find all common labels by looking at which ones occur in every record, then create a unique array of items for those\nexport function extractCommonLabels(labels: Label[][]): Label[] {\n  const flatLabels = labels.flatMap((label) => label);\n\n  const commonLabels = uniqBy(\n    flatLabels.filter((label) => {\n      const count = flatLabels.filter((l) => isEqual(label, l)).length;\n      return count === Object.keys(labels).length;\n    }),\n    (label) => JSON.stringify(label)\n  );\n\n  return commonLabels;\n}\n","import { groupBy } from 'lodash';\nimport { useMemo } from 'react';\n\nimport {\n  DataFrame,\n  DataFrameJSON,\n  Field as DataFrameField,\n  FieldType,\n  getDisplayProcessor,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { fieldIndexComparer } from '@grafana/data/src/field/fieldComparers';\nimport { MappingType, ThresholdsMode } from '@grafana/schema';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { labelsMatchMatchers, parseMatchers } from '../../../utils/alertmanager';\n\nimport { extractCommonLabels, Line, LogRecord, omitLabels } from './common';\n\nexport function useRuleHistoryRecords(stateHistory?: DataFrameJSON, filter?: string) {\n  const theme = useTheme2();\n\n  return useMemo(() => {\n    // merge timestamp with \"line\"\n    const tsValues = stateHistory?.data?.values[0] ?? [];\n    const timestamps: number[] = isNumbers(tsValues) ? tsValues : [];\n    const lines = stateHistory?.data?.values[1] ?? [];\n\n    const logRecords = timestamps.reduce((acc: LogRecord[], timestamp: number, index: number) => {\n      const line = lines[index];\n      // values property can be undefined for some instance states (e.g. NoData)\n      if (isLine(line)) {\n        acc.push({ timestamp, line });\n      }\n\n      return acc;\n    }, []);\n\n    // group all records by alert instance (unique set of labels)\n    const logRecordsByInstance = groupBy(logRecords, (record: LogRecord) => {\n      return JSON.stringify(record.line.labels);\n    });\n\n    // CommonLabels should not be affected by the filter\n    // find common labels so we can extract those from the instances\n    const groupLabels = Object.keys(logRecordsByInstance);\n    const groupLabelsArray: Array<Array<[string, string]>> = groupLabels.map((label) => {\n      return Object.entries(JSON.parse(label));\n    });\n\n    const commonLabels = extractCommonLabels(groupLabelsArray);\n\n    const filterMatchers = filter ? parseMatchers(filter) : [];\n    const filteredGroupedLines = Object.entries(logRecordsByInstance).filter(([key]) => {\n      const labels = JSON.parse(key);\n      return labelsMatchMatchers(labels, filterMatchers);\n    });\n\n    const dataFrames: DataFrame[] = filteredGroupedLines.map<DataFrame>(([key, records]) => {\n      return logRecordsToDataFrame(key, records, commonLabels, theme);\n    });\n\n    return {\n      historyRecords: logRecords.filter(({ line }) => line.labels && labelsMatchMatchers(line.labels, filterMatchers)),\n      dataFrames,\n      commonLabels,\n      totalRecordsCount: logRecords.length,\n    };\n  }, [stateHistory, filter, theme]);\n}\n\nexport function isNumbers(value: unknown[]): value is number[] {\n  return value.every((v) => typeof v === 'number');\n}\n\nexport function isLine(value: unknown): value is Line {\n  return typeof value === 'object' && value !== null && 'current' in value && 'previous' in value;\n}\n\n// Each alert instance is represented by a data frame\n// Each frame consists of two fields: timestamp and state change\nexport function logRecordsToDataFrame(\n  instanceLabels: string,\n  records: LogRecord[],\n  commonLabels: Array<[string, string]>,\n  theme: GrafanaTheme2\n): DataFrame {\n  const parsedInstanceLabels = Object.entries<string>(JSON.parse(instanceLabels));\n\n  // There is an artificial element at the end meaning Date.now()\n  // It exist to draw the state change from when it happened to the current time\n  const timeField: DataFrameField = {\n    name: 'time',\n    type: FieldType.time,\n    values: [...records.map((record) => record.timestamp), Date.now()],\n    config: { displayName: 'Time', custom: { fillOpacity: 100 } },\n  };\n\n  const timeIndex = timeField.values.map((_, index) => index);\n  timeIndex.sort(fieldIndexComparer(timeField));\n\n  const stateValues = [...records.map((record) => record.line.current), records.at(-1)?.line.current];\n\n  const frame: DataFrame = {\n    fields: [\n      {\n        ...timeField,\n        values: timeField.values.map((_, i) => timeField.values[timeIndex[i]]),\n      },\n      {\n        name: 'state',\n        type: FieldType.string,\n        values: stateValues.map((_, i) => stateValues[timeIndex[i]]),\n        config: {\n          displayName: omitLabels(parsedInstanceLabels, commonLabels)\n            .map(([key, label]) => `${key}=${label}`)\n            .join(', '),\n          color: { mode: 'thresholds' },\n          custom: { fillOpacity: 100 },\n          mappings: [\n            {\n              type: MappingType.ValueToText,\n              options: {\n                Alerting: {\n                  color: theme.colors.error.main,\n                },\n                Pending: {\n                  color: theme.colors.warning.main,\n                },\n                Normal: {\n                  color: theme.colors.success.main,\n                },\n                NoData: {\n                  color: theme.colors.info.main,\n                },\n              },\n            },\n          ],\n          thresholds: {\n            mode: ThresholdsMode.Absolute,\n            steps: [],\n          },\n        },\n      },\n    ],\n    length: timeField.values.length,\n    name: instanceLabels,\n  };\n\n  frame.fields.forEach((field) => {\n    field.display = getDisplayProcessor({ field, theme });\n  });\n\n  return frame;\n}\n"],"names":["records","key"],"sourceRoot":""}